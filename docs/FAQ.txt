
Q: How to upgrade from MariaDB 10.4 to Percona 5.7 server?

A: There is no upgrade path, only migration with extended downtime, because
   it requires procedure with several steps:

   1. Exporting all databases
   2. Uninstalling MariaDB server
   3. Installing Percona server
   4. Importing all databases from backups, including possibly problematic
      main SQL "mysql" system database

   While it's possible to automate this procedure, it's not possible to avoid
   extended downtime, and more importantly to guarantee trouble-free results,
   with the added risk of being stuck in the broken system if it fails.

   When Percona 5.7 became the BOA default SQL server, it replaced MariaDB 10.3
   as the recommended and supported default SQL server version.

   While BOA added also MariaDB 10.4 experimental support, it never became
   the recommended version and was intended only as a testing option to debug
   compatibility with our previously supported upgrade paths, which allowed
   to switch back and forth between MariaDB and Percona freely.

   Unfortunately the MariaDB 10.4 (and newer) diverged away from MySQL upstream
   compatibility too far, making upgrade to or from Percona impossible, so the
   only way to move away from MariaDB is to use the export/import procedure.

   If you were brave enough to upgrade MariaDB from the old default 10.3 to
   experimental MariaDB 10.4, you are now stuck with it.

   While it's technically possible to add special procedure in BOA to automate
   migration from MariaDB 10.4 to Percona 5.7, which is the current and only
   supported SQL server, because we plan to drop MariaDB support entirely soon,
   we recommend to migrate your Aegir system to newly installed server using
   xboa migration tool as explained in docs/MIGRATE.txt so you could escape both
   the MariaDB 10.4 trap and no longer supported Debian OS versions -- without
   the downtime and without any risks attached to upgrading both "in place",
   with the added benefit of simple rollback procedure if needed -- simply by
   running Verify task on all sites on the source Aegir server, which will
   overwrite the web proxy vhosts the xboa created.

   Still, we plan to add the automated "in place" migration from MariaDB 10.4
   to Percona 5.7 for those brave souls prepared for possible disaster and
   recovery from full VM backup.

   NOTE: If you are still on MariaDB 10.3, you can upgrade to Percona 5.7 with
   normal "barracuda up-lite" upgrade after replacing _DB_SERVER=MariaDB with
   _DB_SERVER=Percona in the /root/.barracuda.cnf


Q: Can I use BOA to host Drupal sites outside of Aegir?

A: Yes, but it is an unsupported feature, so you need to figure out how to
   do it properly and you should be prepared that things may explode without
   any warning after next BOA upgrade. All custom vhosts must reside in the
   master vhosts directory: /var/aegir/config/server_master/nginx/vhost.d/
   to avoid GHOST vhost detection and auto-cleanup which runs daily, but only
   for all Octopus instances in /data/disk directory tree.


Q: Can I use BOA to host sites with different engines, like WordPress?

A: Yes, but it is an unsupported feature, so you need to figure out how to
   do it properly and you should be prepared that things may explode without
   any warning after next BOA upgrade. All custom vhosts must reside in the
   master vhosts directory: /var/aegir/config/server_master/nginx/vhost.d/
   to avoid GHOST vhost detection and auto-cleanup which runs daily.

   Check also:

   https://drupal.org/node/1416798
   https://github.com/omega8cc/boa/issues/359


Q: Can I install services and apps not included in BOA?

A: It depends. BOA uses very aggressive upgrades procedures and if it is not
   aware of extra services installed and running, it may even uninstall them
   if the system packages dependency autoclean will trigger such action,
   so you need to watch closely what happens during and after barracuda upgrade.
   Note that you can specify extra packages in the special _EXTRA_PACKAGES
   veriable in the /root/.barracuda.cnf file -- This should help, but you should
   still watch closely what happens during and after barracuda upgrade.


Q: Can I call Drush from PHP scripts running via PHP-FPM (web based requests)?

A: Theoretically yes, but Drush should never be available for web requests,
   period. Not because we are telling you that it is bad and ugly, but because
   PHP-CLI and PHP-FPM are totally separate tools for many reasons, including
   privileges separation, security, cascades of various limits etc. You should
   use better, proper and secure method to run PHP, and if you need to extend
   or interact with Drupal via web requests, you should use Drupal API, along
   with contrib or custom modules and never attempt to call Drush from PHP-FPM.


Q: How to increase PHP-FPM memory_limit?

A: While limits are still auto-configured, depending on available RAM and CPU
   cores and written in the respective PHP ini files, the only place to modify
   `memory_limit` manually is the line with `php_admin_value[memory_limit]`
   in a file shared between all PHP-FPM pools in all running PHP versions:
   `/opt/etc/fpm/fpm-pool-common.conf` -- of course you need to reload all
   running FPM versions to make the change active, for example:
   `service php74-fpm reload`, `service php81-fpm reload`, etc.
   Check also: https://drupal.org/comment/8689745#comment-8689745

   The same applies to some other hardcoded/enforced limits:

     php_admin_value[max_execution_time] = 180
     php_admin_value[max_input_time] = 180
     php_admin_value[default_socket_timeout] = 180

   NOTE: You can modify this file, but your changes will be overwritten
         on every barracuda upgrade.

Q: Why `drush4` command no longer works?

A: Please read: https://drupal.org/comment/8691511#comment-8691511
