
You can very easily add, update or delete Solr cores powered by very fast
Jetty server. It's fully automated and can be managed very easily via site level
active INI file. Of course Solr must be already installed on the system
with SR7 and SR4 keywords in _XTRAS_LIST in the /root/.barracuda.cnf file.

There are three INI variables you can use to control Solr automated setup:
solr_integration_module, solr_update_config and solr_custom_config -- just
take a look at the documentation below, which can be found also in every site's
INI template. For more information on how to control BOA on site and platform
level via INI files, check our docs at https://omega8.cc/node/293

  NOTE: This feature works only for site level INI files, because
        Solr cores belong to sites, not to platforms.

;;
;;  This option allows to activate Solr core configuration for the site.
;;
;;  Both Solr 7 and Solr 4 powered by Jetty 9 server are available. Supported
;;  integration modules are limited to latest versions of either search_api_solr
;;  (D9/Solr7, D8/Solr7 and D7/Solr7 ) or apachesolr (D7/Solr4 and D6/Solr4).
;;
;;  Currently supported versions are listed below:
;;
;;   https://ftp.drupal.org/files/projects/search_api_solr-4.2.6.tar.gz (D9.2+)
;;   https://ftp.drupal.org/files/projects/search_api_solr-4.1.12.tar.gz (D8.8+)
;;   https://ftp.drupal.org/files/projects/search_api_solr-7.x-1.15.tar.gz
;;   https://ftp.drupal.org/files/projects/apachesolr-7.x-1.12.tar.gz
;;   https://ftp.drupal.org/files/projects/apachesolr-6.x-3.1.tar.gz
;;
;;  Note that you still need to add preferred integration module along with
;;  any its dependencies in your codebase since this feature doesn't modify
;;  your platform or site - it only creates Solr core with configuration
;;  files provided by integration module: schema.xml and solrconfig.xml
;;
;;  Important: search_api_solr for D8+ is different from all previous versions,
;;  as it requires Composer to install the module and its dependencies, then
;;  you will need to configure it, and only then you will be able to generate
;;  customized Solr core config files, which you should upload in the path:
;;  sites/foo.com/files/solr/ and wait 5-10 minutes to have them activated
;;  on the Solr 7 core the system will create for you.
;;
;;  NOTE: You must set 'solr_custom_config = NO' for the changes to take effect.
;;
;;  This setting affects the running every 5-10 minutes auto-installer, hence
;;  no need to wait until next morning to be able to use new Solr core. Win!
;;
;;  Once the Solr core is ready to use, you will find a special file in your
;;  site directory: sites/foo.com/solr.php with details on how to access
;;  your new Solr core with correct credentials.
;;
;;  The site with enabled Solr core can be safely migrated between platforms,
;;  integration module can be moved within your codebase and even upgraded,
;;  as long as it is using compatible schema.xml and solrconfig.xml files.
;;
;;  Supported values for the solr_integration_module variable:
;;
;;    search_api_solr
;;    apachesolr
;;
;;  To delete existing Solr core simply comment out this line.
;;  The system will cleanly delete existing Solr core in 15 minutes.
;;
;solr_integration_module = your_module_name_here

;;
;;  This option allows to auto-update your Solr core configuration files:
;;
;;    schema.xml
;;    solrconfig.xml
;;
;;  If there is new release for either apachesolr or search_api_solr, your
;;  Solr core will not be automatically upgraded to use newer schema.xml and
;;  solrconfig.xml, unless allowed by switching solr_update_config to YES.
;;
;;  This option will be ignored if you will set solr_custom_config to YES.
;;
;solr_update_config = NO

;;
;;  This option allows to protect custom Solr core configuration files:
;;
;;    schema.xml
;;    solrconfig.xml
;;
;;  To use customized version of either schema.xml or solrconfig.xml, you need
;;  to switch solr_custom_config to YES below and if you are using hosted
;;  Aegir service, submit a support ticket to get these files updated with
;;  your custom versions. On self-hosted BOA simply update these files directly.
;;
;;  Please remember to use Solr compatible config files.
;;
;;  IMPORTANT! -- Please note that with this option enabled you won't be able
;;  to follow the Drupal 8+ specific procedure for search_api_solr with config
;;  files generated and uploaded to the files/solr/ directory in your site.
;;  You could still use this option to make your Solr core immutable between
;;  your upgrades, though, but you must remember about disabling this option
;;  briefly (5-10 minutes) for the changes to take effect.
;;
;solr_custom_config = NO


  NOTE: The solr.php file is not used to connect to the Solr cor; it is only
        for your information to know how to configure Solr in the given site.

        It is important, because once you clone the site, the new clone will
        receive its own Solr core in a few minutes, so its solr.php file will be
        populated with unique, new credentials to use, which will overwrite the
        solr.php file copied automatically during Clone task. It is the
        configuration inside the site admin area which tells Drupal which Solr
        core to use, and you need to update it on the cloned site, of course,
        once the new core is created. It helps that cron is not enabled on the
        cloned site by default, so it will not overwrite original site index.

  NOTE on ERRORS:

       "Apache Solr Attachments Java executable not found; Could not execute
        a java command. You may need to set the path of the correct java
        executable as the variable 'apachesolr_attachments_java'
        in settings.php."

        To fix add in the site's local.settings.php file this line:

        $conf['apachesolr_attachments_java'] = '/usr/bin/java7 -Xms32m -Xmx64m';

        On Debian Stretch or newer the line should be modified:

        $conf['apachesolr_attachments_java'] = '/usr/bin/java8 -Xms32m -Xmx64m';

