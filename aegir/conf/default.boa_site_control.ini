;;
;;  DO NOT EDIT THIS FILE, it is just a TEMPLATE with documentation included!
;;
;;  This is a site level INI file template which can be used to modify
;;  default BOA system behaviour for this site only.
;;
;;  Copy this file as boa_site_control.ini into sites/foo.com/modules directory,
;;  then uncomment lines for any settings you want to modify, to make it active.
;;  All settings are initially listed with system defaults, for reference.
;;
;;  Note that it takes ~60 seconds to see any modification results in action
;;  due to opcode caching enabled in PHP-FPM for all non-dev sites.
;;


[session_control]
;;
;;  You can control session cookies expiration (TTL) per site and per platform.
;;  The value (in seconds) of the session_cookie_ttl variable is used as
;;  session.cookie_lifetime value.
;;
;;  BOA default defined in the system level global.inc file is 86400 == 24h.
;;
;;  We also recommend that you enable and configure built-in session_expire
;;  module, which allows you to keep the sessions DB table tidy. Make sure that
;;  TTL set via session_cookie_ttl variable below is *lower* than TTL configured
;;  in the session_expire module, because the module does not care about PHP
;;  settings and simply deletes old entries from the sessions table on cron run.
;;
;session_cookie_ttl = 86400

;;
;;  You can control session garbage collector (EOL) per site and per platform.
;;  The value (in seconds) of the session_gc_eol variable is used as
;;  session.gc_maxlifetime value and specifies the number of seconds after which
;;  data will be seen as 'garbage' and potentially cleaned up, resulting with
;;  $_SESSION variable discarded and affected authenticated users logged out.
;;
;;  BOA default defined in the system level global.inc file is 86400 == 24h.
;;
;session_gc_eol = 86400


[cache_control]
;;
;;  The modern version of Redis integration module is now enabled by default.
;;  You can switch it back to legacy version by uncommenting the line below
;;  and changing it to FALSE. But legacy version has serious limitations and
;;  known issues which have been fixed in the modern version.
;;
;redis_use_modern = TRUE

;;
;;  The blazing fast Redis lock implementation is also enabled by default.
;;  Note that this setting depends on redis_use_modern set to TRUE above,
;;  and otherwise is ignored.
;;
;redis_lock_enable = TRUE

;;
;;  The blazing fast Redis path cache implementation is also enabled by default.
;;  Note that this setting depends on redis_use_modern set to TRUE above,
;;  and otherwise is ignored.
;;
;redis_path_enable = TRUE

;;
;;  The more aggressive cache flush mode is now enabled by default, but you can
;;  still disable it with FALSE below, if you wish, after some testing, since
;;  it will further improve your site's performance.
;;
;;  Remember to uncomment the line below if you want to modify default setting
;;  which depends on redis_use_modern set to TRUE (default) above.
;;
;;  When enabled, it will automatically set more aggressive cache flush mode
;;  in general and very aggressive for selected cache bins, as listed below,
;;  along with redis integration module defaults, active when this option
;;  is explicitly set to FALSE.
;;
;;    $conf['redis_flush_mode']             = 1; // Redis default is 0
;;    $conf['redis_flush_mode_cache_page']  = 2; // Redis default is 1
;;    $conf['redis_flush_mode_cache_block'] = 2; // Redis default is 1
;;    $conf['redis_flush_mode_cache_menu']  = 2; // Redis default is 0
;;
;;  Note that even with this option enabled, you can easily override these
;;  values or configure completely custom modes, both for the wildcard option
;;  redis_flush_mode and per cache bin, in the local.settings.php file.
;;
;;  Please refer to the module README for more information on all available
;;  advanced flush modes: http://bit.ly/1drmi35
;;
;redis_flush_forced_mode = TRUE

;;
;;  Sometimes you may want to exclude some problematic cache bins from Redis
;;  so they will use default SQL engine, at least until related issue will be
;;  fixed either in your contrib code or in the Redis integration module.
;;
;;  Normally you had to edit the local.settings.php file which is both tedious
;;  and dangerous because of extra steps: https://omega8.cc/node/230 to add
;;  a line, for example: $conf['cache_class_cache_foo'] = 'DrupalDatabaseCache';
;;  Plus, it had to be done for every site separately.
;;
;;  Now you can simply list the cache bins to exclude below, comma separated,
;;  either in the site or platform level active INI file.
;;
;;  Example: redis_exclude_bins = "cache_views,cache_foo,cache_bar"
;;
;redis_exclude_bins = FALSE

;;
;;  Normally you should never disable Redis, unless for debugging rare issues.
;;  If you are sure you need to disable Redis for all sites on this platform,
;;  uncomment the line below and set the value to TRUE.
;;
;redis_cache_disable = FALSE

;;
;;  Speed Booster uses Nginx microcaching mode by default, with just 10 seconds
;;  both for anonymous visitors and logged in users. All known robots/crawlers
;;  and search engines spiders are forced to accept up to 24 hours cache TTL.
;;  Below you can modify the (10 seconds) default for human, anonymous visitors.
;;  Uncomment the line below and set any numeric value you prefer (in seconds)
;;  to override system default (10 seconds). You may want to enable Purge and
;;  Expire modules in this site modules admin area, so any new or modified node,
;;  comment added etc will selectively auto-purge related cache entries to avoid
;;  serving stale content for extended time (depending on the TTL configured).
;;  Note that the value must be higher than 10 or it will be ignored.
;;
;speed_booster_anon_cache_ttl = 10

;;
;;  With default Speed Booster TTL set to just 10 seconds to achieve the
;;  microcaching mode, disabling Drupal own page cache will significantly
;;  degrade your site's performance on every request not served via Speed
;;  Booster front-end cache, because Drupal will have to build the page from
;;  scratch every 10 seconds, making your site SLOW for every visitor not lucky
;;  enough to visit already cached page. This is why BOA enables Drupal own
;;  page cache by default, even if Boost, if used, will complain about it.
;;  It allows Drupal to keep its internal full-page cache in the super-fast
;;  Redis backend, to make also those every-10-seconds non-cached in Speed
;;  Booster requests blazingly fast.
;;
;;  If for some reason this default BOA configuration breaks something
;;  important in your site, like some page which should display not cached
;;  in a full-page cache results for anonymous visitors, even if they don't
;;  have a cookie set in the browser, didn't submit any form etc, so no other
;;  method to make the displayed page dynamic on the fly could be triggered,
;;  you could (very carefully) consider changing this variable to TRUE.
;;
;;  But please think twice before using this variable. While Redis will still
;;  improve performance for all other cache bins, the cache_page bin will
;;  not be used, and this will make your site much slower, randomly, even if
;;  you will increase the tiny speed_booster_anon_cache_ttl value above.
;;
;;  If you really have to disable this on some problematic URI, to guarantee
;;  that the page will be as dynamic as possible also for anonymous visitors,
;;  you may want to use more granular method, like adding in your site's
;;  local.settings.php file exception for the affected URI:
;;
;;    if (preg_match("/^\/(?:foo|bar)/", $_SERVER['REQUEST_URI'])) {
;;      header('X-Accel-Expires: 1'); // This disables Speed Booster
;;      $conf['cache'] = 0; // This disables page caching on the fly
;;    }
;;
;disable_drupal_page_cache = FALSE


[access_control]
;;
;;  When set to TRUE allows anonymous users to add content. Best practice and
;;  the default is FALSE which results with redirect to the site's homepage.
;;  Note that this option opens also an access to the node edit.
;;
;allow_anon_node_add = FALSE

;;
;;  When set to TRUE allows anonymous visitors to access the /admin* URL, even
;;  if only to see the 403 Access Denied message. Best practice and the default
;;  is FALSE which results with redirect to the site's homepage. This allows
;;  you to protect the site from DoS attempts, since the /admin* requests are
;;  never cached and always hit Drupal directly. Some sites may experience
;;  issues when your browser has expired session/cookie which redirects you
;;  to the homepage even if you were logged in. If something like this happens,
;;  you may want to disable this protection by changing it to TRUE below.
;;  Remember to uncomment the line below if you want to use this feature.
;;
;disable_admin_dos_protection = FALSE


[config_control]
;;
;;  When set to TRUE allows to use private files mode, so it is useful only
;;  for commerce sites which sell files for download or for intranet sites
;;  where you need to enforce strict access control. All other sites should
;;  never ever use private files mode for obvious performance reasons.
;;
;allow_private_file_downloads = FALSE

;;
;;  When set to TRUE, it forces the cookie_domain to always use main domain,
;;  also when the site is accessed via any domain alias. For example use case
;;  please read: https://gist.github.com/omega8cc/5724528
;;
;server_name_cookie_domain = FALSE

;;
;;  When set to TRUE allows to enable auto-detection and auto-include for
;;  the Drupal for Facebook (fb) module. Supported locations, in the order
;;  of precedence:
;;
;;    sites/all/modules/fb/
;;    sites/all/modules/contrib/fb/
;;    profiles/foo/modules/fb/
;;    profiles/foo/modules/contrib/fb/
;;
;;  IMPORTANT!
;;
;;  While the same setting in the platform level boa_platform_control.ini
;;  file located in the sites/all/modules directory will be automatically
;;  set to TRUE during daily maintenance procedure if the module
;;  will be detected, it will be completely ignored if there is also
;;  boa_site_control.ini file present in the sites/foo.com/modules
;;  directory and this setting is set to FALSE below to improve performance,
;;  in case this module is not used in this site. Remember to uncomment
;;  the line below if you want to use this feature.
;;
;auto_detect_facebook_integration = FALSE

;;
;;  When set to TRUE allows to enable auto-detection and auto-include for
;;  the Domain Access module. Supported locations, in the order of precedence:
;;
;;    sites/all/modules/domain/
;;    sites/all/modules/contrib/domain/
;;    profiles/foo/modules/domain/
;;    profiles/foo/modules/contrib/domain/
;;
;;  IMPORTANT!
;;
;;  While the same setting in the platform level boa_platform_control.ini
;;  file located in the sites/all/modules directory will be automatically
;;  set to TRUE during daily maintenance procedure if the module
;;  will be detected, it will be completely ignored if there is also
;;  boa_site_control.ini file present in the sites/foo.com/modules
;;  directory and this setting is set to FALSE below to improve performance,
;;  in case this module is not used in this site. Remember to uncomment
;;  the line below if you want to use this feature.
;;
;auto_detect_domain_access_integration = FALSE

;;
;;  When set to TRUE allows to enable auto-configuration for the AdvAgg module
;;  on the global.inc level. Supported locations, in the order of precedence:
;;
;;    sites/all/modules/advagg/       (optional override on the platform level)
;;    modules/o_contrib/advagg/       (included in all D6 platforms)
;;    modules/o_contrib_seven/advagg/ (included in all D7 platforms)
;;
;;  IMPORTANT!
;;
;;  This setting will be automatically set to TRUE during daily maintenance
;;  procedure if the module will be detected as enabled in the site, so while
;;  you could enable or disable it temporarily below, this setting will be
;;  overwritten again next morning, depending on the module actual status.
;;  Of course, it will not affect sites with .dev. or .devel. keyword present
;;  in the main site name.
;;
;advagg_auto_configuration = FALSE

;;
;;  When set to TRUE allows to enable auto-configuration for the Purge/Expire
;;  modules, included in all platforms by default (but not enabled by default)
;;  on the global.inc level.
;;
;;  IMPORTANT!
;;
;;  This setting will be automatically set to TRUE during daily maintenance
;;  procedure if both modules will be detected as enabled in the site, so while
;;  you could enable or disable it temporarily below, this setting will be
;;  overwritten again next morning, depending on both modules actual status.
;;  Of course, it will not affect sites with .dev. or .devel. keyword present
;;  in the main site name.
;;
;purge_expire_auto_configuration = FALSE


[system_control]
;;
;;  This option allows to activate Solr 4 core configuration for the site.
;;
;;  Only Solr 4 powered by Jetty server is available. Supported integration
;;  modules are limited to latest versions of either search_api_solr (D7 only)
;;  or apachesolr (will use Drupal core specific version automatically).
;;
;;  Currently used versions are listed below:
;;
;;    https://ftp.drupal.org/files/projects/search_api_solr-7.x-1.10.tar.gz
;;    https://ftp.drupal.org/files/projects/apachesolr-7.x-1.8.tar.gz
;;    https://ftp.drupal.org/files/projects/apachesolr-6.x-3.1.tar.gz
;;
;;  Note that you still need to add preferred integration module along with
;;  any its dependencies in your codebase since this feature doesn't modify
;;  your platform or site - it only creates Solr core with configuration
;;  files provided by integration module: schema.xml and solrconfig.xml
;;
;;  This setting affects only the running daily maintenance system behaviour,
;;  so you need to wait until next morning to be able to use new Solr 4 core.
;;
;;  Once the Solr core is ready to use, you will find a special file in your
;;  site directory: sites/foo.com/solr.php with details on how to access
;;  your new Solr core with correct credentials.
;;
;;  The site with enabled Solr core can be safely migrated between platforms,
;;  integration module can be moved within your codebase and even upgraded,
;;  as long as it is using compatible schema.xml and solrconfig.xml files.
;;
;;  Supported values for the solr_integration_module variable:
;;
;;    apachesolr
;;    search_api_solr
;;
;;  To delete existing Solr core simply comment out this line.
;;  The system will cleanly delete existing Solr core next morning.
;;
;;  IMPORTANT if you are using self-hosted BOA: _MODULES_FIX=YES must be set
;;  in the /root/.barracuda.cnf file (default is NO) to make this
;;  feature active.
;;
;solr_integration_module = your_module_name_here

;;
;;  This option allows to auto-update your Solr 4 core configuration files:
;;
;;    schema.xml
;;    solrconfig.xml
;;
;;  If there is new release for either apachesolr or search_api_solr, your
;;  Solr core will not be automatically upgraded to use newer schema.xml and
;;  solrconfig.xml, unless allowed by switching solr_update_config to YES.
;;
;;  This option will be ignored if you will set solr_custom_config to YES.
;;
;solr_update_config = NO

;;
;;  This option allows to protect custom Solr 4 core configuration files:
;;
;;    schema.xml
;;    solrconfig.xml
;;
;;  To use customized version of either schema.xml or solrconfig.xml, you need
;;  to switch solr_custom_config to YES below and if you are using hosted
;;  Aegir service, submit a support ticket to get these files updated with
;;  your custom versions. On self-hosted BOA simply update these files directly.
;;
;;  Please remember to use Solr 4 compatible config files.
;;
;solr_custom_config = NO

;;
;;  This option allows to activate and/or customize DB tables conversion mode
;;  for this site only, and the value defined here will override the value of
;;  sql_conversion_mode set in the platform level boa_platform_control.ini
;;  file located in the sites/all/modules directory.
;;
;;  It can be also set (and forced) automatically for all sites on all platforms
;;  if there is special _SQL_CONVERT variable defined for this Octopus instance
;;  in its .USER.octopus.cnf config file, but it may require submitting support
;;  request if you are using hosted Aegir BOA service without root access.
;;
;;  Supported values are: innodb and myisam (lowercase only!)
;;
;;  Note that this conversion, if enabled, will run daily even if all tables
;;  have been already converted, so it will run OPTIMIZE task on all tables,
;;  effectively.
;;
;;  This setting affects only the running daily maintenance system behaviour.
;;
;;  This option is available only in BOA-2.1.3 or newer.
;;
;sql_conversion_mode = NO

;;
;;  Registration settings are now restricted by design to protect your sites
;;  from unintended turning them into spam machines (which is allowed by
;;  Drupal 6 default settings, sadly). Spambots targeting Drupal sites are
;;  already a plague, so unless you have already set more strict permissions
;;  'Administrators only', we force reasonable default policy for new accounts
;;  registration: 'Visitors, but administrator approval is required' plus
;;  'Require email verification when a visitor creates an account' enabled.
;;  If you wish to disable email verification or set 'Who can register
;;  accounts' to 'Visitors', you must set it to TRUE below and uncomment
;;  the line. Now you will be able to permanently change these settings
;;  in this site admin area. Otherwise our default protection will be enabled
;;  again the next day (early morning in the server time zone). Note that
;;  we don't force 'Administrators only', because it could immediately break
;;  many commerce or community sites essential features. But for other sites,
;;  'Administrators only' is strongly suggested.
;;
;;  Note that this is a site specific only and not a platform wide setting.
;;
;;  Note also that this setting affects only the maintenance system behaviour.
;;  It doesn't affect the site behaviour directly in a live mode, so you can
;;  modify related settings in the site admin, and they can be overridden,
;;  depending on the value defined below, when the maintenance system runs
;;  again -- which happens each morning.
;;
;disable_user_register_protection = FALSE
