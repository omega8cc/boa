#!/bin/bash


###----------------------------------------###
###
###  Automatic BOA System Major Upgrade Tool
###
###  Copyright (C) 2010-2024 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###  This program is free software. You can
###  redistribute it and/or modify it under
###  the terms of the GNU GPL as published by
###  the Free Software Foundation, version 2
###  or later.
###
###  This program is distributed in the hope
###  that it will be useful, but WITHOUT ANY
###  WARRANTY; without even the implied
###  warranty of MERCHANTABILITY or FITNESS
###  FOR A PARTICULAR PURPOSE. See the GNU GPL
###  for more details.
###
###  You should have received a copy of the
###  GNU GPL along with this program.
###  If not, see http://www.gnu.org/licenses/
###
###  Code: https://github.com/omega8cc/boa
###
###----------------------------------------###


###----------------------------------------###
### How To: Launch auto-upgrade properly   ###
###----------------------------------------###
###
###  Start with manual barracuda upgrade.
###
###    $ barracuda up-lts system
###
###  !!! CREATE A FRESH VM BACKUP SNAPSHOT !!!
###  !!! TEST THE FRESHLY CREATED BACKUP.. !!!
###  !!! BY USING IT TO CREATE NEW TEST VM !!!
###  !!! DO NOT CONTINUE UNTIL IT WORKS... !!!
###
###  Reboot the server to make sure there are
###  no issues with boot process.
###
###    $ reboot
###
###  If reboot worked and there are no issues,
###  you are ready for the automated magic...
###
###    $ touch /root/.run-to-chimaera.cnf
###    $ service clean-boa-env start
###
###  Once enabled, the system will launch
###  a series of barracuda upgrades/reboots
###  until it migrates any supported Debian
###  or Devuan version to Devuan Chimaera.
###
###  !!! WARNING !!!
###
###  EXPECT IT TO CRASH COMPLETELY, SO ONLY
###  FULL RESTORE FROM LATEST BACKUP SNAPSHOT
###  OF ENTIRE VM WILL BRING IT BACK TO LIVE.
###
###  DO NOT PROCEED UNTIL YOU ARE READY FOR
###  DISASTER RECOVERY FROM TESTED BACKUP!
###
###----------------------------------------###


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###

export HOME=/root
export SHELL=/bin/bash
export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin
export _tRee=pro
export _xSrl=540proT05

_barCnf="/root/.barracuda.cnf"
_logAch="/root/.autochimaera.log"

###
### Avoid too many questions
###
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi

_INITINS="/usr/bin/apt-get -y --allow-unauthenticated install"
_dstUpArg="-fuy --allow-unauthenticated -q --config-file /opt/apt/apt.conf.noi.dist"
_nrmUpArg="-fuy --allow-unauthenticated -q --config-file /opt/apt/apt.conf.noi.nrml"

_TODAY=$(date +%y%m%d 2>&1)
_TODAY=${_TODAY//[^0-9]/}
_OS_CODE=check
#

_check_root() {
  if [ `whoami` = "root" ]; then
    [ -e "/var/lib/man-db/auto-update" ] && rm -f /var/lib/man-db/auto-update
  else
    echo "ERROR: This script should be run as a root user"
    exit 1
  fi
  _DF_TEST=$(df -kTh / -l \
    | grep '/' \
    | sed 's/\%//g' \
    | awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "${_DF_TEST}" ] && [ "${_DF_TEST}" -gt "90" ]; then
    echo "ERROR: Your disk space is almost full !!! ${_DF_TEST}/100"
    echo "ERROR: We can not proceed until it is below 90/100"
    exit 1
  fi
}
_check_root
cd /root/

if [ "${_tRee}" = "dev" ]; then
  touch /root/.debug-boa-installer.cnf
  touch /root/.debug-octopus-installer.cnf
fi

###
### Noticeable messages
###
_msg() {
  echo "AutoChimaera v.${_tRee} [$(date +%T 2>&1)] ==> $*"
}

_check_manufacturer_compatibility() {
  # Install dmidecode of not present
  if ! command -v dmidecode &> /dev/null; then
    /usr/bin/apt-get update &> /dev/null
    ${_INITINS} dmidecode &> /dev/null
  fi
  # Check if dmidecode is available
  _DMI_TEST=$(which dmidecode 2>&1)
  if [ -x "${_DMI_TEST}" ]; then
    _HOST_INFO=$(dmidecode -s system-manufacturer 2>&1)
  else
    _HOST_INFO="Unknown, dmidecode not available"
  fi
  # Check for Amazon EC2 in the system manufacturer field
  if dmidecode -s system-manufacturer | grep -i 'Amazon EC2' &> /dev/null; then
    _VMFAMILY="AWS"
    _msg "Not supported environment detected: ${_HOST_INFO}" >> "${_logAch}"
    _msg "Please check https://bit.ly/boa-caveats" >> "${_logAch}"
    _msg "Bye!" >> "${_logAch}"
    echo "Not supported environment detected: ${_HOST_INFO}"
    echo "Please check https://bit.ly/boa-caveats"
    echo "Bye!"
    exit 1
  elif [[ "${_HOST_INFO}" =~ "Unknown" ]] || [ -z "${_HOST_INFO}" ]; then
    _msg "Mysterious environment: ${_HOST_INFO}" >> "${_logAch}"
    _msg "Please check https://bit.ly/boa-caveats" >> "${_logAch}"
    _msg "Bye!" >> "${_logAch}"
    echo "Mysterious environment: ${_HOST_INFO}"
    echo "Please check https://bit.ly/boa-caveats"
    echo "Bye!"
    exit 1
  fi
}
_check_manufacturer_compatibility

_check_mysql_compatibility() {
  _DBS_TEST=$(which mysql 2>&1)
  if [ ! -z "${_DBS_TEST}" ]; then
    _DB_SERVER_TEST=$(mysql -V 2>&1)
  fi
  if [[ "${_DB_SERVER_TEST}" =~ "Ver 8.4." ]]; then
    _DB_V=8.4
  elif [[ "${_DB_SERVER_TEST}" =~ "Ver 8.3." ]]; then
    _DB_V=8.3
  elif [[ "${_DB_SERVER_TEST}" =~ "Ver 8.0." ]]; then
    _DB_V=8.0
  elif [[ "${_DB_SERVER_TEST}" =~ "Distrib 5.7." ]]; then
    _DB_V=5.7
  else
    _DB_V=UNSUPPORTED
  fi
  if [ "${_DB_V}" = "UNSUPPORTED" ]; then
    _msg "Not supported DB server detected ${_DB_SERVER_TEST}" >> "${_logAch}"
    exit 1
  fi
}
_check_mysql_compatibility

###
### Faster reboot
###
_faster_reboot() {
  _msg "Faster reboot prepare..." >> "${_logAch}"
  service cron stop &> /dev/null
  killall cron &> /dev/null
  kill -9 $(ps aux | grep '[s]econd.sh' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[m]inute.sh' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[r]unner.sh' | awk '{print $2}') &> /dev/null
  _msg "Cron has been stopped" >> "${_logAch}"
  _msg "Now waiting 60 seconds for any running tasks to complete" >> "${_logAch}"
  sleep 55
  if [ -e "/etc/init.d/clamav-daemon" ]; then
    update-rc.d -f clamav-daemon remove &> /dev/null
  fi
  if [ -e "/etc/init.d/clamav-freshclam" ]; then
    update-rc.d -f clamav-freshclam remove &> /dev/null
  fi
  kill -9 $(ps aux | grep '[a]vahi-daemon' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[c]lamd' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[f]reshclam' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[j]ava' | awk '{print $2}') &> /dev/null
  rm -f /run/clamav/*
  _msg "Java/Solr/Clamav have been stopped" >> "${_logAch}"
  service nginx stop &> /dev/null
  killall nginx &> /dev/null
  killall php &> /dev/null
  kill -9 $(ps aux | grep '[p]hp-fpm' | awk '{print $2}') &> /dev/null
  _msg "Nginx, PHP-CLI and PHP-FPM have been stopped" >> "${_logAch}"
  csf -df &> /dev/null
  csf -tf &> /dev/null
  _msg "Firewall has been purged" >> "${_logAch}"
  if [ -e "/root/.my.pass.txt" ]; then
    _SQL_PSWD=$(cat /root/.my.pass.txt 2>&1)
    _SQL_PSWD=$(echo -n ${_SQL_PSWD} | tr -d "\n" 2>&1)
    _IS_MYSQLD_RUNNING=$(ps aux | grep '[m]ysqld' | awk '{print $2}' 2>&1)
    if [ ! -z "${_IS_MYSQLD_RUNNING}" ] && [ ! -z "${_SQL_PSWD}" ]; then
      _msg "Preparing MySQLD for quick shutdown..." >> "${_logAch}"
      mysql -u root -e "SET GLOBAL innodb_max_dirty_pages_pct = 0;" &> /dev/null
      mysql -u root -e "SET GLOBAL innodb_change_buffering = 'none';" &> /dev/null
      mysql -u root -e "SET GLOBAL innodb_buffer_pool_dump_at_shutdown = 1;" &> /dev/null
      mysql -u root -e "SET GLOBAL innodb_io_capacity = 2000;" &> /dev/null
      mysql -u root -e "SET GLOBAL innodb_io_capacity_max = 4000;" &> /dev/null
      if [ "${_DB_V}" = "5.7" ]; then
        mysql -u root -e "SET GLOBAL innodb_buffer_pool_dump_pct = 100;" &> /dev/null
        mysql -u root -e "SET GLOBAL innodb_buffer_pool_dump_now = ON;" &> /dev/null
      fi
      mysql -u root -e "SET GLOBAL innodb_fast_shutdown = 1;" &> /dev/null
      _msg "Stopping MySQLD now..." >> "${_logAch}"
      service mysql stop &> /dev/null
      wait
      _msg "MySQLD stopped" >> "${_logAch}"
    else
      _msg "MySQLD already stopped" >> "${_logAch}"
    fi
  fi
  _msg "Faster reboot done" >> "${_logAch}"
}

if [ ! -e "/root/.run-to-chimaera.cnf" ]; then
  echo "ERROR: /root/.run-to-chimaera.cnf is required!"
  exit 1
fi

[ ! -e "/root/.mysql.yes.new.password.cnf" ] && touch /root/.mysql.yes.new.password.cnf

_check_os_compatibility() {
  _OS_DIST=$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  if [ "${_OS_CODE}" = "chimaera" ] \
    && [ ! -e "/root/.run-auto-major-os-reboot-chimaera-one.cnf" ] \
    && [ ! -e "/root/.run-auto-major-os-reboot-chimaera-two.cnf" ]; then
    echo "This server already runs ${_OS_DIST}/${_OS_CODE}"
    echo "Bye!"
    exit 1
  elif [ "${_OS_CODE}" = "daedalus" ] || [ "${_OS_CODE}" = "bookworm" ]; then
    echo "This server already runs newer ${_OS_DIST}/${_OS_CODE}"
    echo "Bye!"
    exit 1
  fi
  if [ "${_OS_CODE}" = "beowulf" ]; then
    _NEXT_OS_CODE=chimaera
  elif [ "${_OS_CODE}" = "bullseye" ]; then
    _NEXT_OS_CODE=chimaera
  elif [ "${_OS_CODE}" = "buster" ]; then
    _NEXT_OS_CODE=beowulf
  elif [ "${_OS_CODE}" = "stretch" ]; then
    _NEXT_OS_CODE=beowulf
  elif [ "${_OS_CODE}" = "jessie" ]; then
    _NEXT_OS_CODE=beowulf
  else
    if [ ! -e "/root/.run-auto-major-os-reboot-chimaera-one.cnf" ] \
      && [ ! -e "/root/.run-auto-major-os-reboot-chimaera-two.cnf" ]; then
      echo "This procedure does not support ${_OS_DIST}/${_OS_CODE}"
      echo "The minimum supported system is Debian/jessie"
      echo "The maximum supported system is Debian/bullseye or Devuan/beowulf"
      echo "Bye!"
      exit 1
    fi
  fi
}
_check_os_compatibility

if [ -x "/opt/local/bin/killer" ]; then
  sed -i "s/.*killer.*//gi" /etc/crontab &> /dev/null
  echo "*/1 *   * * *   root    bash /opt/local/bin/killer" >> /etc/crontab
fi

_if_remove_cloud_utils() {
  _INITD_TEST=$(ls -la /etc/init.d/*cloud* 2>&1)
  if [[ ! "${_INITD_TEST}" =~ "No such file" ]] \
    || [ -e "/etc/cloud/cloud.cfg.d" ]; then
    _msg "Removing problematic cloud-utils detected on this system" >> "${_logAch}"
    /usr/bin/apt-get update 2> /dev/null
    /usr/bin/apt-get remove cloud-utils cloud-init -y --purge --auto-remove -qq 2> /dev/null
    /usr/bin/apt-get remove cloud-image-utils cloud-guest-utils -y --purge --auto-remove -qq 2> /dev/null
    /usr/bin/apt-get autoremove --purge -y 2> /dev/null
    /usr/bin/apt-get autoclean -y 2> /dev/null
    if [ -e "/etc/cloud/cloud.cfg.d" ]; then
      mv -f /etc/cloud /var/backups/
    fi
  fi
}
if [ "${_VMFAMILY}" != "AWS" ]; then
  _if_remove_cloud_utils
fi

_if_clean_boa_env() {
  if [ ! -x "/etc/init.d/clean-boa-env" ] \
    || [ ! -e "/root/.run-auto-update-clean-boa-env.cnf" ]; then
    if [ -e "/etc/init.d/clean-boa-env" ]; then
      mv -f /etc/init.d/clean-boa-env /var/backups/clean-boa-env-bak
    fi
    _crlGet="-L --max-redirs 3 -k -s --retry 3 --retry-delay 5 -A iCab"
    _urlHmr="http://files.aegir.cc/versions/${_tRee}/boa/aegir"
    curl ${_crlGet} "${_urlHmr}/conf/var/clean-boa-env" -o /etc/init.d/clean-boa-env
    if [ -e "/etc/init.d/clean-boa-env" ]; then
      chmod 700 /etc/init.d/clean-boa-env
      chown root:root /etc/init.d/clean-boa-env
      update-rc.d clean-boa-env defaults &> /dev/null
      touch /root/.run-auto-update-clean-boa-env.cnf
    else
      if [ -e "/var/backups/clean-boa-env-bak" ]; then
        mv -f /var/backups/clean-boa-env-bak /etc/init.d/clean-boa-env
      fi
    fi
  fi
}
_if_clean_boa_env

_if_fix_dhcp() {
  if [ -e "/var/log/daemon.log" ]; then
    _DHCP_LOG="/var/log/daemon.log"
  else
    _DHCP_LOG="/var/log/syslog"
  fi
  if [ -e "${_DHCP_LOG}" ]; then
    if [ `tail --lines=100 ${_DHCP_LOG} \
      | grep --count "dhclient.*Failed"` -gt "0" ]; then
      sed -i "s/.*DHCP.*//g" /etc/csf/csf.allow
      wait
      sed -i "/^$/d" /etc/csf/csf.allow
      _DHCP_TEST=$(grep DHCPREQUEST ${_DHCP_LOG} | cut -d ' ' -f13 | sort | uniq 2>&1)
      if [[ "${_DHCP_TEST}" =~ "port" ]]; then
        for _IP in `grep DHCPREQUEST ${_DHCP_LOG} | cut -d ' ' -f12 | sort | uniq`;do echo "udp|out|d=67|d=${_IP} # Local DHCP out" >> /etc/csf/csf.allow;done
      else
        for _IP in `grep DHCPREQUEST ${_DHCP_LOG} | cut -d ' ' -f13 | sort | uniq`;do echo "udp|out|d=67|d=${_IP} # Local DHCP out" >> /etc/csf/csf.allow;done
      fi
      csf -q &> /dev/null
    fi
  fi
}

if [ -e "/root/.run-to-chimaera.cnf" ]; then
  echo " " >> "${_logAch}"
  if [ -e "/root/.run-auto-major-os-reboot-chimaera-one.cnf" ] \
    || [ -e "/root/.run-auto-major-os-reboot-chimaera-two.cnf" ]; then
    _msg "Waiting 30 seconds for the system start scripts to finish" >> "${_logAch}"
    sleep 30
    _if_fix_dhcp
  else
    _msg "Automatic BOA System Major Upgrade Tool welcomes you aboard!" >> "${_logAch}"
    sleep 3
    _if_fix_dhcp
  fi
fi

_AUTO_CHIMAERA_TEST=$(grep _AUTO_CHIMAERA ${_barCnf} 2>&1)
if [[ ! "${_AUTO_CHIMAERA_TEST}" =~ "_AUTO_CHIMAERA" ]]; then
  echo "_AUTO_CHIMAERA=YES" >> ${_barCnf}
fi

if [ -e "/root/.run-to-chimaera.cnf" ] \
  && [ ! -e "/root/.run-auto-major-os-reboot-chimaera-one.cnf" ] \
  && [ ! -e "/root/.run-auto-major-os-reboot-chimaera-two.cnf" ]; then
  echo " " >> "${_logAch}"
  _msg "Running barracuda php-idle disable to speed up upgrades" >> "${_logAch}"
  barracuda php-idle disable >> "${_logAch}"
  wait
  _msg "The barracuda php-idle disable completed" >> "${_logAch}"
  _msg "Launching standard barracuda up-${_tRee} system now" >> "${_logAch}"
  [ -e "/root/.force.rebuild.src.on.auto.now.cnf" ] && rm -f /root/.force.rebuild.src.on.auto.now.cnf
  /opt/local/bin/barracuda up-${_tRee} system >> "${_logAch}"
  wait
  _msg "The standard barracuda up-${_tRee} system completed" >> "${_logAch}"
  if [ -e "/root/.latest-barracuda-upgrade-finale.info" ]; then
    _OS_DIST=$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)
    _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
    if [ "${_OS_CODE}" = "jessie" ]; then
      echo "_JESSIE_TO_BEOWULF=YES" >> ${_barCnf}
      _msg "Launching major upgrade from ${_OS_DIST}/${_OS_CODE} to Devuan/beowulf" >> "${_logAch}"
    elif [ "${_OS_CODE}" = "stretch" ]; then
      echo "_STRETCH_TO_BEOWULF=YES" >> ${_barCnf}
      _msg "Launching major upgrade from ${_OS_DIST}/${_OS_CODE} to Devuan/beowulf" >> "${_logAch}"
    elif [ "${_OS_CODE}" = "buster" ]; then
      echo "_BUSTER_TO_BEOWULF=YES" >> ${_barCnf}
      _msg "Launching major upgrade from ${_OS_DIST}/${_OS_CODE} to Devuan/beowulf" >> "${_logAch}"
    elif [ "${_OS_CODE}" = "bullseye" ]; then
      echo "_BULLSEYE_TO_CHIMAERA=YES" >> ${_barCnf}
      _msg "Launching major upgrade from ${_OS_DIST}/${_OS_CODE} to Devuan/chimaera" >> "${_logAch}"
    elif [ "${_OS_CODE}" = "beowulf" ]; then
      echo "_BEOWULF_TO_CHIMAERA=YES" >> ${_barCnf}
      _msg "Launching major upgrade from ${_OS_DIST}/${_OS_CODE} to Devuan/chimaera" >> "${_logAch}"
    fi
    _msg "The first stage of major OS upgrade will start now" >> "${_logAch}"
    [ -e "/root/.force.rebuild.src.on.auto.now.cnf" ] && rm -f /root/.force.rebuild.src.on.auto.now.cnf
    /opt/local/bin/barracuda up-${_tRee} system >> "${_logAch}"
    wait
    if [ -e "/root/.run_post_major_os_upgrade.info" ]; then
      _msg "The first stage of major OS upgrade completed" >> "${_logAch}"
      _msg "The system will reboot now" >> "${_logAch}"
      rm -f /root/.latest-barracuda-upgrade-finale.info
      touch /root/.run-auto-major-os-reboot-chimaera-one.cnf
      update-grub >> "${_logAch}"
      _faster_reboot
      reboot
      exit 0
    fi
  fi
fi

if [ -e "/root/.run-to-chimaera.cnf" ] \
  && [ -e "/root/.run-auto-major-os-reboot-chimaera-one.cnf" ] \
  && [ ! -e "/root/.run-auto-major-os-reboot-chimaera-two.cnf" ]; then
  echo " " >> "${_logAch}"
  _msg "Launching post-reboot barracuda up-${_tRee} system" >> "${_logAch}"
  _msg "to complete the first stage of major OS upgrade" >> "${_logAch}"
  [ -e "/root/.force.rebuild.src.on.auto.now.cnf" ] && rm -f /root/.force.rebuild.src.on.auto.now.cnf
  /opt/local/bin/barracuda up-${_tRee} system >> "${_logAch}"
  wait
  _msg "The post-reboot barracuda up-${_tRee} system completed" >> "${_logAch}"
  echo " " >> "${_logAch}"
  _OS_DIST=$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  if [ -e "/root/.beowulf_to_chimaera_major_os_upgrade.info" ] \
    || [ -e "/root/.bullseye_to_chimaera_major_os_upgrade.info" ]; then
    _FURTHER_UPGRADE=NO
  else
    _FURTHER_UPGRADE=YES
  fi
  if [ "${_FURTHER_UPGRADE}" = "NO" ]; then
    if [ -e "/root/.latest-barracuda-upgrade-finale.info" ]; then
      _msg "The single stage major OS upgrade completed" >> "${_logAch}"
      _msg "The system will reboot now for a final upgrade" >> "${_logAch}"
      rm -f /root/.latest-barracuda-upgrade-finale.info
      touch /root/.run-auto-major-os-reboot-chimaera-two.cnf
      update-grub >> "${_logAch}"
      _faster_reboot
      reboot
      exit 0
    fi
  fi
  if [ "${_OS_CODE}" = "bullseye" ] && [ "${_FURTHER_UPGRADE}" = "YES" ]; then
    echo "_BULLSEYE_TO_CHIMAERA=YES" >> ${_barCnf}
    _msg "Launching major upgrade from ${_OS_DIST}/${_OS_CODE} to Devuan/chimaera" >> "${_logAch}"
  elif [ "${_OS_CODE}" = "beowulf" ] && [ "${_FURTHER_UPGRADE}" = "YES" ]; then
    echo "_BEOWULF_TO_CHIMAERA=YES" >> ${_barCnf}
    _msg "Launching major upgrade from ${_OS_DIST}/${_OS_CODE} to Devuan/chimaera" >> "${_logAch}"
  fi
  if [ "${_FURTHER_UPGRADE}" = "YES" ]; then
    _msg "The second stage of major OS upgrade will start now" >> "${_logAch}"
    [ -e "/root/.force.rebuild.src.on.auto.now.cnf" ] && rm -f /root/.force.rebuild.src.on.auto.now.cnf
    /opt/local/bin/barracuda up-${_tRee} system >> "${_logAch}"
    wait
    if [ -e "/root/.run_post_major_os_upgrade.info" ]; then
      _msg "The second stage of major OS upgrade completed" >> "${_logAch}"
      _msg "The system will reboot now" >> "${_logAch}"
      rm -f /root/.latest-barracuda-upgrade-finale.info
      touch /root/.run-auto-major-os-reboot-chimaera-two.cnf
      update-grub >> "${_logAch}"
      _faster_reboot
      reboot
      exit 0
    fi
  fi
fi

if [ -e "/root/.run-to-chimaera.cnf" ] \
  && [ -e "/root/.run-auto-major-os-reboot-chimaera-one.cnf" ] \
  && [ -e "/root/.run-auto-major-os-reboot-chimaera-two.cnf" ]; then
  echo " " >> "${_logAch}"
  touch /root/.auto-upgraded-to-chimaera.cnf
  _msg "Launching the final post-second-reboot barracuda up-${_tRee} system" >> "${_logAch}"
  [ ! -e "/root/.allow.apparmor.cnf" ] && touch /root/.allow.apparmor.cnf
  [ ! -e "/root/.force.rebuild.src.on.auto.now.cnf" ] && touch /root/.force.rebuild.src.on.auto.now.cnf
  /opt/local/bin/barracuda up-${_tRee} system >> "${_logAch}"
  wait
  [ -e "/root/.run-to-chimaera.cnf" ] && rm -f /root/.run-to-chimaera.cnf
  [ -e "/root/.force.rebuild.src.on.auto.now.cnf" ] && rm -f /root/.force.rebuild.src.on.auto.now.cnf
  [ -e "/root/.run-auto-major-os-reboot-chimaera-one.cnf" ] && rm -f /root/.run-auto-major-os-reboot-chimaera-one.cnf
  [ -e "/root/.run-auto-major-os-reboot-chimaera-two.cnf" ] && rm -f /root/.run-auto-major-os-reboot-chimaera-two.cnf
  sed -i "s/^_AUTO_CHIMAERA.*//g" /root/.barracuda.cnf
  _msg "The final post-reboot barracuda up-${_tRee} system completed" >> "${_logAch}"
  _msg "That's all folks!" >> "${_logAch}"
  _msg "Bye!" >> "${_logAch}"
  echo " " >> "${_logAch}"
fi

exit 0
