#!/bin/bash


###----------------------------------------###
###
###  Automatic BOA System Major Upgrade Tool
###
###  Copyright (C) 2010-2024 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###  This program is free software. You can
###  redistribute it and/or modify it under
###  the terms of the GNU GPL as published by
###  the Free Software Foundation, version 2
###  or later.
###
###  This program is distributed in the hope
###  that it will be useful, but WITHOUT ANY
###  WARRANTY; without even the implied
###  warranty of MERCHANTABILITY or FITNESS
###  FOR A PARTICULAR PURPOSE. See the GNU GPL
###  for more details.
###
###  You should have received a copy of the
###  GNU GPL along with this program.
###  If not, see http://www.gnu.org/licenses/
###
###  Code: https://github.com/omega8cc/boa
###
###----------------------------------------###


###----------------------------------------###
### HOW-TO: Launch auto-upgrade properly   ###
###----------------------------------------###
###
###  Start with manual barracuda upgrade.
###
###    $ barracuda up-lts system
###
###  !!! CREATE A FRESH VM BACKUP SNAPSHOT !!!
###  !!! TEST THE FRESHLY CREATED BACKUP.. !!!
###  !!! BY USING IT TO CREATE NEW TEST VM !!!
###  !!! DO NOT CONTINUE UNTIL IT WORKS... !!!
###
###  Reboot the server to make sure there are
###  no issues with boot process.
###
###    $ reboot
###
###  If reboot worked and there are no issues,
###  you are ready for the automated magic...
###
###    $ touch /root/.run-to-chimaera.cnf
###    $ service clean-boa-env start
###
###  Once enabled, the system will launch
###  a series of barracuda upgrades/reboots
###  until it migrates any supported Debian
###  or Devuan version to Devuan Chimaera.
###
###  !!! WARNING !!!
###
###  EXPECT IT TO CRASH COMPLETELY, SO ONLY
###  FULL RESTORE FROM LATEST BACKUP SNAPSHOT
###  OF ENTIRE VM WILL BRING IT BACK TO LIVE.
###
###  DO NOT PROCEED UNTIL YOU ARE READY FOR
###  DISASTER RECOVERY FROM TESTED BACKUP!
###
###----------------------------------------###


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###

HOME=/root
SHELL=/bin/bash
PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin

export PATH=${PATH}
export SHELL=${SHELL}
export HOME=${HOME}

barCnf="/root/.barracuda.cnf"
logAch="/root/.autochimaera.log"

###
### Avoid too many questions
###
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi

tRee=lts
export tRee="${tRee}"

_TODAY=$(date +%y%m%d 2>&1)
_TODAY=${_TODAY//[^0-9]/}
_X_SE="520proT02"
_THIS_SYS=check
#

check_root() {
  if [ `whoami` = "root" ]; then
    ionice -c2 -n7 -p $$
    renice 19 -p $$
    chmod a+w /dev/null
    if [ ! -e "/dev/fd" ]; then
      if [ -e "/proc/self/fd" ]; then
        rm -rf /dev/fd
        ln -s /proc/self/fd /dev/fd
      fi
    fi
    rm -f /var/lib/man-db/auto-update
  else
    echo "ERROR: This script should be ran as a root user"
    exit 1
  fi
  _DF_TEST=$(df -kTh / -l \
    | grep '/' \
    | sed 's/\%//g' \
    | awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "${_DF_TEST}" ] && [ "${_DF_TEST}" -gt "90" ]; then
    echo "ERROR: Your disk space is almost full !!! ${_DF_TEST}/100"
    echo "ERROR: We can not proceed until it is below 90/100"
    exit 1
  fi
}
check_root
cd /root/

###
### Noticeable messages
###
msg() {
  echo "AutoChimaera [$(date +%T 2>&1)] ==> $*"
}

###
### Faster reboot
###
faster_reboot() {
  msg "Faster reboot prepare..." >> ${logAch}
  service cron stop &> /dev/null
  killall cron &> /dev/null
  kill -9 $(ps aux | grep '[s]econd.sh' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[m]inute.sh' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[r]unner.sh' | awk '{print $2}') &> /dev/null
  msg "Cron has been stopped" >> ${logAch}
  msg "Now waiting 60 seconds for any running tasks to complete" >> ${logAch}
  sleep 55
  if [ -e "/etc/init.d/clamav-daemon" ]; then
    update-rc.d -f clamav-daemon remove &> /dev/null
  fi
  if [ -e "/etc/init.d/clamav-freshclam" ]; then
    update-rc.d -f clamav-freshclam remove &> /dev/null
  fi
  kill -9 $(ps aux | grep '[a]vahi-daemon' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[c]lamd' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[f]reshclam' | awk '{print $2}') &> /dev/null
  kill -9 $(ps aux | grep '[j]ava' | awk '{print $2}') &> /dev/null
  service nginx stop &> /dev/null
  killall nginx &> /dev/null
  killall php &> /dev/null
  kill -9 $(ps aux | grep '[p]hp-fpm' | awk '{print $2}') &> /dev/null
  msg "Nginx, PHP-CLI and PHP-FPM have been stopped" >> ${logAch}
  csf -df &> /dev/null
  csf -tf &> /dev/null
  msg "Firewall has been purged" >> ${logAch}
  if [ -e "/root/.my.pass.txt" ]; then
    _SQL_PSWD=$(cat /root/.my.pass.txt 2>&1)
    _SQL_PSWD=$(echo -n ${_SQL_PSWD} | tr -d "\n" 2>&1)
    _IS_MYSQLD_RUNNING=$(ps aux | grep '[m]ysqld' | awk '{print $2}' 2>&1)
    if [ ! -z "${_IS_MYSQLD_RUNNING}" ] && [ ! -z "${_SQL_PSWD}" ]; then
      msg "Preparing MySQLD for quick shutdown..." >> ${logAch}
      mysql -u root -e "SET GLOBAL innodb_max_dirty_pages_pct = 0;" &> /dev/null
      mysql -u root -e "SET GLOBAL innodb_change_buffering = 'none';" &> /dev/null
      mysql -u root -e "SET GLOBAL innodb_buffer_pool_dump_at_shutdown = 1;" &> /dev/null
      mysql -u root -e "SET GLOBAL innodb_io_capacity = 2000;" &> /dev/null
      mysql -u root -e "SET GLOBAL innodb_io_capacity_max = 4000;" &> /dev/null
      mysql -u root -e "SET GLOBAL innodb_buffer_pool_dump_pct = 100;" &> /dev/null
      mysql -u root -e "SET GLOBAL innodb_buffer_pool_dump_now = ON;" &> /dev/null
      msg "Stopping MySQLD now..." >> ${logAch}
      service mysql stop &> /dev/null
      wait
      msg "MySQLD stopped" >> ${logAch}
    else
      msg "MySQLD already stopped" >> ${logAch}
    fi
  fi
  msg "Faster reboot done" >> ${logAch}
}

if [ ! -e "/root/.run-to-chimaera.cnf" ] \
  || [ ! -e "${barCnf}" ]; then
  exit 1
fi

_CHECK_SYS=$(lsb_release -sc 2>&1)
if [ -e "/root/.auto-upgraded-to-chimaera.cnf" ] \
  && [ "${_CHECK_SYS}" = "chimaera" ]; then
  exit 1
fi

check_sql_running() {
  while [ -z "${_IS_MYSQLD_RUNNING}" ] \
    || [ ! -e "/var/run/mysqld/mysqld.sock" ]; do
    _IS_MYSQLD_RUNNING=$(ps aux | grep '[m]ysqld' | awk '{print $2}' 2>&1)
    msg "INFO: Waiting for MySQLD availability..." >> ${logAch}
    sleep 3
  done
}
###check_sql_running

_DB_SERIES=5.7
_DB_SERVER_TEST=$(mysql -V 2>&1)
if [[ ! "${_DB_SERVER_TEST}" =~ "Distrib ${_DB_SERIES}." ]]; then
  msg "Not supported DB server detected ${_DB_SERVER_TEST}" >> ${logAch}
  exit 1
fi

if [ -e "/root/.run-to-chimaera.cnf" ]; then
  echo " " >> ${logAch}
  if [ -e "/root/.run-auto-major-os-reboot-one.cnf" ] \
    || [ -e "/root/.run-auto-major-os-reboot-two.cnf" ]; then
    msg "Waiting 99 seconds for the system start scripts to finish" >> ${logAch}
    sleep 99
  else
    msg "Automatic BOA System Major Upgrade Tool welcomes you aboard!" >> ${logAch}
    sleep 3
  fi
fi

_AUTO_CHIMAERA_TEST=$(grep _AUTO_CHIMAERA ${barCnf} 2>&1)
if [[ ! "${_AUTO_CHIMAERA_TEST}" =~ "_AUTO_CHIMAERA" ]]; then
  echo "_AUTO_CHIMAERA=YES" >> ${barCnf}
fi

if [ -e "/root/.run-to-chimaera.cnf" ] \
  && [ ! -e "/root/.run-auto-major-os-reboot-one.cnf" ] \
  && [ ! -e "/root/.run-auto-major-os-reboot-two.cnf" ]; then
  echo " " >> ${logAch}
  msg "Running barracuda php-idle disable to speed up upgrades" >> ${logAch}
  barracuda php-idle disable >> ${logAch}
  wait
  msg "The barracuda php-idle disable completed" >> ${logAch}
  msg "Launching standard barracuda up-${tRee} system now" >> ${logAch}
  barracuda up-${tRee} system >> ${logAch}
  wait
  msg "The standard barracuda up-${tRee} system completed" >> ${logAch}
  if [ -e "/root/.latest-barracuda-upgrade-finale.info" ]; then
    _THIS_OS=$(lsb_release -si 2>&1)
    _THIS_SYS=$(lsb_release -sc 2>&1)
    if [ -e "/root/.beowulf_to_chimaera_major_os_upgrade.info" ] \
      || [ -e "/root/.bullseye_to_chimaera_major_os_upgrade.info" ]; then
      _REAL_OS="Devuan"
      _REAL_OSR="chimaera"
    else
      _REAL_OS="${_THIS_OS}"
      _REAL_OSR="${_THIS_SYS}"
    fi
    if [ "${_REAL_OSR}" = "jessie" ]; then
      echo "_JESSIE_TO_BEOWULF=YES" >> ${barCnf}
      msg "Launching major upgrade from ${_REAL_OS}/${_REAL_OSR} to Devuan/beowulf" >> ${logAch}
    elif [ "${_REAL_OSR}" = "stretch" ]; then
      echo "_STRETCH_TO_BEOWULF=YES" >> ${barCnf}
      msg "Launching major upgrade from ${_REAL_OS}/${_REAL_OSR} to Devuan/beowulf" >> ${logAch}
    elif [ "${_REAL_OSR}" = "buster" ]; then
      echo "_BUSTER_TO_BEOWULF=YES" >> ${barCnf}
      msg "Launching major upgrade from ${_REAL_OS}/${_REAL_OSR} to Devuan/beowulf" >> ${logAch}
    elif [ "${_REAL_OSR}" = "bullseye" ]; then
      echo "_BULLSEYE_TO_CHIMAERA=YES" >> ${barCnf}
      msg "Launching major upgrade from ${_REAL_OS}/${_REAL_OSR} to Devuan/chimaera" >> ${logAch}
    elif [ "${_REAL_OSR}" = "beowulf" ]; then
      echo "_BEOWULF_TO_CHIMAERA=YES" >> ${barCnf}
      msg "Launching major upgrade from ${_REAL_OS}/${_REAL_OSR} to Devuan/chimaera" >> ${logAch}
    fi
    msg "The first stage of major OS upgrade will start now" >> ${logAch}
    barracuda up-${tRee} system >> ${logAch}
    wait
    if [ -e "/root/.run_post_major_os_upgrade.info" ]; then
      msg "The first stage of major OS upgrade completed" >> ${logAch}
      msg "The system will reboot now" >> ${logAch}
      rm -f /root/.latest-barracuda-upgrade-finale.info
      touch /root/.run-auto-major-os-reboot-one.cnf
      update-grub >> ${logAch}
      faster_reboot
      reboot
      exit 0
    fi
  fi
fi

if [ -e "/root/.run-to-chimaera.cnf" ] \
  && [ -e "/root/.run-auto-major-os-reboot-one.cnf" ] \
  && [ ! -e "/root/.run-auto-major-os-reboot-two.cnf" ]; then
  echo " " >> ${logAch}
  msg "Launching post-reboot barracuda up-${tRee} system" >> ${logAch}
  msg "to complete the first stage of major OS upgrade" >> ${logAch}
  barracuda up-${tRee} system >> ${logAch}
  wait
  msg "The post-reboot barracuda up-${tRee} system completed" >> ${logAch}
  echo " " >> ${logAch}
  _THIS_OS=$(lsb_release -si 2>&1)
  _THIS_SYS=$(lsb_release -sc 2>&1)
  if [ -e "/root/.beowulf_to_chimaera_major_os_upgrade.info" ] \
    || [ -e "/root/.bullseye_to_chimaera_major_os_upgrade.info" ]; then
    _REAL_OS="Devuan"
    _REAL_OSR="chimaera"
    _FURTHER_UPGRADE=NO
  else
    _REAL_OS="${_THIS_OS}"
    _REAL_OSR="${_THIS_SYS}"
    _FURTHER_UPGRADE=YES
  fi
  if [ "${_FURTHER_UPGRADE}" = "NO" ]; then
    if [ -e "/root/.latest-barracuda-upgrade-finale.info" ]; then
      msg "The single stage major OS upgrade completed" >> ${logAch}
      msg "The system will reboot now for a final upgrade" >> ${logAch}
      rm -f /root/.latest-barracuda-upgrade-finale.info
      touch /root/.run-auto-major-os-reboot-two.cnf
      update-grub >> ${logAch}
      faster_reboot
      reboot
      exit 0
    fi
  fi
  if [ "${_REAL_OSR}" = "bullseye" ] && [ "${_FURTHER_UPGRADE}" = "YES" ]; then
    echo "_BULLSEYE_TO_CHIMAERA=YES" >> ${barCnf}
    msg "Launching major upgrade from ${_REAL_OS}/${_REAL_OSR} to Devuan/chimaera" >> ${logAch}
  elif [ "${_REAL_OSR}" = "beowulf" ] && [ "${_FURTHER_UPGRADE}" = "YES" ]; then
    echo "_BEOWULF_TO_CHIMAERA=YES" >> ${barCnf}
    msg "Launching major upgrade from ${_REAL_OS}/${_REAL_OSR} to Devuan/chimaera" >> ${logAch}
  fi
  if [ "${_FURTHER_UPGRADE}" = "YES" ]; then
    msg "The second stage of major OS upgrade will start now" >> ${logAch}
    barracuda up-${tRee} system >> ${logAch}
    wait
    if [ -e "/root/.run_post_major_os_upgrade.info" ]; then
      msg "The second stage of major OS upgrade completed" >> ${logAch}
      msg "The system will reboot now" >> ${logAch}
      rm -f /root/.latest-barracuda-upgrade-finale.info
      touch /root/.run-auto-major-os-reboot-two.cnf
      update-grub >> ${logAch}
      faster_reboot
      reboot
      exit 0
    fi
  fi
fi

if [ -e "/root/.run-to-chimaera.cnf" ] \
  && [ -e "/root/.run-auto-major-os-reboot-one.cnf" ] \
  && [ -e "/root/.run-auto-major-os-reboot-two.cnf" ]; then
  echo " " >> ${logAch}
  msg "Launching the final post-second-reboot barracuda up-${tRee} system" >> ${logAch}
  barracuda up-${tRee} system >> ${logAch}
  wait
  [ -e "/root/.run-to-chimaera.cnf" ] && rm -f /root/.run-to-chimaera.cnf
  [ -e "/root/.run-auto-major-os-reboot-one.cnf" ] && rm -f /root/.run-auto-major-os-reboot-one.cnf
  [ -e "/root/.run-auto-major-os-reboot-two.cnf" ] && rm -f /root/.run-auto-major-os-reboot-two.cnf
  touch /root/.auto-upgraded-to-chimaera.cnf
  sed -i "s/^_AUTO_CHIMAERA.*//g" /root/.barracuda.cnf
  msg "The final post-reboot barracuda up-${tRee} system completed" >> ${logAch}
  msg "That's all folks!" >> ${logAch}
  msg "Bye!" >> ${logAch}
  echo " " >> ${logAch}
fi

exit 0
