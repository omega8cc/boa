#!/bin/bash


###----------------------------------------###
###
###  Automatic BOA System AUTO-INIT Tool
###
###  Copyright (C) 2010-2024 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###  This program is free software. You can
###  redistribute it and/or modify it under
###  the terms of the GNU GPL as published by
###  the Free Software Foundation, version 2
###  or later.
###
###  This program is distributed in the hope
###  that it will be useful, but WITHOUT ANY
###  WARRANTY; without even the implied
###  warranty of MERCHANTABILITY or FITNESS
###  FOR A PARTICULAR PURPOSE. See the GNU GPL
###  for more details.
###
###  You should have received a copy of the
###  GNU GPL along with this program.
###  If not, see http://www.gnu.org/licenses/
###
###  Code: https://github.com/omega8cc/boa
###
###----------------------------------------###


###----------------------------------------###
### How To: Launch AUTO-INIT properly      ###
###----------------------------------------###
###
###  Use clean minimal Debian OS based VPS.
###
###  Initialise the system before installing
###  BOA to remove systemd and quickly
###  upgrade to latest Devuan OS version.
###
###   $ wget -qO- http://files.aegir.cc/BOA.sh.txt | bash
###   $ autoinit
###
###  Once started, the autoinit will launch
###  a series of upgrades and reboots until
###  you get a basic latest system installed
###  to be able to run standard BOA install.
###
###  The script logs its actions in the files
###  you can examine later:
###
###   $ cat /root/.autoinit.log
###
###  There's also a very verbose extra log:
###
###   $ cat /root/.autoinit-verbose.log
###
###----------------------------------------###


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###

export HOME=/root
export SHELL=/bin/bash
export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin
export _tRee=dev

_initFile="/root/.init-to-devuan-ctrl.cnf"
_barCnf="/root/.barracuda.cnf"
_logInt="/root/.autoinit.log"
_logSlt="/root/.autoinit-verbose.log"

###
### Avoid too many questions
###
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi

_INITINS="/usr/bin/apt-get -y --allow-unauthenticated install"
_dstUpArg="-fuy --allow-unauthenticated -q --config-file /opt/apt/apt.conf.noi.dist"
_nrmUpArg="-fuy --allow-unauthenticated -q --config-file /opt/apt/apt.conf.noi.nrml"

_check_root() {
  if [ `whoami` = "root" ]; then
    [ -e "/var/lib/man-db/auto-update" ] && rm -f /var/lib/man-db/auto-update
  else
    echo "ERROR: This script should be run as a root user"
    exit 1
  fi
  _DF_TEST=$(df -kTh / -l \
    | grep '/' \
    | sed 's/\%//g' \
    | awk '{print $6}' >> "${_logSlt}")
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "${_DF_TEST}" ] && [ "${_DF_TEST}" -gt "90" ]; then
    echo "ERROR: Your disk space is almost full !!! ${_DF_TEST}/100"
    echo "ERROR: We can not proceed until it is below 90/100"
    exit 1
  fi
}
_check_root
cd /root/

###
### Noticeable messages
###
_msg() {
  echo "AutoInit v.${_tRee} [$(date +%T 2>&1)] ==> $*"
}

_check_manufacturer_compatibility() {
  # Install dmidecode of not present
  if ! command -v dmidecode &> /dev/null; then
    /usr/bin/apt-get update &> /dev/null
    ${_INITINS} dmidecode &> /dev/null
  fi
  # Check if dmidecode is available
  _DMI_TEST=$(which dmidecode 2>&1)
  if [ -x "${_DMI_TEST}" ]; then
    _HOST_INFO=$(dmidecode -s system-manufacturer 2>&1)
  else
    _HOST_INFO="Unknown, dmidecode not available"
  fi
  # Check for Amazon EC2 in the system manufacturer field
  if dmidecode -s system-manufacturer | grep -i 'Amazon EC2' &> /dev/null; then
    _VMFAMILY="AWS"
    _msg "Not supported environment detected: ${_HOST_INFO}" >> "${_logInt}"
    _msg "Please check https://bit.ly/boa-caveats" >> "${_logInt}"
    _msg "Bye!" >> "${_logInt}"
    echo "Not supported environment detected: ${_HOST_INFO}"
    echo "Please check https://bit.ly/boa-caveats"
    echo "Bye!"
    exit 1
  elif [[ "${_HOST_INFO}" =~ "Unknown" ]] || [ -z "${_HOST_INFO}" ]; then
    _msg "Mysterious environment: ${_HOST_INFO}" >> "${_logInt}"
    _msg "Please check https://bit.ly/boa-caveats" >> "${_logInt}"
    _msg "Bye!" >> "${_logInt}"
    echo "Mysterious environment: ${_HOST_INFO}"
    echo "Please check https://bit.ly/boa-caveats"
    echo "Bye!"
    exit 1
  fi
}
_check_manufacturer_compatibility

if [ "${_tRee}" = "dev" ]; then
  touch /root/.debug-boa-installer.cnf
  touch /root/.debug-octopus-installer.cnf
fi

if [ -e "/var/aegir" ]; then
  echo
  echo "ERROR: This script can not be used once BOA is installed"
  echo
  exit 1
fi

_locales_check_fix_early() {
  _isLoc=$(which locale 2>&1)
  if [ ! -x "${_isLoc}" ] || [ -z "${_isLoc}" ]; then
    _INITINS="/usr/bin/apt-get -y --allow-unauthenticated install"
    apt-get update -qq &> /dev/null
    ${_INITINS} locales locales-all &> /dev/null
  fi
  _LOC_TEST=$(locale 2>&1)
  if [[ "${_LOC_TEST}" =~ LANG=.*UTF-8 ]]; then
    _LOCALE_TEST=OK
  fi
  if [[ "${_LOC_TEST}" =~ "Cannot" ]]; then
    _LOCALE_TEST=BROKEN
  fi
  if [ "${_LOCALE_TEST}" = "BROKEN" ]; then
    _LOCALE_GEN_TEST=$(grep -v "^#" /etc/locale.gen 2>&1)
    if [[ ! "${_LOCALE_GEN_TEST}" =~ "en_US.UTF-8 UTF-8" ]]; then
      echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
    fi
    sed -i "/^$/d" /etc/locale.gen
    locale-gen &> /dev/null
    locale-gen en_US.UTF-8 &> /dev/null
    # Explicitly enforce all locale settings
    update-locale \
      LANG=en_US.UTF-8 \
      LC_CTYPE=en_US.UTF-8 \
      LC_COLLATE=POSIX \
      LC_NUMERIC=POSIX \
      LC_TIME=en_US.UTF-8 \
      LC_MONETARY=en_US.UTF-8 \
      LC_MESSAGES=en_US.UTF-8 \
      LC_PAPER=en_US.UTF-8 \
      LC_NAME=en_US.UTF-8 \
      LC_ADDRESS=en_US.UTF-8 \
      LC_TELEPHONE=en_US.UTF-8 \
      LC_MEASUREMENT=en_US.UTF-8 \
      LC_IDENTIFICATION=en_US.UTF-8 \
      LC_ALL= &> /dev/null
    # Define all locale settings on the fly to prevent unnecessary
    # warnings during installation of packages.
    export LANG=en_US.UTF-8 &> /dev/null
    export LC_CTYPE=en_US.UTF-8 &> /dev/null
    export LC_COLLATE=POSIX &> /dev/null
    export LC_NUMERIC=POSIX &> /dev/null
    export LC_TIME=en_US.UTF-8 &> /dev/null
    export LC_MONETARY=en_US.UTF-8 &> /dev/null
    export LC_MESSAGES=en_US.UTF-8 &> /dev/null
    export LC_PAPER=en_US.UTF-8 &> /dev/null
    export LC_NAME=en_US.UTF-8 &> /dev/null
    export LC_ADDRESS=en_US.UTF-8 &> /dev/null
    export LC_TELEPHONE=en_US.UTF-8 &> /dev/null
    export LC_MEASUREMENT=en_US.UTF-8 &> /dev/null
    export LC_IDENTIFICATION=en_US.UTF-8 &> /dev/null
    export LC_ALL= &> /dev/null
  else
    _LOCALE_GEN_TEST=$(grep -v "^#" /etc/locale.gen 2>&1)
    if [[ ! "${_LOCALE_GEN_TEST}" =~ "en_US.UTF-8 UTF-8" ]]; then
      echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
    fi
    sed -i "/^$/d" /etc/locale.gen
    locale-gen &> /dev/null
    locale-gen en_US.UTF-8 &> /dev/null
    # Explicitly enforce locale settings required for consistency
    update-locale \
      LANG=en_US.UTF-8 \
      LC_CTYPE=en_US.UTF-8 \
      LC_COLLATE=POSIX \
      LC_NUMERIC=POSIX \
      LC_ALL= &> /dev/null
    # Define locale settings required for consistency also on the fly
    export LC_COLLATE=POSIX &> /dev/null
    export LC_NUMERIC=POSIX &> /dev/null
    export LC_ALL= &> /dev/null
  fi
  _LOCALES_BASHRC_TEST=$(grep LC_COLLATE /root/.bashrc 2>&1)
  if [[ ! "${_LOCALES_BASHRC_TEST}" =~ "LC_COLLATE" ]]; then
    printf "\n" >> /root/.bashrc
    echo "export LANG=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_CTYPE=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_COLLATE=POSIX" >> /root/.bashrc
    echo "export LC_NUMERIC=POSIX" >> /root/.bashrc
    echo "export LC_TIME=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_MONETARY=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_MESSAGES=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_PAPER=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_NAME=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_ADDRESS=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_TELEPHONE=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_MEASUREMENT=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_IDENTIFICATION=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_ALL=" >> /root/.bashrc
    printf "\n" >> /root/.bashrc
  fi
}
_locales_check_fix_early

_cron_check_install_early() {
  _isCrn=$(which cron 2>&1)
  if [ ! -x "${_isCrn}" ] || [ -z "${_isCrn}" ]; then
    _INITINS="/usr/bin/apt-get -y --allow-unauthenticated install"
    apt-get update -qq &> /dev/null
    ${_INITINS} cron &> /dev/null
  fi
}
_cron_check_install_early

if [ -e "/run/autoinit.pid" ]; then
  echo " " >> "${_logSlt}"
  _msg "The /run/autoinit.pid is blocking this run..." >> "${_logSlt}"
  echo " " >> "${_logSlt}"
  exit 1
fi

_if_launch_boa_install() {
  _BOA_LOGFILE="/root/.boa.install.command.cnf"
  if [[ -s "${_BOA_LOGFILE}" ]]; then
    _BOA_COMMAND=$(cat "${_BOA_LOGFILE}")
    if [[ "${_BOA_COMMAND}" =~ " silent" ]] \
      || [[ "${_BOA_COMMAND}" =~ " system" ]]; then
      _BOA_INSTALL_COMMAND="${_BOA_COMMAND}"
    else
      _BOA_INSTALL_COMMAND="${_BOA_COMMAND} silent"
    fi
    if [[ "${_BOA_COMMAND}" =~ "boa in-lts" ]] \
      || [[ "${_BOA_COMMAND}" =~ "boa in-dev" ]]; then
      _msg "Time for ${_BOA_INSTALL_COMMAND}" >> "${_logInt}"
      eval "${_BOA_INSTALL_COMMAND}"
      wait
      mv -f ${_BOA_LOGFILE} /var/backups/
    fi
  fi
}

_disable_apparmor_utils() {
  if [ -e "/etc/apparmor.d" ] && [ -e "/var/cache/apparmor" ]; then
    rm -rf /var/cache/apparmor/* >> "${_logSlt}"
    apparmor_parser -r /etc/apparmor.d/* >> "${_logSlt}"
    aa-complain /etc/apparmor.d/* >> "${_logSlt}"
  fi
  if [ -x "/etc/init.d/apparmor" ]; then
    service apparmor stop >> "${_logSlt}"
    update-rc.d -f apparmor remove >> "${_logSlt}"
    service auditd stop >> "${_logSlt}"
    update-rc.d -f auditd remove >> "${_logSlt}"
  fi
  if [ -x "/usr/sbin/aa-teardown" ]; then
    aa-teardown >> "${_logSlt}"
  fi
  [ ! -e "/root/.disable.apparmor.cnf" ] && touch /root/.disable.apparmor.cnf
}

_install_apparmor_utils() {
  _isAppArmorRevFile="/sys/kernel/security/apparmor/revision"
  _isAppArmorGrubFile="/etc/default/grub.d/apparmor.cfg"
  _isAppArmorComplain=$(which aa-complain 2>&1)
  _isAppArmorStatus=$(which aa-status 2>&1)
  _isAppArmorGrub=NO
  if [ -e "${_isAppArmorGrubFile}" ]; then
    _GRUB_APPARMOR_TEST=$(grep "apparmor=1 security=apparmor" ${_isAppArmorGrubFile} 2>&1)
    if [[ "${_GRUB_APPARMOR_TEST}" =~ "apparmor=1 security=apparmor" ]]; then
      _isAppArmorGrub=YES
    fi
  fi
  if [ ! -e "${_isAppArmorRevFile}" ] \
    || [ ! -e "${_isAppArmorGrubFile}" ] \
    || [ -z "${_isAppArmorComplain}" ] \
    || [ -z "${_isAppArmorStatus}" ] \
    || [ "${_isAppArmorGrub}" = "NO" ]; then
    _msg "Installing AppArmor Tools early..." >> "${_logInt}"
    echo " " >> "${_logInt}"
    /usr/bin/apt-get install auditd \
      apparmor \
      apparmor-utils \
      apparmor-notify \
      apparmor-profiles -y -qq >> "${_logSlt}"
    mkdir -p /etc/default/grub.d
    echo 'GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT apparmor=1 security=apparmor"' \
      | tee ${_isAppArmorGrubFile} &> /dev/null
    update-grub >> "${_logSlt}"
  fi
  _isAppArmOn=N
  if [ -e "/sys/module/apparmor/parameters/enabled" ]; then
    _isAppArmOn=$(cat /sys/module/apparmor/parameters/enabled 2>&1)
    _isAppArmOn=$(echo -n ${_isAppArmOn} | tr -d "\n" 2>&1)
  fi
  if [ "${_isAppArmOn}" = "Y" ]; then
    _disable_apparmor_utils
  fi
}

_ifnames_grub_check_sync() {
  _IS_IFACE=$(ip a 2>&1)
  _ADD_GRUB_CMD=""
  _GRUB_FILE="/etc/default/grub"

  if [ -e "${_GRUB_FILE}" ]; then
    if echo "${_IS_IFACE}" | grep -qE "eth[0-9]+"; then
      _USE_IFNAMES="CLASSIC"
      _msg "GRUB: Classic ethX interface naming found." >> "${_logInt}"
    elif echo "${_IS_IFACE}" | grep -qE "(ens|enp|eno|wlp|wlo)[0-9]+:"; then
      _USE_IFNAMES="PREDICTABLE"
      _msg "GRUB: Predictable (ensX, enpX, enoX, wlpX, wloX) interface naming found." >> "${_logInt}"
    else
      _USE_IFNAMES="DONTMODIFY"
      _msg "GRUB: config exists, but no recognized network interface naming found." >> "${_logInt}"
    fi

    # Extract the current GRUB_CMDLINE_LINUX line
    _GRUB_CMDLINE_LINUX=$(grep -E "^GRUB_CMDLINE_LINUX=" "${_GRUB_FILE}")
    _msg "GRUB: Current config is ${_GRUB_CMDLINE_LINUX}" >> "${_logInt}"

    # Initialize variables to check for existing options
    _SYS_NET_IFNAMES=$(echo "${_GRUB_CMDLINE_LINUX}" | grep -o "net.ifnames=[01]")
    _SYS_BIOSDEVNAME=$(echo "${_GRUB_CMDLINE_LINUX}" | grep -o "biosdevname=[01]")
    _SYS_MEMHP_STATE=$(echo "${_GRUB_CMDLINE_LINUX}" | grep -o "memhp_default_state=online")

    # Function to append option to _ADD_GRUB_CMD if not already present
    _append_grub_cmd_option() {
      local _option="$1"
      if [[ -z "${_ADD_GRUB_CMD}" ]]; then
        _ADD_GRUB_CMD="${_option}"
      else
        _ADD_GRUB_CMD="${_ADD_GRUB_CMD} ${_option}"
      fi
    }

    # Check and append options as necessary
    if [[ -z "${_SYS_MEMHP_STATE}" ]]; then
      _append_grub_cmd_option "memhp_default_state=online"
    fi

    if [[ "${_USE_IFNAMES}" == "CLASSIC" ]]; then
      if [[ "${_SYS_NET_IFNAMES}" != "net.ifnames=0" ]]; then
        _append_grub_cmd_option "net.ifnames=0"
      fi
      if [[ "${_SYS_BIOSDEVNAME}" != "biosdevname=0" ]]; then
        _append_grub_cmd_option "biosdevname=0"
      fi
    elif [[ "${_USE_IFNAMES}" == "PREDICTABLE" ]]; then
      if [[ "${_SYS_NET_IFNAMES}" != "net.ifnames=1" ]]; then
        _append_grub_cmd_option "net.ifnames=1"
      fi
      if [[ "${_SYS_BIOSDEVNAME}" != "biosdevname=1" ]]; then
        _append_grub_cmd_option "biosdevname=1"
      fi
    fi

    if [ -e "/root/.auto.config.ifnames.grub.cnf" ] && [ ! -e "/root/.ignore.ifnames.cnf" ]; then
      _NEW_GRUB=LIVE
    else
      _NEW_GRUB=DEMO
    fi

    if [[ -n "${_ADD_GRUB_CMD}" ]]; then
      # Backup the GRUB file
      cp "${_GRUB_FILE}" "${_GRUB_FILE}.bak"

      # Remove existing options from GRUB_CMDLINE_LINUX
      _NEW_GRUB_CMDLINE_LINUX=$(echo "${_GRUB_CMDLINE_LINUX}" | sed -E "s/(net.ifnames=[01]|biosdevname=[01]|memhp_default_state=online)//g")

      # Clean up extra spaces and trailing spaces before the closing quote
      _NEW_GRUB_CMDLINE_LINUX=$(echo "${_NEW_GRUB_CMDLINE_LINUX}" | tr -s ' ' | sed -E 's/\s*"$/"/')

      # Extract current kernel parameters
      _CURRENT_CMDLINE=$(echo "${_NEW_GRUB_CMDLINE_LINUX}" | sed -E 's/^GRUB_CMDLINE_LINUX="(.*)"$/\1/')

      # Append new options
      _UPDATED_CMDLINE="${_CURRENT_CMDLINE} ${_ADD_GRUB_CMD}"
      _UPDATED_CMDLINE=$(echo "${_UPDATED_CMDLINE}" | sed 's/^ *//;s/ *$//')

      # Form the new GRUB_CMDLINE_LINUX line
      _NEW_GRUB_CMDLINE_LINUX="GRUB_CMDLINE_LINUX=\"${_UPDATED_CMDLINE}\""

      echo " " >> "${_logInt}"
      if [[ "${_NEW_GRUB}" == "LIVE" ]]; then
        # Update the GRUB file
        _msg "GRUB: Update in the LIVE MODE" >> "${_logInt}"
        sed -i "s|^GRUB_CMDLINE_LINUX=.*|${_NEW_GRUB_CMDLINE_LINUX}|" "${_GRUB_FILE}"
        _msg "GRUB_CMDLINE_LINUX has been updated with ${_UPDATED_CMDLINE}" >> "${_logInt}"
      elif [[ "${_NEW_GRUB}" == "DEMO" ]]; then
        # Demo info
        _msg "GRUB: Update in the DEMO MODE" >> "${_logInt}"
        _msg "GRUB_CMDLINE_LINUX would be updated with ${_UPDATED_CMDLINE}" >> "${_logInt}"
        echo " " >> "${_logInt}"
        _msg "GRUB: Update in the LIVE MODE needs presence of control file:" >> "${_logInt}"
        _msg "GRUB   /root/.auto.config.ifnames.grub.cnf" >> "${_logInt}"
        echo " " >> "${_logInt}"
        _msg "GRUB: Ensure that the file /root/.ignore.ifnames.cnf does not exist." >> "${_logInt}"
        _msg "GRUB: This requirement serves as a double-check to confirm" >> "${_logInt}"
        _msg "GRUB: that you are aware of and agree to auto-update GRUB configuration." >> "${_logInt}"
        _msg "GRUB: Incorrect GRUB settings can render your virtual machine unbootable" >> "${_logInt}"
        _msg "GRUB: necessitating a rescue operation using a CD-ROM or ISO image." >> "${_logInt}"
        _msg "GRUB: For this reason, running BOA directly on physical hardware (bare metal) is not supported" >> "${_logInt}"
        echo " " >> "${_logInt}"
        _msg "GRUB: NEVER USE LIVE MODE IF YOU ARE NOT SURE IF YOU NEED IT" >> "${_logInt}"
      fi
      echo " " >> "${_logInt}"
    fi
  else
    _msg "GRUB config does not exist." >> "${_logInt}"
  fi
}

_init_pre() {
  if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
    && [ -e "/etc/apt/apt.conf.d" ]; then
    echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
  fi
  if [ ! -e "/opt/apt/apt.conf.noi.dist" ] \
    || [ ! -e "/opt/apt/apt.conf.noi.nrml" ]; then
    mkdir -p /opt/apt
    echo "APT::Get::Assume-Yes \"true\";" > /opt/apt/apt.conf.noi.dist
    echo "APT::Get::Show-Upgraded \"true\";" >> /opt/apt/apt.conf.noi.dist
    echo "APT::Get::Install-Recommends \"false\";" >> /opt/apt/apt.conf.noi.dist
    echo "APT::Get::Install-Suggests \"false\";" >> /opt/apt/apt.conf.noi.dist
    echo "APT::Quiet \"true\";" >> /opt/apt/apt.conf.noi.dist
    echo "DPkg::Options {\"--force-confnew\";\"--force-confmiss\";};" >> /opt/apt/apt.conf.noi.dist
    echo "DPkg::Pre-Install-Pkgs {\"/usr/sbin/dpkg-preconfigure --apt\";};" >> /opt/apt/apt.conf.noi.dist
    echo "Dir::Etc::SourceList \"/etc/apt/sources.list\";" >> /opt/apt/apt.conf.noi.dist
    echo "APT::Get::Assume-Yes \"true\";" > /opt/apt/apt.conf.noi.nrml
    echo "APT::Get::Show-Upgraded \"true\";" >> /opt/apt/apt.conf.noi.nrml
    echo "APT::Get::Install-Recommends \"false\";" >> /opt/apt/apt.conf.noi.nrml
    echo "APT::Get::Install-Suggests \"false\";" >> /opt/apt/apt.conf.noi.nrml
    echo "APT::Quiet \"true\";" >> /opt/apt/apt.conf.noi.nrml
    echo "DPkg::Options {\"--force-confdef\";\"--force-confmiss\";\"--force-confold\"};" >> /opt/apt/apt.conf.noi.nrml
    echo "DPkg::Pre-Install-Pkgs {\"/usr/sbin/dpkg-preconfigure --apt\";};" >> /opt/apt/apt.conf.noi.nrml
    echo "Dir::Etc::SourceList \"/etc/apt/sources.list\";" >> /opt/apt/apt.conf.noi.nrml
  fi

  _ifnames_grub_check_sync

  if [[ -n "${_ADD_GRUB_CMD}" ]] && [[ "${_NEW_GRUB}" == "LIVE" ]]; then
    echo "Running _init_pre procedure A..."
    touch /run/autoinit.pid
    update-grub >> "${_logSlt}"
    sed -i "s/.*autoinit.*//gi" /etc/crontab &> /dev/null
    echo "*/1 *   * * *   root    bash /opt/local/bin/autoinit" >> /etc/crontab
    if [ -x "/opt/local/bin/killer" ]; then
      sed -i "s/.*killer.*//gi" /etc/crontab &> /dev/null
      echo "*/1 *   * * *   root    bash /opt/local/bin/killer" >> /etc/crontab
    fi
    _msg "Time for reboot and next upgrade cycle..." >> "${_logInt}"
    echo " " >> "${_logInt}"
    rm -f /run/autoinit.pid
    reboot
    exit 0
  else
    if [ ! -x "/usr/bin/aptitude" ] || [ ! -x "/usr/bin/cc" ]; then
      echo "Running _init_pre procedure B..."
      touch /run/autoinit.pid
      /usr/bin/apt-get update >> "${_logSlt}"
      ${_INITINS} lsb-release >> "${_logSlt}"
      _OS_DIST=$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)
      _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
      _msg "We need to install some tools early..." >> "${_logInt}"
      /usr/bin/apt-get update >> "${_logSlt}"
      if [ "${_VMFAMILY}" != "AWS" ]; then
        _INITD_TEST=$(ls -la /etc/init.d/*cloud* 2>&1)
        if [[ ! "${_INITD_TEST}" =~ "No such file" ]] \
          || [ -e "/etc/cloud/cloud.cfg.d" ]; then
          /usr/bin/apt-get remove cloud-utils cloud-init -y --purge --auto-remove -qq >> "${_logSlt}"
          /usr/bin/apt-get remove cloud-image-utils cloud-guest-utils -y --purge --auto-remove -qq >> "${_logSlt}"
          /usr/bin/apt-get autoremove --purge -y >> "${_logSlt}"
          /usr/bin/apt-get autoclean -y >> "${_logSlt}"
          if [ -e "/etc/cloud/cloud.cfg.d" ]; then
            mv -f /etc/cloud /var/backups/
          fi
        fi
      fi
      ${_INITINS} cron >> "${_logSlt}"
      ${_INITINS} locales-all aptitude >> "${_logSlt}"
      ${_INITINS} build-essential curl git >> "${_logSlt}"
      ${_INITINS} libgd-dev libmagickwand-dev >> "${_logSlt}"
      sed -i "s/.*autoinit.*//gi" /etc/crontab &> /dev/null
      echo "*/1 *   * * *   root    bash /opt/local/bin/autoinit" >> /etc/crontab
      if [ -x "/opt/local/bin/killer" ]; then
        sed -i "s/.*killer.*//gi" /etc/crontab &> /dev/null
        echo "*/1 *   * * *   root    bash /opt/local/bin/killer" >> /etc/crontab
      fi
      _install_apparmor_utils
      touch ${_initFile}
      _msg "Time for reboot and next upgrade cycle..." >> "${_logInt}"
      echo " " >> "${_logInt}"
      rm -f /run/autoinit.pid
      reboot
      exit 0
    fi
  fi
}

_init_info() {
  echo "Running _init_pre procedure, please wait..."
  sleep 3
  echo "The system will reboot and continue several times..."
  sleep 3
  echo "until it is ugraded to latest Devuan/daedalus version."
  sleep 3
  echo "Once all upgrades are complete, you can run boa install"
  sleep 3
  echo "Let's go! It will take only ten minutes max!"
  sleep 3
  echo "..."
}

_init_offsystemd() {
  _OS_DIST=$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  _msg "Running _init_offsystemd procedure..." >> "${_logInt}"
  touch /run/autoinit.pid
  _msg "Launching a quick dist-upgrade..." >> "${_logInt}"
  if [ ! -e "/etc/apt/preferences.d/offsystemd" ]; then
    rm -f /etc/apt/preferences.d/systemd
    echo -e 'Package: systemd\nPin: release *\nPin-Priority: -1' > /etc/apt/preferences.d/offsystemd
    echo -e '\n\nPackage: *systemd*\nPin: release *\nPin-Priority: -1' >> /etc/apt/preferences.d/offsystemd
  fi
  /usr/bin/apt-get update -qq >> "${_logSlt}"
  /usr/bin/apt-get dist-upgrade ${_dstUpArg} >> "${_logSlt}"
  [ -e "/var/lib/man-db/auto-update" ] && rm -f /var/lib/man-db/auto-update
  /usr/bin/apt-get remove systemd -y --purge --auto-remove --allow-remove-essential -qq >> "${_logSlt}"
  /usr/bin/apt-get remove libnss-systemd -y --purge --auto-remove --allow-remove-essential -qq >> "${_logSlt}"
  /usr/bin/apt-get remove systemd-sysv -y --purge --auto-remove --allow-remove-essential -qq >> "${_logSlt}"
  /usr/bin/apt-get autoremove --purge -y -qq >> "${_logSlt}"
  /usr/bin/apt-get autoclean -y -qq >> "${_logSlt}"
  [ -e "/root/.top-daedalus.cnf" ] && /usr/bin/apt-get install base-files=12.4devuan3 -y --allow-downgrades >> "${_logSlt}"
  _OS_DIST=$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  _msg "Your system now runs on ${_OS_DIST}/${_OS_CODE}" >> "${_logInt}"
  if [ "${_OS_CODE}" = "daedalus" ]; then
    echo " " >> "${_logInt}"
    _msg "Time for reboot and then you can run boa install" >> "${_logInt}"
    rm -f /root/.init-to-devuan-ctrl.cnf
    sed -i "s/.*autoinit.*//gi" /etc/crontab &> /dev/null
    _if_launch_boa_install
  else
    _msg "Time for reboot and next upgrade cycle..." >> "${_logInt}"
  fi
  echo " " >> "${_logInt}"
  touch /root/.run-offsystemd-devuan-init.cnf
  rm -f /run/autoinit.pid
  reboot
  exit 0
}

_init_cycle() {
  _OS_DIST=$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  _msg "Running _init_cycle procedure..." >> "${_logInt}"
  touch /run/autoinit.pid
  _msg "Your current system is ${_OS_DIST}/${_OS_CODE}" >> "${_logInt}"
  echo " " >> "${_logInt}"
  _NEW_SYS=Devuan
  _OLD_SYS=Devuan
  if [ "${_OS_CODE}" = "bookworm" ]; then
    _NEW_OS_CODE=daedalus
    _OLD_SYS=Debian
    [ ! -e "/root/.top-daedalus.cnf" ] && touch /root/.top-daedalus.cnf
  elif [ "${_OS_CODE}" = "bullseye" ]; then
    _NEW_OS_CODE=chimaera
    _OLD_SYS=Debian
  elif [ "${_OS_CODE}" = "buster" ]; then
    _NEW_OS_CODE=beowulf
    _OLD_SYS=Debian
  elif [ "${_OS_CODE}" = "beowulf" ]; then
    _NEW_OS_CODE=chimaera
  elif [ "${_OS_CODE}" = "chimaera" ]; then
    _NEW_OS_CODE=daedalus
    [ ! -e "/root/.top-daedalus.cnf" ] && touch /root/.top-daedalus.cnf
  elif [ "${_OS_CODE}" = "daedalus" ]; then
    _NEW_OS_CODE=
    _NEW_SYS=
  else
    _msg "This procedure does not support ${_OS_DIST}/${_OS_CODE}" >> "${_logInt}"
    _msg "Bye!" >> "${_logInt}"
    echo " " >> "${_logInt}"
    exit 1
  fi
  if [ "${_OLD_SYS}" = "Devuan" ]; then
    /usr/bin/apt-get update -qq >> "${_logSlt}"
    /usr/bin/apt-get upgrade ${_nrmUpArg} >> "${_logSlt}"
  fi
  if [ ! -z "${_NEW_OS_CODE}" ] && [ ! -z "${_NEW_SYS}" ]; then
    _msg "Launching a quick upgrade to ${_NEW_SYS}/${_NEW_OS_CODE}" >> "${_logInt}"
    _aptLiSys="/etc/apt/sources.list"
    _TGT_MRR="deb.devuan.org/merged"
    echo "## DEVUAN MAIN REPOSITORIES" > ${_aptLiSys}
    echo "deb http://${_TGT_MRR} ${_NEW_OS_CODE} main" >> ${_aptLiSys}
    echo "deb-src http://${_TGT_MRR} ${_NEW_OS_CODE} main" >> ${_aptLiSys}
    echo "" >> ${_aptLiSys}
    echo "## MAJOR BUG FIX UPDATES produced after the final release" >> ${_aptLiSys}
    echo "deb http://${_TGT_MRR} ${_NEW_OS_CODE}-updates main" >> ${_aptLiSys}
    echo "deb-src http://${_TGT_MRR} ${_NEW_OS_CODE}-updates main" >> ${_aptLiSys}
    echo "" >> ${_aptLiSys}
    echo "## DEVUAN SECURITY UPDATES" >> ${_aptLiSys}
    echo "deb http://${_TGT_MRR} ${_NEW_OS_CODE}-security main" >> ${_aptLiSys}
    echo "deb-src http://${_TGT_MRR} ${_NEW_OS_CODE}-security main" >> ${_aptLiSys}
    if [ -e "/etc/apt/apt.conf" ]; then
      rm -f /etc/apt/apt.conf
    fi
    if [ "${_OLD_SYS}" = "Debian" ]; then
      /usr/bin/apt-get update --allow-insecure-repositories -qq >> "${_logSlt}"
      /usr/bin/apt-get install devuan-keyring -y --allow-unauthenticated -qq >> "${_logSlt}"
    fi
    /usr/bin/apt-get update -qq >> "${_logSlt}"
    /usr/bin/apt-get upgrade ${_dstUpArg} >> "${_logSlt}"
    if [ "${_OLD_SYS}" = "Debian" ]; then
      /usr/bin/apt-get install eudev sysvinit-core -y -qq >> "${_logSlt}"
      /usr/bin/apt-get -f install -y -qq >> "${_logSlt}"
    else
      /usr/bin/apt-get dist-upgrade ${_dstUpArg} >> "${_logSlt}"
      [ -e "/var/lib/man-db/auto-update" ] && rm -f /var/lib/man-db/auto-update
      /usr/bin/apt-get -f install -y -qq >> "${_logSlt}"
      /usr/bin/apt-get dist-upgrade ${_dstUpArg} >> "${_logSlt}"
      [ -e "/var/lib/man-db/auto-update" ] && rm -f /var/lib/man-db/auto-update
      /usr/bin/apt-get autoremove --purge -y -qq >> "${_logSlt}"
      /usr/bin/apt-get autoclean -y -qq >> "${_logSlt}"
      [ -e "/root/.top-daedalus.cnf" ] && /usr/bin/apt-get install base-files=12.4devuan3 -y --allow-downgrades >> "${_logSlt}"
    fi
  fi
  _OS_DIST=$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  if [ "${_OLD_SYS}" = "Debian" ]; then
    _msg "Time for reboot and next upgrade cycle..." >> "${_logInt}"
    echo " " >> "${_logInt}"
    touch /root/.run-cycle-devuan-init.cnf
    rm -f /run/autoinit.pid
    reboot
    exit 0
  else
    if [ "${_OS_CODE}" = "daedalus" ]; then
      _msg "Your system now runs on ${_OS_DIST}/${_OS_CODE}" >> "${_logInt}"
      _msg "Time for the last reboot and then you can run boa install" >> "${_logInt}"
      rm -f /root/.init-to-devuan-ctrl.cnf
      sed -i "s/.*autoinit.*//gi" /etc/crontab &> /dev/null
      _if_launch_boa_install
    else
      _msg "Your system now runs on ${_OS_DIST}/${_OS_CODE}" >> "${_logInt}"
      _msg "Time for reboot and next upgrade cycle..." >> "${_logInt}"
    fi
    echo " " >> "${_logInt}"
    touch /root/.run-cycle-devuan-init.cnf
    touch /root/.run-cycle-${_OS_CODE}-init.cnf
    rm -f /run/autoinit.pid
    reboot
    exit 0
  fi
}

_init_conf() {
  if [ ! -e "${_initFile}" ]; then
    if [ ! -x "/usr/bin/cc" ]; then
      _init_info
    fi
    _init_pre &> /dev/null
  fi
}

_init_start() {
  _init_conf
  if [ -e "${_initFile}" ]; then
    if [ -e "/root/.run-cycle-devuan-init.cnf" ] \
      && [ ! -e "/root/.run-offsystemd-devuan-init.cnf" ]; then
      _init_offsystemd
    fi
    _init_cycle
  fi
}

_init_pre() {
  _OS_DIST=$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  touch /run/autoinit.pid
  if [ ! -e "/root/.autoinit.log" ]; then
    echo "Launching BOA System INIT on ${_OS_DIST}/${_OS_CODE}..."
    _msg "Launching BOA System INIT on ${_OS_DIST}/${_OS_CODE}..." >> "${_logInt}"
  fi
  sleep 15
  _init_start
}

if [ ! -e "/run/autoinit.pid" ]; then
  _init_pre
fi

exit 0
