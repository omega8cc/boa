#!/bin/bash


###----------------------------------------###
###
###  Automatic BOA System AUTO-INIT Tool
###
###  Copyright (C) 2010-2024 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###  This program is free software. You can
###  redistribute it and/or modify it under
###  the terms of the GNU GPL as published by
###  the Free Software Foundation, version 2
###  or later.
###
###  This program is distributed in the hope
###  that it will be useful, but WITHOUT ANY
###  WARRANTY; without even the implied
###  warranty of MERCHANTABILITY or FITNESS
###  FOR A PARTICULAR PURPOSE. See the GNU GPL
###  for more details.
###
###  You should have received a copy of the
###  GNU GPL along with this program.
###  If not, see http://www.gnu.org/licenses/
###
###  Code: https://github.com/omega8cc/boa
###
###----------------------------------------###


###----------------------------------------###
### HOW-TO: Launch AUTO-INIT properly      ###
###----------------------------------------###
###
###  Use clean minimal Debian OS based VPS.
###
###  Initialise the system before installing
###  BOA to either remove systemd and use
###  Debian or also quickly upgrade to the
###  compatible Devuan OS version.
###
###   $ wget http://files.aegir.cc/BOA.sh.txt
###   $ bash BOA.sh.txt
###   $ touch /root/.run-to-devuan-quick.cnf
###      OR
###   $ touch /root/.run-to-debian.cnf
###   $ autoinit
###
###  Once started, the autoinit will launch
###  a series of boa init/reboots until
###  you get a basic latest system installed
###  to be able to run standard BOA install.
###
###  The script may not start automatically
###  after the first reboot, so you need
###  to watch the log file after each reboot:
###
###   $ tail -f /root/.autoinit.log
###
###  If there is no progress, simply launch
###  the procedure again with:
###
###   $ autoinit
###
###----------------------------------------###


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###

HOME=/root
SHELL=/bin/bash
PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin

export PATH=${PATH}
export SHELL=${SHELL}
export HOME=${HOME}

barCnf="/root/.barracuda.cnf"
logInt="/root/.autoinit.log"

###
### Avoid too many questions
###
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi

tRee=dev
export tRee="${tRee}"

_TODAY=$(date +%y%m%d 2>&1)
_TODAY=${_TODAY//[^0-9]/}
_X_SE="520devT02"
_THIS_SYS=check
#

check_root() {
  if [ `whoami` = "root" ]; then
    ionice -c2 -n7 -p $$
    renice 19 -p $$
    chmod a+w /dev/null
    if [ ! -e "/dev/fd" ]; then
      if [ -e "/proc/self/fd" ]; then
        rm -rf /dev/fd
        ln -s /proc/self/fd /dev/fd
      fi
    fi
  else
    echo "ERROR: This script should be ran as a root user"
    exit 1
  fi
  _DF_TEST=$(df -kTh / -l \
    | grep '/' \
    | sed 's/\%//g' \
    | awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "${_DF_TEST}" ] && [ "${_DF_TEST}" -gt "90" ]; then
    echo "ERROR: Your disk space is almost full !!! ${_DF_TEST}/100"
    echo "ERROR: We can not proceed until it is below 90/100"
    exit 1
  fi
}
check_root
cd /root/

if [ -e "/var/aegir" ]; then
  echo
  echo "ERROR: This script can not be used once BOA is installed"
  echo
  exit 1
fi

###
### Noticeable messages
###
msg() {
  echo "AutoInit [$(date +%T 2>&1)] ==> $*"
}

until [ ! -e "/var/run/autoinit.pid" ]; do
  echo "Waiting until previous /var/run/autoinit.pid ends..."
  sleep 5
done

init_pre() {
  if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
    && [ -e "/etc/apt/apt.conf.d" ]; then
    echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
  fi
  _SYS_IFNAMES=$(grep GRUB_CMDLINE_LINUX= /etc/default/grub | grep "net.ifnames=0" 2>&1)
  if [ -e "/etc/default/grub" ] && [[ ! "${_SYS_IFNAMES}" =~ "net.ifnames=0" ]]; then
    touch /var/run/autoinit.pid
    echo "OOPS, we need to fix GRUB_CMDLINE_LINUX and reboot first"
    echo 'GRUB_CMDLINE_LINUX="net.ifnames=0 biosdevname=0"' >> /etc/default/grub
    grub-mkconfig -o /boot/grub/grub.cfg &> /dev/null
    wait
    echo "Waiting five seconds before reboot..."
    sleep 5
    echo "*/2 *   * * *   root    bash /opt/local/bin/autoinit" >> /etc/crontab
    rm -f /var/run/autoinit.pid
    reboot
    exit 0
  else
    if [ ! -x "/usr/bin/aptitude" ] || [ ! -x "/usr/bin/git" ]; then
      touch /var/run/autoinit.pid
      echo "We need to install some tools early..."
      /usr/bin/apt-get update &> /dev/null
      /usr/bin/apt-get install locales-all -fuy --allow-unauthenticated &> /dev/null
      /usr/bin/apt-get install aptitude -fuy --allow-unauthenticated &> /dev/null
      /usr/bin/apt-get install curl -fuy --allow-unauthenticated &> /dev/null
      /usr/bin/apt-get install git -fuy --allow-unauthenticated &> /dev/null
      /usr/bin/apt-get install git-core -fuy --allow-unauthenticated &> /dev/null
      /usr/bin/apt-get install git-man -fuy --allow-unauthenticated &> /dev/null
      rm -f /var/run/autoinit.pid
    fi
  fi
}
init_pre


init_run_four_quick() {
  echo " " >> ${logInt}
  msg "Launching a quick dist-upgrade to Devuan Daedalus" >> ${logInt}
  silentMode=verbose
  if [ "${silentMode}" = "verbose" ]; then
    /usr/bin/apt-get update
    /usr/bin/apt-get dist-upgrade -y
    /usr/bin/apt-get purge systemd libnss-systemd -y
    /usr/bin/apt-get autoremove --purge -y
    /usr/bin/apt-get autoclean -y
  else
    /usr/bin/apt-get update -qq 2> /dev/null
    /usr/bin/apt-get dist-upgrade -y -qq 2> /dev/null
    /usr/bin/apt-get purge systemd libnss-systemd -y -qq 2> /dev/null
    /usr/bin/apt-get autoremove --purge -y -qq 2> /dev/null
    /usr/bin/apt-get autoclean -y -qq 2> /dev/null
  fi
  _THIS_OS=$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)
  _OSR=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  msg "Your system now runs on ${_THIS_OS}/${_OSR}" >> ${logInt}
  msg "Please run standard boa install command" >> ${logInt}
  msg "Bye!" >> ${logInt}
  echo " " >> ${logInt}
  touch /root/.run-four-devuan-quick.cnf
  rm -f /root/.run-to-devuan.cnf
  rm -f /root/.run-to-devuan-quick.cnf
  sed -i "s/.*autoinit.*//gi" /etc/crontab &> /dev/null
  rm -f /var/run/autoinit.pid
}

init_run_three_quick() {
  echo " " >> ${logInt}
  _THIS_OS=$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)
  _OSR=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  if [ "${_OSR}" = "bookworm" ]; then
    _NEW_OSR=daedalus
  elif [ "${_OSR}" = "bullseye" ]; then
    _NEW_OSR=chimaera
  elif [ "${_OSR}" = "buster" ]; then
    _NEW_OSR=beowulf
  else
    msg "This procedure supports only Debian bookworm, bullseye and buster" >> ${logInt}
    msg "Bye!" >> ${logInt}
    echo " " >> ${logInt}
    exit 1
  fi
  msg "Launching a quick upgrade to Devuan/{_NEW_OSR}" >> ${logInt}
  echo " " >> ${logInt}
  aptLiSys="/etc/apt/sources.list"
  _TGT_MRR="deb.devuan.org/merged"
  echo "## DEVUAN MAIN REPOSITORIES" > ${aptLiSys}
  echo "deb http://${_TGT_MRR} ${_NEW_OSR} main" >> ${aptLiSys}
  echo "deb-src http://${_TGT_MRR} ${_NEW_OSR} main" >> ${aptLiSys}
  echo "" >> ${aptLiSys}
  echo "## MAJOR BUG FIX UPDATES produced after the final release" >> ${aptLiSys}
  echo "deb http://${_TGT_MRR} ${_NEW_OSR}-updates main" >> ${aptLiSys}
  echo "deb-src http://${_TGT_MRR} ${_NEW_OSR}-updates main" >> ${aptLiSys}
  echo "" >> ${aptLiSys}
  echo "## DEVUAN SECURITY UPDATES" >> ${aptLiSys}
  echo "deb http://${_TGT_MRR} ${_NEW_OSR}-security main" >> ${aptLiSys}
  echo "deb-src http://${_TGT_MRR} ${_NEW_OSR}-security main" >> ${aptLiSys}
  if [ -e "/etc/apt/apt.conf" ]; then
    sed -i "s/APT::Default-Release.*/APT::Default-Release \"${_NEW_OSR}\";/g" \
      /etc/apt/apt.conf &> /dev/null
      wait
  else
    echo "APT::Default-Release \"${_NEW_OSR}\";" > /etc/apt/apt.conf
  fi
  silentMode=verbose
  if [ "${silentMode}" = "verbose" ]; then
    /usr/bin/apt-get update --allow-insecure-repositories
    ### /usr/bin/apt-get update --allow-insecure-repositories --allow-releaseinfo-change?
    /usr/bin/apt-get -y --allow-unauthenticated install devuan-keyring
    /usr/bin/apt-get update
    /usr/bin/apt-get upgrade -y
    /usr/bin/apt-get install eudev sysvinit-core -y
    /usr/bin/apt-get -f install -y
  else
    /usr/bin/apt-get update --allow-insecure-repositories -qq 2> /dev/null
    /usr/bin/apt-get -y --allow-unauthenticated install devuan-keyring -qq 2> /dev/null
    /usr/bin/apt-get update -qq 2> /dev/null
    /usr/bin/apt-get upgrade -y -qq 2> /dev/null
    /usr/bin/apt-get install eudev sysvinit-core -y -qq 2> /dev/null
    /usr/bin/apt-get -f install -y -qq 2> /dev/null
  fi
  touch /root/.run-three-devuan-quick.cnf
  echo " " >> ${logInt}
  msg "Time for the third reboot..." >> ${logInt}
  echo " " >> ${logInt}
  sleep 5
  rm -f /var/run/autoinit.pid
  reboot
  exit 0
}

init_run_three() {
  if [ "${initArgs}" = "devuan" ]; then
    echo " " >> ${logInt}
    msg "Launching the third run of ${initRun}" >> ${logInt}
    /opt/local/bin/boa ${initRun} >> ${logInt}
    wait
    touch /root/.run-three-devuan.cnf
    rm -f /root/.run-to-devuan.cnf
    sed -i "s/.*autoinit.*//gi" /etc/crontab &> /dev/null
    echo "*/2 *   * * *   root    test -e /root/.run.devuan.os.upgrade.on.init.cnf && { bash /etc/init.d/clean-boa-env start; }" >> /etc/crontab
    rm -f /var/run/autoinit.pid
  elif [ "${initArgs}" = "debian" ]; then
    echo " " >> ${logInt}
    msg "Launching the third run of ${initRun}" >> ${logInt}
    /opt/local/bin/boa ${initRun} >> ${logInt}
    wait
    touch /root/.run-three-debian.cnf
    rm -f /root/.run-to-debian.cnf
    sed -i "s/.*autoinit.*//gi" /etc/crontab &> /dev/null
    rm -f /var/run/autoinit.pid
  fi
}

init_run_two() {
  if [ "${initArgs}" = "devuan" ]; then
    echo " " >> ${logInt}
    msg "Launching the second run of ${initRun}" >> ${logInt}
    /opt/local/bin/boa ${initRun} >> ${logInt}
    wait
    touch /root/.run-two-devuan.cnf
    echo " " >> ${logInt}
    msg "Time for the second reboot..." >> ${logInt}
    echo " " >> ${logInt}
    sleep 5
    rm -f /var/run/autoinit.pid
    if [ ! -e "/root/.run-to-devuan-quick.cnf" ]; then
      touch /root/.run.devuan.os.upgrade.on.init.cnf
    else
      rm -f /root/.run.devuan.os.upgrade.on.init.cnf
    fi
    reboot
    exit 0
  elif [ "${initArgs}" = "debian" ]; then
    echo " " >> ${logInt}
    msg "Launching the second run of ${initRun}" >> ${logInt}
    /opt/local/bin/boa ${initRun} >> ${logInt}
    wait
    touch /root/.run-two-debian.cnf
    echo " " >> ${logInt}
    msg "Time for the second reboot..." >> ${logInt}
    echo " " >> ${logInt}
    sleep 5
    rm -f /var/run/autoinit.pid
    reboot
    exit 0
  fi
}

init_run_one() {
  if [ "${initArgs}" = "devuan" ]; then
    echo " " >> ${logInt}
    msg "Launching the first run of ${initRun}" >> ${logInt}
    /opt/local/bin/boa ${initRun} >> ${logInt}
    wait
    touch /root/.run-one-devuan.cnf
    echo " " >> ${logInt}
    msg "Time for the first reboot..." >> ${logInt}
    echo " " >> ${logInt}
    sleep 5
    sed -i "s/.*autoinit.*//gi" /etc/crontab &> /dev/null
    wait
    echo "*/2 *   * * *   root    bash /opt/local/bin/autoinit devuan" >> /etc/crontab
    rm -f /var/run/autoinit.pid
    reboot
    exit 0
  elif [ "${initArgs}" = "debian" ]; then
    echo " " >> ${logInt}
    msg "Launching the first run of ${initRun}" >> ${logInt}
    /opt/local/bin/boa ${initRun} >> ${logInt}
    wait
    touch /root/.run-one-debian.cnf
    echo " " >> ${logInt}
    msg "Time for the first reboot..." >> ${logInt}
    echo " " >> ${logInt}
    sleep 5
    sed -i "s/.*autoinit.*//gi" /etc/crontab &> /dev/null
    wait
    echo "*/2 *   * * *   root    bash /opt/local/bin/autoinit debian" >> /etc/crontab
    rm -f /var/run/autoinit.pid
    reboot
    exit 0
  fi
}

init_conf() {
  if [ "${tRee}" = "dev" ]; then
    initCmnd="init-dev"
  else
    initCmnd="init"
  fi
  if [ -e "/root/.run-to-devuan-quick.cnf" ]; then
    initArgs="devuan"
    toFile="/root/.run-to-devuan-quick.cnf"
  elif [ -e "/root/.run-to-devuan.cnf" ]; then
    initArgs="devuan"
    toFile="/root/.run-to-devuan.cnf"
  else
    initArgs="debian"
    toFile="/root/.run-to-debian.cnf"
  fi
  initRun="${initCmnd} ${initArgs}"
}

init() {
  initCmnd=
  initArgs=
  initRun=
  touch /var/run/autoinit.pid
  init_conf
  if [ ! -e "/root/.run-one-devuan.cnf" ] \
    && [ ! -e "/root/.run-one-debian.cnf" ]; then
    init_run_one
  fi
  if [ -e "/root/.run-one-devuan.cnf" ] \
    || [ -e "/root/.run-one-debian.cnf" ]; then
    if [ ! -e "/root/.run-two-devuan.cnf" ] \
      && [ ! -e "/root/.run-two-debian.cnf" ]; then
      init_run_two
    fi
  fi
  if [ -e "/root/.run-two-devuan.cnf" ] \
    || [ -e "/root/.run-two-debian.cnf" ]; then
    if [ -e "/root/.run-to-devuan-quick.cnf" ]; then
      if [ ! -e "/root/.run-three-devuan-quick.cnf" ] \
        && [ ! -e "/root/.run-four-devuan-quick.cnf" ]; then
        init_run_three_quick
      fi
    else
      if [ ! -e "/root/.run-three-devuan.cnf" ] \
        && [ ! -e "/root/.run-three-debian.cnf" ]; then
        init_run_three
      fi
    fi
  fi
  if [ -e "/root/.run-three-devuan-quick.cnf" ] \
    && [ ! -e "/root/.run-four-devuan-quick.cnf" ]; then
    init_run_four_quick
  fi
}

if [ -e "/root/.run-to-devuan.cnf" ] \
  || [ -e "/root/.run-to-debian.cnf" ] \
  || [ -e "/root/.run-to-devuan-quick.cnf" ]; then
  echo
  echo "Launching BOA System INIT.."
  echo "Watch the progress with: tail -f /root/.autoinit.log"
  echo
  init
fi

exit 0
