#!/bin/bash

export HOME=/root
export SHELL=/bin/bash
export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin

_TODAY=$(date +%y%m%d 2>&1)
export _TODAY=${_TODAY//[^0-9]/}

_NOW=$(date +%y%m%d-%H%M%S 2>&1)
export _NOW=${_NOW//[^0-9-]/}

_barCnf="/root/.barracuda.cnf"
_barName="BARRACUDA.sh.txt"
_crlGet="-L --max-redirs 3 -k -s --retry 3 --retry-delay 5 -A iCab"
_aptYesUnth="-y --allow-unauthenticated"
_filIncB="barracuda.sh.cnf"
_filIncO="octopus.sh.cnf"
_octName="OCTOPUS.sh.txt"
_bldPth="/opt/tmp/boa"
_pthIncB="lib/settings/${_filIncB}"
_pthIncO="lib/settings/${_filIncO}"
_rgUrl="https://raw.githubusercontent.com/omega8cc/boa"
_vBs="/var/backups"

_CHECK_HOST=$(uname -n 2>&1)
_LOG_DIR="${_vBs}/reports/up/$(basename "$0")/${_TODAY}"
_UP_LOG="${_LOG_DIR}/$(basename "$0")-up-${_NOW}.log"
_VMFAMILY=XEN
_VM_TEST=$(uname -a 2>&1)
if [[ "${_VM_TEST}" =~ "-beng" ]]; then
  _VMFAMILY="VS"
fi
_INITINS="/usr/bin/apt-get -y --allow-unauthenticated install"

###
### Avoid too many questions
###
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi

_clean_pid_exit() {
  echo "REASON ${e} on $(date 2>&1)" >> /root/.barracuda.exit.exceptions.log
  [ -e "/run/boa_wait.pid" ] && rm -f /run/boa_wait.pid
  [ -e "/run/boa_run.pid" ] && rm -f /run/boa_run.pid
  [ -e "/tmp/aegir_backup_mode.txt" ] && rm -f /tmp/aegir_backup_mode.txt
  service cron start &> /dev/null
  exit 1
}

_os_detection_minimal() {
  _APT_UPDATE="apt-get update"
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  _OS_LIST="daedalus chimaera beowulf buster bullseye bookworm"
  for e in ${_OS_LIST}; do
    if [ "${e}" = "${_OS_CODE}" ]; then
      _APT_UPDATE="apt-get update --allow-releaseinfo-change"
    fi
  done
}

_apt_clean_update() {
  #apt-get clean -qq 2> /dev/null
  #rm -rf /var/lib/apt/lists/* &> /dev/null
  ${_APT_UPDATE} -qq 2> /dev/null
}

_ifnames_grub_check_sync() {
  _IS_IFACE=$(ip a 2>&1)
  _ADD_GRUB_CMD=""
  _GRUB_FILE="/etc/default/grub"

  if [ -e "${_GRUB_FILE}" ]; then
    if echo "${_IS_IFACE}" | grep -qE "eth[0-9]+"; then
      _USE_IFNAMES="CLASSIC"
      echo "GRUB: Classic ethX interface naming found."
    elif echo "${_IS_IFACE}" | grep -qE "(ens|enp|eno|wlp|wlo)[0-9]+:"; then
      _USE_IFNAMES="PREDICTABLE"
      echo "GRUB: Predictable (ensX, enpX, enoX, wlpX, wloX) interface naming found."
    else
      _USE_IFNAMES="DONTMODIFY"
      echo "GRUB: config exists, but no recognized network interface naming found."
    fi

    # Extract the current GRUB_CMDLINE_LINUX line
    _GRUB_CMDLINE_LINUX=$(grep -E "^GRUB_CMDLINE_LINUX=" "${_GRUB_FILE}")
    echo "GRUB: Current config is ${_GRUB_CMDLINE_LINUX}"

    # Initialize variables to check for existing options
    _SYS_NET_IFNAMES=$(echo "${_GRUB_CMDLINE_LINUX}" | grep -o "net.ifnames=[01]")
    _SYS_BIOSDEVNAME=$(echo "${_GRUB_CMDLINE_LINUX}" | grep -o "biosdevname=[01]")
    _SYS_MEMHP_STATE=$(echo "${_GRUB_CMDLINE_LINUX}" | grep -o "memhp_default_state=online")

    # Function to append option to _ADD_GRUB_CMD if not already present
    _append_grub_cmd_option() {
      local _option="$1"
      if [[ -z "${_ADD_GRUB_CMD}" ]]; then
        _ADD_GRUB_CMD="${_option}"
      else
        _ADD_GRUB_CMD="${_ADD_GRUB_CMD} ${_option}"
      fi
    }

    # Check and append options as necessary
    if [[ -z "${_SYS_MEMHP_STATE}" ]]; then
      _append_grub_cmd_option "memhp_default_state=online"
    fi

    if [[ "${_USE_IFNAMES}" == "CLASSIC" ]]; then
      if [[ "${_SYS_NET_IFNAMES}" != "net.ifnames=0" ]]; then
        _append_grub_cmd_option "net.ifnames=0"
      fi
      if [[ "${_SYS_BIOSDEVNAME}" != "biosdevname=0" ]]; then
        _append_grub_cmd_option "biosdevname=0"
      fi
    elif [[ "${_USE_IFNAMES}" == "PREDICTABLE" ]]; then
      if [[ "${_SYS_NET_IFNAMES}" != "net.ifnames=1" ]]; then
        _append_grub_cmd_option "net.ifnames=1"
      fi
      if [[ "${_SYS_BIOSDEVNAME}" != "biosdevname=1" ]]; then
        _append_grub_cmd_option "biosdevname=1"
      fi
    fi

    if [ -e "/root/.auto.config.ifnames.grub.cnf" ] && [ ! -e "/root/.ignore.ifnames.cnf" ]; then
      _NEW_GRUB=LIVE
    else
      _NEW_GRUB=DEMO
    fi

    if [[ -n "${_ADD_GRUB_CMD}" ]]; then
      # Backup the GRUB file
      cp "${_GRUB_FILE}" "${_GRUB_FILE}.bak"

      # Remove existing options from GRUB_CMDLINE_LINUX
      _NEW_GRUB_CMDLINE_LINUX=$(echo "${_GRUB_CMDLINE_LINUX}" | sed -E "s/(net.ifnames=[01]|biosdevname=[01]|memhp_default_state=online)//g")

      # Clean up extra spaces and trailing spaces before the closing quote
      _NEW_GRUB_CMDLINE_LINUX=$(echo "${_NEW_GRUB_CMDLINE_LINUX}" | tr -s ' ' | sed -E 's/\s*"$/"/')

      # Extract current kernel parameters
      _CURRENT_CMDLINE=$(echo "${_NEW_GRUB_CMDLINE_LINUX}" | sed -E 's/^GRUB_CMDLINE_LINUX="(.*)"$/\1/')

      # Append new options
      _UPDATED_CMDLINE="${_CURRENT_CMDLINE} ${_ADD_GRUB_CMD}"
      _UPDATED_CMDLINE=$(echo "${_UPDATED_CMDLINE}" | sed 's/^ *//;s/ *$//')

      # Form the new GRUB_CMDLINE_LINUX line
      _NEW_GRUB_CMDLINE_LINUX="GRUB_CMDLINE_LINUX=\"${_UPDATED_CMDLINE}\""

      echo " "
      if [[ "${_NEW_GRUB}" == "LIVE" ]]; then
        # Update the GRUB file
        echo "GRUB: Update in the LIVE MODE"
        sed -i "s|^GRUB_CMDLINE_LINUX=.*|${_NEW_GRUB_CMDLINE_LINUX}|" "${_GRUB_FILE}"
        echo "GRUB_CMDLINE_LINUX has been updated with ${_UPDATED_CMDLINE}"
      elif [[ "${_NEW_GRUB}" == "DEMO" ]]; then
        # Demo info
        echo "GRUB: Update in the DEMO MODE"
        echo "GRUB_CMDLINE_LINUX would be updated with ${_UPDATED_CMDLINE}"
        echo " "
        echo "GRUB: Update in the LIVE MODE needs presence of control file:"
        echo "GRUB   /root/.auto.config.ifnames.grub.cnf"
        echo " "
        echo "GRUB: Ensure that the file /root/.ignore.ifnames.cnf does not exist."
        echo "GRUB: This requirement serves as a double-check to confirm"
        echo "GRUB: that you are aware of and agree to auto-update GRUB configuration."
        echo "GRUB: Incorrect GRUB settings can render your virtual machine unbootable"
        echo "GRUB: necessitating a rescue operation using a CD-ROM or ISO image."
        echo "GRUB: For this reason, running BOA directly on physical hardware (bare metal) is not supported"
        echo " "
        echo "GRUB: NEVER USE LIVE MODE IF YOU ARE NOT SURE IF YOU NEED IT"
      fi
      echo " "
    fi
  else
    echo "GRUB config does not exist."
  fi
}

_check_root_direct() {
  _U_TEST=DENY
  [ "${SUDO_USER}" ] && _U_TEST_SDO=${SUDO_USER} || _U_TEST_SDO=`whoami`
  _U_TEST_WHO=$(who am i | awk '{print $1}' 2>&1)
  _U_TEST_LNE=$(logname 2>&1)
  if [ "${_U_TEST_SDO}" = "root" ] || [ "${_U_TEST_LNE}" = "root" ]; then
    if [ -z "${_U_TEST_WHO}" ]; then
      _U_TEST=ALLOW
      ### normal for root scripts running from cron
    else
      if [ "${_U_TEST_WHO}" = "root" ]; then
        _U_TEST=ALLOW
      fi
    fi
  fi
  if [ "${_U_TEST}" = "DENY" ]; then
    echo
    echo "ERROR: This script must be run as root directly,"
    echo "ERROR: without sudo/su switch from regular system user"
    echo "ERROR: Please add and test your SSH (RSA) keys for root account"
    echo "ERROR: with direct access before trying again"
    echo
    echo "HINT:  You can always restrict access later, or"
    echo "       allow only SSH (RSA) keys for root with directive"
    echo "         PermitRootLogin prohibit-password"
    echo "       in the /etc/ssh/sshd_config file"
    echo "Bye"
    _clean_pid_exit _check_root_direct_a
  fi
}

_check_root_keys_pwd() {
  _S_TEST=$(grep "root:\*:" /etc/shadow 2>&1)
  _R_TEST=CHECK
  if [ -e "/root/.ssh/authorized_keys" ]; then
    _R_TEST=$(grep "ssh-rsa" /root/.ssh/authorized_keys 2>&1)
  fi
  if [[ ! "${_S_TEST}" =~ "root:" ]] \
    && [[ ! "${_R_TEST}" =~ "ssh-rsa" ]]; then
    echo
    echo "ERROR: BOA requires working SSH (RSA) keys for system root present"
    echo "ERROR: Please add and test your SSH (RSA) keys for root account"
    echo "ERROR: before trying again"
    echo
    echo "HINTS: Run this command on your local PC machine:"
    echo "HINTS:   ssh-keygen -b 4096 -t rsa -N '' -f ~/.ssh/id_rsa"
    echo "HINTS: Then copy the ~/.ssh/id_rsa.pub file from your PC"
    echo "HINTS: to ~/.ssh/authorized_keys file on the server"
    echo "HINTS: Make sure the key is not split into more than 1 line"
    echo "HINTS: Remember to run: chmod 600 ~/.ssh/authorized_keys"
    echo
    echo "Bye"
    echo
    _clean_pid_exit _check_root_keys_pwd_a
  fi
}

_check_sql_running() {
  while [ -z "${_IS_MYSQLD_RUNNING}" ] \
    || [ ! -e "/run/mysqld/mysqld.sock" ]; do
    _IS_MYSQLD_RUNNING=$(ps aux | grep '[m]ysqld' | awk '{print $2}' 2>&1)
    echo "INFO: Waiting for MySQLD availability..."
    sleep 5
  done
}

_check_sql_access() {
  if [ -e "/root/.my.pass.txt" ] && [ -e "/root/.my.cnf" ]; then
    _SQL_PSWD=$(cat /root/.my.pass.txt 2>&1)
    _SQL_PSWD=$(echo -n ${_SQL_PSWD} | tr -d "\n" 2>&1)
    _IS_SYNC_SQL_PSWD=$(grep "${_SQL_PSWD}" /root/.my.cnf 2>&1)
  else
    echo "ALERT: /root/.my.cnf or /root/.my.pass.txt not found."
    echo "ALERT: Please fix this before trying again, giving up."
    echo "Bye"
    echo " "
    _clean_pid_exit _check_sql_access_a
  fi
  if [ -z "${_IS_SYNC_SQL_PSWD}" ] \
    || [[ ! "${_IS_SYNC_SQL_PSWD}" =~ "password=${_SQL_PSWD}" ]]; then
    echo "ALERT: SQL password is out of sync between"
    echo "ALERT: /root/.my.cnf and /root/.my.pass.txt"
    echo "ALERT: Please fix this before trying again, giving up."
    echo "Bye"
    echo " "
    _clean_pid_exit _check_sql_access_b
  else
    _IS_MYSQLD_RUNNING=$(ps aux | grep '[m]ysqld' | awk '{print $2}' 2>&1)
    if [ -z "${_IS_MYSQLD_RUNNING}" ]; then
      echo "ALERT: SQL server on this system is not running at all."
      echo "ALERT: Please fix this before trying again, giving up."
      echo "Bye"
      echo " "
      _clean_pid_exit _check_sql_access_c
    else
      _MYSQL_CONN_TEST=$(mysql -u root -e "status" 2>&1)
      if [ -z "${_MYSQL_CONN_TEST}" ] \
        || [[ "${_MYSQL_CONN_TEST}" =~ "Access denied" ]]; then
        echo "ALERT: SQL password in /root/.my.cnf does not work."
        echo "ALERT: Please fix this before trying again, giving up."
        echo "Bye"
        echo " "
        _clean_pid_exit _check_sql_access_d
      fi
    fi
  fi
}

_if_hosted_sys() {
  if [ -e "/root/.host8.cnf" ] \
    || [[ "${_CHECK_HOST}" =~ ".aegir.cc"($) ]]; then
    _hostedSys=YES
  else
    _hostedSys=NO
  fi
}

_fix_dns_settings() {
  mkdir -p ${_vBs}
  rm -f ${_vBs}/resolv.conf.tmp
  if [ -e "/etc/resolv.conf" ]; then
    if [ -L "/etc/resolv.conf" ]; then
      _rslvT=`readlink -n /etc/resolv.conf`
      if [ ! -e "${_rslvT}" ]; then
        rm -f /etc/resolv.conf
      fi
    fi
    if [ -e "/etc/resolv.conf" ]; then
      cp -a /etc/resolv.conf ${_vBs}/resolv.conf.tmp
    fi
  fi
  if [ ! -e "${_vBs}/resolv.conf.tmp" ]; then
    echo "nameserver 127.0.0.1" > ${_vBs}/resolv.conf.tmp
    echo "nameserver 1.1.1.1" >> ${_vBs}/resolv.conf.tmp
    echo "nameserver 1.0.0.1" >> ${_vBs}/resolv.conf.tmp
    echo "nameserver 8.8.8.8" >> ${_vBs}/resolv.conf.tmp
    echo "nameserver 8.8.4.4" >> ${_vBs}/resolv.conf.tmp
  fi
  if [ ! -e "${_vBs}/resolv.conf.vanilla" ]; then
    for _Pre in `ls -la ${_vBs}/resolv.conf.pre-*`; do
      if [ -e "${_Pre}" ] && [ -f "${_Pre}" ] && [ ! -L "${_Pre}" ]; then
        cp -a ${_Pre} ${_vBs}/resolv.conf.vanilla
      fi
    done
  fi
  if [ ! -e "${_vBs}/resolv.conf.vanilla" ] \
    && [ -e "${_vBs}/resolv.conf.tmp" ]; then
    if [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${_vBs}/resolv.conf.tmp /etc/resolv.conf
      cp -a ${_vBs}/resolv.conf.tmp ${_vBs}/resolv.conf.vanilla
    fi
  fi
  sed -i "/^$/d" ${_vBs}/resolv.conf.vanilla &> /dev/null
  if [ -e "${_vBs}/resolv.conf.vanilla" ]; then
    if [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${_vBs}/resolv.conf.vanilla /etc/resolv.conf
    fi
  else
    if [ -e "${_vBs}/resolv.conf.tmp" ] \
      && [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${_vBs}/resolv.conf.tmp /etc/resolv.conf
    fi
  fi
}

_check_dns_settings() {
  if [ -e "/root/.use.default.nameservers.cnf" ]; then
    _USE_DEFAULT_DNS=YES
  fi
  if [ -e "/root/.use.local.nameservers.cnf" ]; then
    _USE_PROVIDER_DNS=YES
  else
    _REMOTE_DNS_TEST=$(host files.aegir.cc 1.1.1.1 -w 10 2>&1)
  fi
  if [[ "${_REMOTE_DNS_TEST}" =~ "no servers could be reached" ]] \
    || [[ "${_REMOTE_DNS_TEST}" =~ "Host files.aegir.cc not found" ]] \
    || [ "${_USE_DEFAULT_DNS}" = "YES" ] \
    || [ "${_USE_PROVIDER_DNS}" = "YES" ]; then
    if [ "${_USE_DEFAULT_DNS}" = "YES" ] \
      || [ "${_USE_PROVIDER_DNS}" = "YES" ] \
      || [ ! -e "${_vBs}/resolv.conf.vanilla" ]; then
      _fix_dns_settings
      if [ -e "/etc/init.d/postfix" ]; then
        service postfix restart &> /dev/null
      fi
    fi
  fi
}

_barracuda_downgrade_protection() {
  if [ "${_cmNd}" != "php-idle" ] \
    && [ "${_cmNd}" != "up-distro" ] \
    && [ -e "/var/log/barracuda_log.txt" ]; then
    _SERIES_TEST=$(cat /var/log/barracuda_log.txt 2>&1)
    if [ "${_cmNd}" = "up-lts" ]; then
      if [[ "${_SERIES_TEST}" =~ "Barracuda ${_rLsn}-pro" ]]; then
        echo
        echo "ERROR: Your system has been already upgraded to ${_rLsn}-pro"
        echo "You can not downgrade back to previous/older/lts BOA version"
        echo "Please use 'barracuda up-pro system' to upgrade this server"
        echo "Bye"
        echo
        _clean_pid_exit _barracuda_downgrade_protection_a
      elif [[ "${_SERIES_TEST}" =~ "Barracuda ${_rLsn}-dev" ]]; then
        echo
        echo "ERROR: Your system has been already upgraded to ${_rLsn}-dev"
        echo "You can not downgrade back to previous/older/lts BOA version"
        echo "Please use 'barracuda up-dev system' to upgrade this server"
        echo "Bye"
        echo
        _clean_pid_exit _barracuda_downgrade_protection_b
      fi
    fi
    if [ "${_cmNd}" != "up-dev" ] \
      && [ "${_cmNd}" != "up-pro" ] \
      && [ "${_cmNd}" != "up-lts" ] \
      && [ "${_cmNd}" != "help" ] \
      && [ "${_cmNd}" != "info" ]; then
      echo
      echo "Sorry, you are trying not supported command.."
      echo "Display supported commands with: $(basename "$0") help"
      echo
      _clean_pid_exit _barracuda_downgrade_protection_c
    fi
  fi
}

_if_extended_report() {
  _EXTENDED=NO
  if [ -e "/root/.run-to-daedalus.cnf" ] \
    || [ -e "/root/.run-to-chimaera.cnf" ] \
    || [ -e "/root/.run-to-beowulf.cnf" ] \
    || [ -e "/root/.send-extended-report.cnf" ]; then
    _EXTENDED=YES
  fi
  if [ "${_EXTENDED}" = "YES" ]; then
    if [ -e "/root/.autodaedalus.log" ]; then
      cat /root/.autodaedalus.log >> ${_UP_LOG}
    elif [ -e "/root/.autochimaera.log" ]; then
      cat /root/.autochimaera.log >> ${_UP_LOG}
    elif [ -e "/root/.autobeowulf.log" ]; then
      cat /root/.autobeowulf.log >> ${_UP_LOG}
    fi
    echo            >> ${_UP_LOG}
    ls -ltcra /root >> ${_UP_LOG}
    echo            >> ${_UP_LOG}
    ps auxf         >> ${_UP_LOG}
    echo            >> ${_UP_LOG}
    aureport        >> ${_UP_LOG}
    echo            >> ${_UP_LOG}
    aa-status | grep loaded   >> ${_UP_LOG}
    aa-status | grep enforce  >> ${_UP_LOG}
    aa-status | grep complain >> ${_UP_LOG}
    echo            >> ${_UP_LOG}
    aa-unconfined   >> ${_UP_LOG}
    echo            >> ${_UP_LOG}
    /opt/local/bin/boa info full >> ${_UP_LOG}
    echo            >> ${_UP_LOG}
  else
    echo            >> ${_UP_LOG}
    /opt/local/bin/boa info >> ${_UP_LOG}
    echo            >> ${_UP_LOG}
  fi
}

_send_report() {
  if [ -e "${_barCnf}" ]; then
    source ${_barCnf}
    _if_hosted_sys
    if [ "${_hostedSys}" = "YES" ]; then
      _MY_EMAIL="$(basename "$0")@omega8.cc"
    fi
    if [ ! -z "${_MY_EMAIL}" ]; then
      _repSub="Successful Barracuda upgrade"
      _repSub="REPORT: ${_repSub} on ${_CHECK_HOST}"
      _repSub=$(echo -n ${_repSub} | fmt -su -w 2500 2>&1)
      _if_extended_report
      cat ${_UP_LOG} | s-nail -s "${_repSub} at ${_NOW}" ${_MY_EMAIL}
      echo "${_repSub} sent to ${_MY_EMAIL}"
    fi
  fi
}

_send_alert() {
  if [ -e "${_barCnf}" ]; then
    source ${_barCnf}
    _if_hosted_sys
    if [ "${_hostedSys}" = "YES" ]; then
      _MY_EMAIL="$(basename "$0")@omega8.cc"
    fi
    if [ ! -z "${_MY_EMAIL}" ]; then
      _repSub="${_ALERT_MSG} on ${_CHECK_HOST}"
      _repSub=$(echo -n ${_repSub} | fmt -su -w 2500 2>&1)
      _if_extended_report
      cat ${_UP_LOG} | s-nail -s "${_repSub} at ${_NOW}" ${_MY_EMAIL}
      echo "${_repSub} sent to ${_MY_EMAIL}"
    fi
  fi
}

_check_report() {
  sed -i "s/^_AWS_.*//g"         ${_UP_LOG}
  wait
  sed -i "s/^_NEWRELIC_KEY.*//g" ${_UP_LOG}
  wait
  sed -i "s/^_SCOUT_KEY.*//g"    ${_UP_LOG}
  wait
  sed -i "/^$/d"                 ${_UP_LOG}
  wait
  _SEND_ALERT=NO
  _RESULT_TEST_OK=$(grep "INFO: Test OK" ${_UP_LOG} 2>&1)
  _RESULT_TEST_CARD=$(grep "CARD: Now charging" ${_UP_LOG} 2>&1)
  _RESULT_KERNEL=$(grep "NOTE: Your OS kernel has been upgraded" ${_UP_LOG} 2>&1)
  _RESULT_REBOOT=$(grep "NOTE: Please reboot this server" ${_UP_LOG} 2>&1)
  _RESULT_ENJOY=$(grep "Enjoy your Aegir Hosting System" ${_UP_LOG} 2>&1)
  _RESULT_RLLY=$(grep "RLLY: No errors" ${_UP_LOG} 2>&1)
  _RESULT_APT_FAIL=$(grep "Displaying the last 15 lines" ${_UP_LOG} 2>&1)
  _RESULT_ALRT=$(grep "ALRT" ${_UP_LOG} 2>&1)
  _RESULT_FATAL=$(grep "FATAL ERROR" ${_UP_LOG} 2>&1)
  _RESULT_LIB_ERR=$(grep "cannot open shared object file" ${_UP_LOG} 2>&1)
  if [[ "${_RESULT_TEST_OK}" =~ "INFO: Test OK" ]] \
    || [[ "${_RESULT_TEST_OK}" =~ "binary file matches" ]] \
    || [[ "${_RESULT_TEST_CARD}" =~ "CARD: Now charging" ]] \
    || [[ "${_RESULT_TEST_CARD}" =~ "binary file matches" ]] \
    || [[ "${_RESULT_RLLY}" =~ "RLLY: No errors" ]] \
    || [[ "${_RESULT_RLLY}" =~ "binary file matches" ]] \
    || [[ "${_RESULT_ENJOY}" =~ "Enjoy your Aegir" ]] \
    || [[ "${_RESULT_ENJOY}" =~ "binary file matches" ]]; then
    if [[ "${_RESULT_APT_FAIL}" =~ "Displaying the last 15 lines" ]] \
      || [[ "${_RESULT_APT_FAIL}" =~ "binary file matches" ]]; then
      if [[ "${_RESULT_LIB_ERR}" =~ "cannot open shared object file" ]] \
        || [[ "${_RESULT_LIB_ERR}" =~ "binary file matches" ]]; then
        _SEND_ALERT=YES
        _ALERT_MSG="ALERT: Failed (libs) Barracuda upgrade"
      fi
    else
      _DO_NOTHING=YES
    fi
  else
    _SEND_ALERT=YES
    _ALERT_MSG="ALERT: Failed (msg) Barracuda upgrade"
  fi
  if [[ "${_RESULT_APT_FAIL}" =~ "Displaying the last 15 lines" ]] \
    || [[ "${_RESULT_APT_FAIL}" =~ "binary file matches" ]]; then
    _SEND_ALERT=YES
    _ALERT_MSG="ALERT: Failed (apt) Barracuda upgrade"
  fi
  if [[ "${_RESULT_KERNEL}" =~ "Your OS kernel" ]] \
    && [[ "${_RESULT_REBOOT}" =~ "Please reboot" ]]; then
    _SEND_ALERT=YES
    _ALERT_MSG="REBOOT: Your new system kernel requires boa reboot"
  fi
  if [[ "${_RESULT_ALRT}" =~ "ALRT" ]] \
    || [[ "${_RESULT_ALRT}" =~ "binary file matches" ]]; then
    _SEND_ALERT=YES
    _ALERT_MSG="ALERT: Failed (alrt) Barracuda upgrade"
  fi
  if [[ "${_RESULT_FATAL}" =~ "FATAL ERROR" ]] \
    || [[ "${_RESULT_FATAL}" =~ "binary file matches" ]]; then
    _SEND_ALERT=YES
    _ALERT_MSG="ALERT: Failed (aborted) Barracuda upgrade"
  fi
  if [[ "${_RESULT_LIB_ERR}" =~ "cannot open shared object file" ]] \
    || [[ "${_RESULT_LIB_ERR}" =~ "binary file matches" ]]; then
    _SEND_ALERT=YES
    _ALERT_MSG="ALERT: Failed (libs) Barracuda upgrade"
  fi
  if [ "${_SEND_ALERT}" = "YES" ]; then
    _send_alert
  else
    _send_report
  fi
}

_check_php_cli() {
  _PHP_CHECK=$(readlink -n /usr/bin/php 2>&1)
  if [ ! -x "${_PHP_CHECK}" ]; then
    if [ "${_PHP_CLI_VERSION}" = "8.1" ]; then
      _PHP_CLI_PATH="/opt/php81/bin/php"
    elif [ "${_PHP_CLI_VERSION}" = "8.2" ]; then
      _PHP_CLI_PATH="/opt/php82/bin/php"
    elif [ "${_PHP_CLI_VERSION}" = "8.3" ]; then
      _PHP_CLI_PATH="/opt/php83/bin/php"
    elif [ "${_PHP_CLI_VERSION}" = "7.4" ]; then
      _PHP_CLI_PATH="/opt/php74/bin/php"
    else
      _PHP_CLI_PATH=""
    fi
    if [ -x "${_PHP_CLI_PATH}" ]; then
      _USE_PHP_CLI_PATH="${_PHP_CLI_PATH}"
    else
      if  [ -x "/opt/php81/bin/php" ]; then
        _USE_PHP_CLI_PATH="/opt/php81/bin/php"
      elif  [ -x "/opt/php82/bin/php" ]; then
        _USE_PHP_CLI_PATH="/opt/php82/bin/php"
      elif  [ -x "/opt/php83/bin/php" ]; then
        _USE_PHP_CLI_PATH="/opt/php83/bin/php"
      elif  [ -x "/opt/php74/bin/php" ]; then
        _USE_PHP_CLI_PATH="/opt/php74/bin/php"
      fi
    fi
    if [ -x "${_USE_PHP_CLI_PATH}" ]; then
      rm -f /usr/bin/php
      rm -f /usr/bin/php-cli
      ln -sfn ${_USE_PHP_CLI_PATH} /usr/bin/php
      ln -sfn ${_USE_PHP_CLI_PATH} /usr/bin/php-cli
    else
      echo "ERROR: I can not find PHP-CLI anywhere!"
      echo "ERROR: BOA requires PHP 8.1 or newer"
      _clean_pid_exit _check_php_cli_a
    fi
  fi
}

_up_action() {
  if [ -e "${_vBs}/${_barName}" ] && [ -e "${_barCnf}" ]; then
    if [ ! -z "${_rKey}" ]; then
      if [ "${_rKey}" = "php-83" ] || [ "${_rKey}" = "php-8.3" ]; then
        _phpS="8.3"
      elif [ "${_rKey}" = "php-82" ] || [ "${_rKey}" = "php-8.2" ]; then
        _phpS="8.2"
      elif [ "${_rKey}" = "php-81" ] || [ "${_rKey}" = "php-8.1" ]; then
        _phpS="8.1"
      elif [ "${_rKey}" = "php-all" ] || [ "${_rKey}" = "php-min" ]; then
        _phpS="MIN"
        [ -e "/root/.allow-php-multi-install-cleanup.cnf" ] && rm -f /root/.allow-php-multi-install-cleanup.cnf
      elif [ "${_rKey}" = "php-max" ]; then
        _phpS="MAX"
        [ -e "/root/.allow-php-multi-install-cleanup.cnf" ] && rm -f /root/.allow-php-multi-install-cleanup.cnf
      elif [ "${_rKey}" = "nodns" ]; then
        sed -i "s/^_SMTP_RELAY_TEST.*/_SMTP_RELAY_TEST=NO/g" ${_vBs}/${_barName}
        wait
        sed -i "s/^_DNS_SETUP_TEST.*/_DNS_SETUP_TEST=NO/g"   ${_vBs}/${_barName}
        wait
        sed -i "s/^_SMTP_RELAY_TEST.*/_SMTP_RELAY_TEST=NO/g"          ${_barCnf}
        wait
        sed -i "s/^_DNS_SETUP_TEST.*/_DNS_SETUP_TEST=NO/g"            ${_barCnf}
        wait
      else
        _L_KEY=$(echo ${#_rKey} 2>&1)
        if [ ! -z "${_L_KEY}" ] && [ "${_L_KEY}" = "40" ]; then
          sed -i "s/^_NEWREL.*/_NEWRELIC_KEY=\"${_rKey}\"/g" ${_vBs}/${_barName}
          wait
          sed -i "s/^_NEWRELIC.*/_NEWRELIC_KEY=\"${_rKey}\"/g"        ${_barCnf}
          wait
        fi
      fi

      ### Enable debugging if requested
      if [ -e "/root/.debug-boa-installer.cnf" ] \
        || [ -e "/root/.debug-barracuda-installer.cnf" ]; then
        sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g"         ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g"                  ${_barCnf}
        wait
      fi

      ### Debugging
      if [ "${_dEbg}" = "debug" ]; then
        echo _rKey is ${_rKey}
        echo waiting 8 seconds...
        sleep 8
      fi
      ### Debugging

    fi
    ### Make sure that _PHP_SINGLE_INSTALL is set in ${_barCnf}
    if [ "${_phpS}" = "8.3" ] \
      || [ "${_phpS}" = "8.2" ] \
      || [ "${_phpS}" = "8.1" ] \
      || [ "${_phpS}" = "7.4" ]; then
      _PHP_SINGLE_INSTALL_TEST=$(grep _PHP_SINGLE_INSTALL ${_barCnf} 2>&1)
      if [[ "${_PHP_SINGLE_INSTALL_TEST}" =~ "_PHP_SINGLE_INSTALL" ]]; then
        sed -i "s/^_PHP_SINGLE.*/_PHP_SINGLE_INSTALL=${_phpS}/g" ${_barCnf}
        wait
      else
        echo "_PHP_SINGLE_INSTALL=${_phpS}" >> ${_barCnf}
      fi
    fi
    ### Make sure that _PHP_SINGLE_INSTALL takes precedence
    if [ ! -z "${_phpS}" ]; then
      if [ "${_phpS}" = "8.3" ] \
        || [ "${_phpS}" = "8.2" ] \
        || [ "${_phpS}" = "8.1" ] \
        || [ "${_phpS}" = "7.4" ]; then

        ### Debugging
        if [ "${_dEbg}" = "debug" ]; then
          echo _PHP_MULTI_INSTALL is ${_phpS}
          echo _PHP_SINGLE_INSTALL is ${_phpS}
          echo waiting 8 seconds...
          sleep 8
        fi
        ###

        sed -i "s/^_PHP_SIN.*/_PHP_SINGLE_INSTALL=${_phpS}/g" ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_PHP_MUL.*/_PHP_MULTI_INSTALL=${_phpS}/g"  ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_PHP_CLI_V.*/_PHP_CLI_VERSION=${_phpS}/g"  ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_PHP_FPM_V.*/_PHP_FPM_VERSION=${_phpS}/g"  ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_PHP_SINGL.*/_PHP_SINGLE_INSTALL=${_phpS}/g"        ${_barCnf}
        wait
        sed -i "s/^_PHP_MULTI.*/_PHP_MULTI_INSTALL=${_phpS}/g"         ${_barCnf}
        wait
        sed -i "s/^_PHP_CLI_V.*/_PHP_CLI_VERSION=${_phpS}/g"           ${_barCnf}
        wait
        sed -i "s/^_PHP_FPM_V.*/_PHP_FPM_VERSION=${_phpS}/g"           ${_barCnf}
        wait
        sed -i "s/^_PHP_CLI_V.*/_PHP_CLI_VERSION=${_phpS}/g" \
          /root/.*.octopus.cnf &> /dev/null
        wait
        sed -i "s/^_PHP_FPM_V.*/_PHP_FPM_VERSION=${_phpS}/g" \
          /root/.*.octopus.cnf &> /dev/null
        wait

        ### Debugging
        if [ "${_dEbg}" = "debug" ]; then
          cat ${_barCnf}
          echo
          echo test fin!
          _clean_pid_exit debug_a
        fi
        ### Debugging

        if [ -d "/data/u" ] && [ -e "/data/conf/global.inc" ]; then
          for _Ctrl in `find /data/disk/*/log/fpm.txt \
            -maxdepth 0 -mindepth 0 | sort`; do
            echo ${_phpS} > ${_Ctrl}
          done
          for _Ctrl in `find /data/disk/*/log/cli.txt \
            -maxdepth 0 -mindepth 0 | sort`; do
            echo ${_phpS} > ${_Ctrl}
          done
        fi
      elif [ "${_phpS}" = "MIN" ] || [ "${_phpS}" = "MAX" ]; then
        if [ "${_phpS}" = "MAX" ]; then
          _phpM="5.6 7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2 8.3"
        else
          _phpM="7.4 8.1 8.2 8.3"
        fi
        _phpS="8.3"

        ### Debugging
        if [ "${_dEbg}" = "debug" ]; then
          echo _PHP_MULTI_INSTALL is ${_phpM}
          echo _PHP_SINGLE_INSTALL is ${_phpS}
          echo waiting 8 seconds...
          sleep 8
        fi
        ###

        sed -i "s/^_PHP_SINGLE.*/_PHP_SINGLE_INSTALL=/g"     ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_PHP_M.*/_PHP_MULTI_INSTALL=\"${_phpM}\"/g" ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_PHP_CLI_V.*/_PHP_CLI_VERSION=${_phpS}/g"  ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_PHP_FPM_V.*/_PHP_FPM_VERSION=${_phpS}/g"  ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_PHP_SINGL.*/_PHP_SINGLE_INSTALL=/g"               ${_barCnf}
        wait
        sed -i "s/^_PHP_MULTI.*/_PHP_MULTI_INSTALL=\"${_phpM}\"/g"     ${_barCnf}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=${_phpS}/g"    ${_barCnf}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=${_phpS}/g"    ${_barCnf}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=${_phpS}/g" \
          /root/.*.octopus.cnf &> /dev/null
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=${_phpS}/g" \
          /root/.*.octopus.cnf &> /dev/null
        wait

        ### Debugging
        if [ "${_dEbg}" = "debug" ]; then
          cat ${_barCnf}
          echo
          echo test fin!
          _clean_pid_exit debug_b
        fi
        ### Debugging

        if [ -d "/data/u" ] && [ -e "/data/conf/global.inc" ]; then
          for _Ctrl in `find /data/disk/*/log/fpm.txt \
            -maxdepth 0 -mindepth 0 | sort`; do
            echo ${_phpS} > ${_Ctrl}
          done
          for _Ctrl in `find /data/disk/*/log/cli.txt \
            -maxdepth 0 -mindepth 0 | sort`; do
            echo ${_phpS} > ${_Ctrl}
          done
        fi
      fi
    fi
    _if_hosted_sys
    if [ "${_hostedSys}" != "YES" ]; then
      mkdir -p ${_vBs}/old-firewall-monitor/${_NOW}/legacy
      mv -f /var/xdrago/monitor/*.log \
        ${_vBs}/old-firewall-monitor/${_NOW}/legacy/ &> /dev/null
      mv -f /var/xdrago/monitor/log/*.log \
        ${_vBs}/old-firewall-monitor/${_NOW}/ &> /dev/null
    fi
    if [ "${_cmNd}" = "up-dev" ] \
      || [ "${_cmNd}" = "up-pro" ] \
      || [ "${_cmNd}" = "up-lts" ] \
      || [ "${_cmNd}" = "up-distro" ] \
      || [ "${_cmNd}" = "php-idle" ]; then
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${_bRnh}/g"      ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_AEGIR_VERSION.*/_AEGIR_VERSION=${_tRee}/g" ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_AEGIR_XTS_VRN.*/_AEGIR_XTS_VRN=${_tRee}/g" ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_X_VERSION=.*/_X_VERSION=${_rlsE}/g"        ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_REDIS_MAJOR_RELEASE=.*/_REDIS_MAJOR_RELEASE=7/g"    ${_barCnf}
      wait
    else
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${_bRnh}/g"      ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_AEGIR_VERSION.*/_AEGIR_VERSION=${_tRee}/g" ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_AEGIR_XTS_VRN.*/_AEGIR_XTS_VRN=${_rlsE}/g" ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_X_VERSION=.*/_X_VERSION=${_rlsE}/g"        ${_vBs}/${_filIncB}
      wait
    fi
    if [ "${_cmNd}" = "up-dev" ] \
      || [ "${_cmNd}" = "up-pro" ] \
      || [ "${_cmNd}" = "up-lts" ] \
      || [ "${_cmNd}" = "up-distro" ] \
      || [ "${_cmNd}" = "php-idle" ]; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${_bRnh}/g"      ${_vBs}/${_filIncB}
      wait
    else
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${_bRnh}/g"      ${_vBs}/${_filIncB}
      wait
    fi
    sed -i "s/^_AUTOPILOT=NO/_AUTOPILOT=YES/g"               ${_vBs}/${_filIncB}
    wait
    sed -i "s/^_SMTP_RELAY_TEST=YES/_SMTP_RELAY_TEST=NO/g"   ${_vBs}/${_filIncB}
    wait
    ### Force HTTP/2 or SPDY plus PFS on supported systems
    sed -i "s/^_NGINX_SPDY=.*/_NGINX_SPDY=YES/g"                      ${_barCnf}
    wait
    sed -i "s/^_NGINX_FORWARD.*/_NGINX_FORWARD_SECRECY=YES/g"         ${_barCnf}
    wait
    ### Force Redis SOCKET mode if PORT was used before
    sed -i "s/^_REDIS_LISTEN_MODE=PORT/_REDIS_LISTEN_MODE=SOCKET/g"   ${_barCnf}
    wait
    ### Force latest OpenSSH from sources on supported systems
    sed -i "s/^_SSH_FROM_SOURCES=.*/_SSH_FROM_SOURCES=YES/g"          ${_barCnf}
    wait
    sed -i "s/^_DB_SERVER=.*/_DB_SERVER=Percona/g"           ${_vBs}/${_filIncB}
    wait
    sed -i "s/^_DB_SERVER=.*/_DB_SERVER=Percona/g"                    ${_barCnf}
    wait
    if [ "${_sQld}" = "percona-8.4" ] \
      || [ "${_rKey}" = "percona-8.4" ] \
      || [ "${_dEbg}" = "percona-8.4" ] \
      || [ -e "/root/.percona.8.4.cnf" ]; then
      sed -i "s/^_DB_SERIES=.*/_DB_SERIES=8.4/g"             ${_vBs}/${_filIncB}
      sed -i "s/^_DB_SERIES=.*/_DB_SERIES=8.4/g"                      ${_barCnf}
    elif [ "${_sQld}" = "percona-8.3" ] \
      || [ "${_rKey}" = "percona-8.3" ] \
      || [ "${_dEbg}" = "percona-8.3" ] \
      || [ -e "/root/.percona.8.3.cnf" ]; then
      sed -i "s/^_DB_SERIES=.*/_DB_SERIES=8.3/g"             ${_vBs}/${_filIncB}
      sed -i "s/^_DB_SERIES=.*/_DB_SERIES=8.3/g"                      ${_barCnf}
    elif [ "${_sQld}" = "percona-8.0" ] \
      || [ "${_rKey}" = "percona-8.0" ] \
      || [ "${_dEbg}" = "percona-8.0" ] \
      || [ -e "/root/.percona.8.0.cnf" ]; then
      sed -i "s/^_DB_SERIES=.*/_DB_SERIES=8.0/g"             ${_vBs}/${_filIncB}
      sed -i "s/^_DB_SERIES=.*/_DB_SERIES=8.0/g"                      ${_barCnf}
    elif [ "${_sQld}" = "percona-5.7" ] \
      || [ "${_rKey}" = "percona-5.7" ] \
      || [ "${_dEbg}" = "percona-5.7" ] \
      || [ -e "/root/.percona.5.7.cnf" ]; then
      sed -i "s/^_DB_SERIES=.*/_DB_SERIES=5.7/g"             ${_vBs}/${_filIncB}
      sed -i "s/^_DB_SERIES=.*/_DB_SERIES=5.7/g"                      ${_barCnf}
    else
      sed -i "s/^_DB_SERIES=.*/_DB_SERIES=5.7/g"             ${_vBs}/${_filIncB}
      sed -i "s/^_DB_SERIES=.*/_DB_SERIES=5.7/g"                      ${_barCnf}
    fi

    if [ -e "${_barCnf}" ]; then
      wait
      sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"                      ${_barCnf}
      wait
      sed -i "s/^_DNS_SETUP_TEST=.*/_DNS_SETUP_TEST=YES/g"            ${_barCnf}
      wait
      sed -i "s/^_SMTP_RELAY_TEST=.*/_SMTP_RELAY_TEST=NO/g"           ${_barCnf}
      wait
      sed -i "s/^_STRONG_PASSWORDS=.*/_STRONG_PASSWORDS=YES/g"        ${_barCnf}
      wait
      sed -i "s/^_PERMISSIONS_FIX=.*/_PERMISSIONS_FIX=YES/g"          ${_barCnf}
      wait
      sed -i "s/^_REDIS_LISTEN.*/_REDIS_LISTEN_MODE=SOCKET/g"         ${_barCnf}
      wait
      if [ -e "/etc/init.d/redis-server" ]; then
        sed -i "s/^_USE_MYSQLTUNER=.*/_USE_MYSQLTUNER=NO/g"           ${_barCnf}
        wait
      fi
    fi

    _if_hosted_sys
    if [ "${_hostedSys}" = "YES" ]; then
      sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"notify\@omega8.cc\"/g"      ${_barCnf}
      wait
    fi

    if [ -e "/etc/default/tomcat" ] \
      && [ -e "/etc/init.d/tomcat" ] \
      && [ -e "${_barCnf}" ]; then
      sed -i "s/^_TOMCAT_TO_JETTY=.*/_TOMCAT_TO_JETTY=YES/g" ${_vBs}/${_barName}
      wait
      sed -i "s/^_TOMCAT_TO_JETTY.*//g"                               ${_barCnf}
      wait
      sed -i "/^$/d"                                                  ${_barCnf}
      wait
      echo "_TOMCAT_TO_JETTY=YES" >>                                  ${_barCnf}
    fi

    if [ -e "${_vBs}/${_barName}" ]; then
      if [ "${_outP}" = "log" ] \
        || [ "${_outP}" = "system" ] \
        || [ "${_outP}" = "disable" ] \
        || [ "${_outP}" = "enable" ]; then

        if [ "${_outP}" = "log" ] \
          || [ "${_outP}" = "system" ] \
          || [ "${_outP}" = "aegir" ]; then
          echo
          echo "Preparing the upgrade in silent mode..."
          echo
          echo "NOTE: There will be no progress displayed in the console"
          echo "but you will receive an email once the upgrade is complete"
          echo
          sleep 5
          echo "You could watch the progress in another window with command:"
          echo "  tail -f ${_UP_LOG}"
          echo "or wait until you will see the line: BARRACUDA upgrade completed"
          echo
          echo "Waiting 5 seconds..."
          sleep 5
          echo "Starting the upgrade in silent mode now..."
          echo
          sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"                  ${_barCnf}
          wait
          sed -i "s/^_SPINNER=YES/_SPINNER=NO/g"             ${_vBs}/${_barName}
          wait
        fi
        if [ "${_outP}" = "system" ]; then
          touch /run/boa_system_wait.pid
          if [ -e "/var/aegir/config/includes/nginx_vhost_common.conf" ] \
            && [ -d "/var/aegir/config/server_master/nginx/subdir.d" ]; then
            sed -i "s/^_SYSTEM_UP.*/_SYSTEM_UP_ONLY=YES/g"   ${_vBs}/${_filIncB}
            wait
            sed -i "s/^_SYSTEM_UP.*/_SYSTEM_UP_ONLY=YES/g"            ${_barCnf}
            wait
          else
            sed -i "s/^_SYSTEM_UP.*/_SYSTEM_UP_ONLY=NO/g"    ${_vBs}/${_filIncB}
            wait
            sed -i "s/^_SYSTEM_UP.*/_SYSTEM_UP_ONLY=NO/g"             ${_barCnf}
            wait
          fi
          sed -i "s/^_AEGIR_UP.*/_AEGIR_UPGRADE_ONLY=NO/g"   ${_vBs}/${_filIncB}
          wait
          sed -i "s/^_AEGIR_UP.*/_AEGIR_UPGRADE_ONLY=NO/g"            ${_barCnf}
          wait
          bash ${_vBs}/${_barName} >${_UP_LOG} 2>&1
          wait
          _check_report
        elif [ "${_outP}" = "log" ]; then
          sed -i "s/^_SYSTEM_UP.*/_SYSTEM_UP_ONLY=NO/g"      ${_vBs}/${_filIncB}
          wait
          sed -i "s/^_SYSTEM_UP.*/_SYSTEM_UP_ONLY=NO/g"               ${_barCnf}
          wait
          sed -i "s/^_AEGIR_UP.*/_AEGIR_UPGRADE_ONLY=NO/g"   ${_vBs}/${_filIncB}
          wait
          sed -i "s/^_AEGIR_UP.*/_AEGIR_UPGRADE_ONLY=NO/g"            ${_barCnf}
          wait
          bash ${_vBs}/${_barName} >${_UP_LOG} 2>&1
          wait
          _check_report
        elif [ "${_outP}" = "aegir" ]; then
          sed -i "s/^_SYSTEM_UP.*/_SYSTEM_UP_ONLY=NO/g"      ${_vBs}/${_filIncB}
          wait
          sed -i "s/^_SYSTEM_UP.*/_SYSTEM_UP_ONLY=NO/g"               ${_barCnf}
          wait
          sed -i "s/^_AEGIR_UP.*/_AEGIR_UPGRADE_ONLY=YES/g"  ${_vBs}/${_filIncB}
          wait
          sed -i "s/^_AEGIR_UP.*/_AEGIR_UPGRADE_ONLY=YES/g"           ${_barCnf}
          wait
          bash ${_vBs}/${_barName} >${_UP_LOG} 2>&1
          wait
          _check_report
        elif [ "${_outP}" = "enable" ] || [ "${_outP}" = "disable" ]; then
          sed -i "s/^_PHP_IDLE.*//g"                                  ${_barCnf}
          wait
          if [ "${_outP}" = "enable" ]; then
            echo "_PHP_IDLE=ON"                                    >> ${_barCnf}
            wait
          elif [ "${_outP}" = "disable" ]; then
            echo "_PHP_IDLE=OFF"                                   >> ${_barCnf}
            wait
          fi
          bash ${_vBs}/${_barName}
          wait
        fi
      else
        sed -i "s/^_SYSTEM_UP.*/_SYSTEM_UP_ONLY=NO/g"        ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_SYSTEM_UP.*/_SYSTEM_UP_ONLY=NO/g"                 ${_barCnf}
        wait
        sed -i "s/^_AEGIR_UP.*/_AEGIR_UPGRADE_ONLY=NO/g"     ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_AEGIR_UP.*/_AEGIR_UPGRADE_ONLY=NO/g"              ${_barCnf}
        wait
        sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=NO/g"                     ${_barCnf}
        wait
        if [ "${_cmNd}" = "php-idle" ]; then
          sed -i "s/^_PHP_IDLE.*//g"                                  ${_barCnf}
          wait
          if [ "${_outP}" = "enable" ]; then
            echo "_PHP_IDLE=ON"                                    >> ${_barCnf}
            wait
          elif [ "${_outP}" = "disable" ]; then
            echo "_PHP_IDLE=OFF"                                   >> ${_barCnf}
            wait
          fi
        fi
        if [ "${_cmNd}" = "up-distro" ]; then
          sed -i "s/^_UP_DISTRO.*//g"                                 ${_barCnf}
          wait
          if [ "${_outP}" = "enable" ]; then
            echo "_UP_DISTRO=ON"                                   >> ${_barCnf}
            wait
          elif [ "${_outP}" = "disable" ]; then
            echo "_UP_DISTRO=OFF"                                  >> ${_barCnf}
            wait
          fi
        fi
        bash ${_vBs}/${_barName}
        wait
      fi
    fi
  else
    echo
    echo "  ${_vBs}/${_barName} installer not available - try again later"
    echo "  Make sure that required ${_barCnf} file also exists"
    echo
    _clean_pid_exit _up_action_a
  fi
}

_up_start() {
  if [ -e "/run/boa_run.pid" ]; then
    echo
    echo "  Another BOA installer is running probably"
    echo "  because /run/boa_run.pid exists"
    echo
    exit 1
  elif [ -e "/run/boa_wait.pid" ]; then
    echo
    echo "  Some important system task is running probably"
    echo "  because /run/boa_wait.pid exists"
    echo
    exit 1
  else
    touch /run/boa_run.pid
    touch /run/boa_wait.pid
    [ -e "/tmp/aegir_backup_mode.txt" ] && rm -f /tmp/aegir_backup_mode.txt
    #kill -9 $(ps aux | grep '[d]aily.sh' | awk '{print $2}') &> /dev/null
    #rm -f /run/*daily*.pid
    mkdir -p ${_LOG_DIR}
    cd ${_vBs}
    rm -f ${_vBs}/BARRACUDA.sh*
  fi
  if [ -e "/opt/local/bin/php" ] \
    || [ -e "/opt/local/bin/pear" ] \
    || [ -e "/usr/local/bin/php" ] \
    || [ -e "/usr/local/bin/pear" ]; then
    rm -f /opt/local/bin/pear
    rm -f /opt/local/bin/php
    rm -f /usr/local/bin/pear
    rm -f /usr/local/bin/php
  fi
}

_if_fix_iptables_symlinks() {
  ###
  ### Fix for iptables paths backward compatibility
  ###
  if [ -x "/sbin/iptables" ] && [ ! -e "/usr/sbin/iptables" ]; then
    ln -s /sbin/iptables /usr/sbin/iptables
  fi
  if [ -x "/usr/sbin/iptables" ] && [ ! -e "/sbin/iptables" ]; then
    ln -s /usr/sbin/iptables /sbin/iptables
  fi
  if [ -x "/sbin/iptables-save" ] && [ ! -e "/usr/sbin/iptables-save" ]; then
    ln -s /sbin/iptables-save /usr/sbin/iptables-save
  fi
  if [ -x "/usr/sbin/iptables-save" ] && [ ! -e "/sbin/iptables-save" ]; then
    ln -s /usr/sbin/iptables-save /sbin/iptables-save
  fi
  if [ -x "/sbin/iptables-restore" ] && [ ! -e "/usr/sbin/iptables-restore" ]; then
    ln -s /sbin/iptables-restore /usr/sbin/iptables-restore
  fi
  if [ -x "/usr/sbin/iptables-restore" ] && [ ! -e "/sbin/iptables-restore" ]; then
    ln -s /usr/sbin/iptables-restore /sbin/iptables-restore
  fi
  if [ -x "/sbin/ip6tables" ] && [ ! -e "/usr/sbin/ip6tables" ]; then
    ln -s /sbin/ip6tables /usr/sbin/ip6tables
  fi
  if [ -x "/usr/sbin/ip6tables" ] && [ ! -e "/sbin/ip6tables" ]; then
    ln -s /usr/sbin/ip6tables /sbin/ip6tables
  fi
  if [ -x "/sbin/ip6tables-save" ] && [ ! -e "/usr/sbin/ip6tables-save" ]; then
    ln -s /sbin/ip6tables-save /usr/sbin/ip6tables-save
  fi
  if [ -x "/usr/sbin/ip6tables-save" ] && [ ! -e "/sbin/ip6tables-save" ]; then
    ln -s /usr/sbin/ip6tables-save /sbin/ip6tables-save
  fi
  if [ -x "/sbin/ip6tables-restore" ] && [ ! -e "/usr/sbin/ip6tables-restore" ]; then
    ln -s /sbin/ip6tables-restore /usr/sbin/ip6tables-restore
  fi
  if [ -x "/usr/sbin/ip6tables-restore" ] && [ ! -e "/sbin/ip6tables-restore" ]; then
    ln -s /usr/sbin/ip6tables-restore /sbin/ip6tables-restore
  fi
  ###
  ### Fix for iptables paths backward compatibility
  ###
}

_up_finish() {
  rm -f /root/.bashrc.bak*
  rm -f /root/BOA.sh*
  [ -e "/run/boa_run.pid" ] && rm -f /run/boa_run.pid
  [ -e "/run/boa_system_wait.pid" ] && rm -f /run/boa_system_wait.pid
  [ -e "/run/boa_wait.pid" ] && rm -f /run/boa_wait.pid
  [ -e "/run/manage_ltd_users.pid" ] && rm -f /run/manage_ltd_users.pid
  [ -e "/run/manage_ruby_users.pid" ] && rm -f /run/manage_ruby_users.pid
  [ -e "/tmp/aegir_backup_mode.txt" ] && rm -f /tmp/aegir_backup_mode.txt
  if [ -d "/data/u" ]; then
    rm -f ${_vBs}/*.sh.cnf*
    rm -f ${_vBs}/BARRACUDA.sh*
  fi
  if [ -e "/opt/local/bin/php" ] \
    || [ -e "/usr/local/bin/php" ]; then
    rm -f /opt/local/bin/php
    rm -f /usr/local/bin/php
  fi
  _if_hosted_sys
  if [ "${_hostedSys}" = "YES" ]; then
    service webmin stop &> /dev/null
    service usermin stop &> /dev/null
  fi
  if [ -d "/data/u" ]; then
    rm -rf /opt/tmp/*
  fi
  if [ -x "/usr/sbin/csf" ] \
    && [ -e "/etc/csf/csf.deny" ] \
    && [ ! -x "/etc/csf/csfpost.sh" ]; then
    echo "" > /etc/csf/csfpost.sh
    echo "iptables -t raw -A PREROUTING -p tcp --dport 21 -j CT --helper ftp" >> /etc/csf/csfpost.sh
    echo "iptables -t raw -A OUTPUT -p tcp --dport 21 -j CT --helper ftp" >> /etc/csf/csfpost.sh
    chmod 700 /etc/csf/csfpost.sh
    service lfd stop &> /dev/null
    wait
    kill -9 $(ps aux | grep '[C]onfigServer' | awk '{print $2}') &> /dev/null
    killall sleep &> /dev/null
    rm -f /etc/csf/csf.error
    csf -x  &> /dev/null
    wait
    service clean-boa-env start &> /dev/null
    wait
    _if_fix_iptables_symlinks
    csf -uf &> /dev/null
    wait
    _NFTABLES_TEST=$(iptables -V 2>&1)
    if [[ "${_NFTABLES_TEST}" =~ "nf_tables" ]]; then
      if [ -e "/usr/sbin/iptables-legacy" ]; then
        update-alternatives --set iptables /usr/sbin/iptables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/ip6tables-legacy" ]; then
        update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/arptables-legacy" ]; then
        update-alternatives --set arptables /usr/sbin/arptables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/ebtables-legacy" ]; then
        update-alternatives --set ebtables /usr/sbin/ebtables-legacy &> /dev/null
      fi
    fi
    csf -e &> /dev/null
    wait
    sed -i "s/.*DHCP.*//g" /etc/csf/csf.allow
    wait
    sed -i "/^$/d" /etc/csf/csf.allow
    if [ -e "/var/log/daemon.log" ]; then
      _DHCP_LOG="/var/log/daemon.log"
    else
      _DHCP_LOG="/var/log/syslog"
    fi
    grep DHCPREQUEST "${_DHCP_LOG}" | awk '{print $12}' | sort -u | while read -r _IP; do
      if [[ ${_IP} =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
        IFS='.' read -r oct1 oct2 oct3 oct4 <<< "${_IP}"
        if (( oct1 <= 255 && oct2 <= 255 && oct3 <= 255 && oct4 <= 255 )); then
          echo "udp|out|d=67|d=${_IP} # Local DHCP out" >> /etc/csf/csf.allow
        fi
      fi
    done
    csf -q  &> /dev/null
    service lfd start &> /dev/null
    wait
    ### Linux kernel TCP SACK CVEs mitigation
    ### CVE-2019-11477 SACK Panic
    ### CVE-2019-11478 SACK Slowness
    ### CVE-2019-11479 Excess Resource Consumption Due to Low MSS Values
    if [ -x "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
      _SACK_TEST=$(ip6tables --list | grep tcpmss 2>&1)
      if [[ ! "${_SACK_TEST}" =~ "tcpmss" ]]; then
        sysctl net.ipv4.tcp_mtu_probing=0 &> /dev/null
        iptables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
        ip6tables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
      fi
    fi
  fi
  if [ -e "/etc/init.d/postfix" ]; then
    service postfix restart &> /dev/null
  fi
  # Execute the daily.sh and exit
  nohup /var/xdrago/daily.sh > /dev/null 2>&1 &
  sleep 1
  echo
  echo BARRACUDA upgrade completed
  echo Bye
  echo
  exit 0
}

_check_etc_apt_preferences() {
  if [ -e "/etc/apt/preferences" ] \
    && [ ! -e "/var/backups/old_etc_apt_preferences" ]; then
    mv -f /etc/apt/preferences /var/backups/old_etc_apt_preferences
  fi
}

_find_fast_mirror_early() {
  _isNetc=$(which netcat 2>&1)
  if [ ! -x "${_isNetc}" ] || [ -z "${_isNetc}" ]; then
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
    fi
    _apt_clean_update
    apt-get install netcat ${_aptYesUnth} 2> /dev/null
    apt-get install netcat-traditional ${_aptYesUnth} 2> /dev/null
    wait
  fi
  _ffMirr=$(which ffmirror 2>&1)
  if [ -x "${_ffMirr}" ]; then
    _ffList="/var/backups/boa-mirrors-2024-01.txt"
    mkdir -p /var/backups
    if [ ! -e "${_ffList}" ]; then
      echo "de.files.aegir.cc"  > ${_ffList}
      echo "ny.files.aegir.cc" >> ${_ffList}
      echo "sg.files.aegir.cc" >> ${_ffList}
    fi
    if [ -e "${_ffList}" ]; then
      _BROKEN_FFMIRR_TEST=$(grep "stuff" ${_ffMirr} 2>&1)
      if [[ "${_BROKEN_FFMIRR_TEST}" =~ "stuff" ]]; then
        _CHECK_MIRROR=$(bash ${_ffMirr} < ${_ffList} 2>&1)
        _USE_MIR="${_CHECK_MIRROR}"
        [[ "${_USE_MIR}" =~ "printf" ]] && _USE_MIR="files.aegir.cc"
      else
        _USE_MIR="files.aegir.cc"
      fi
    else
      _USE_MIR="files.aegir.cc"
    fi
  else
    _USE_MIR="files.aegir.cc"
  fi
  _urlDev="http://${_USE_MIR}/dev"
  _urlHmr="http://${_USE_MIR}/versions/${_tRee}/boa/aegir"
}

_if_reinstall_curl() {
  _CURL_VRN=8.9.1
  if ! command -v lsb_release &> /dev/null; then
    apt-get update -qq &> /dev/null
    apt-get install lsb-release -y -qq &> /dev/null
  fi
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  [ "${_OS_CODE}" = "wheezy" ] && _CURL_VRN=7.50.1
  [ "${_OS_CODE}" = "jessie" ] && _CURL_VRN=7.71.1
  [ "${_OS_CODE}" = "stretch" ] && _CURL_VRN=8.2.1
  _isCurl=$(curl --version 2>&1)
  if [[ ! "${_isCurl}" =~ "OpenSSL" ]] || [ -z "${_isCurl}" ]; then
    echo "OOPS: cURL is broken! Re-installing.."
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
    fi
    echo "curl install" | dpkg --set-selections 2> /dev/null
    _apt_clean_update
    apt-get remove libssl1.0-dev -y --purge --auto-remove -qq 2> /dev/null
    apt-get autoremove -y 2> /dev/null
    apt-get install libssl-dev -y -qq 2> /dev/null
    apt-get install libc-client2007e libc-client2007e-dev -y -qq 2> /dev/null
    apt-get build-dep curl -y 2> /dev/null
    if [ ! -e "/var/aegir/drush" ]; then
      apt-get install curl --reinstall -y -qq 2> /dev/null
    fi
    if [ -e "/var/aegir/drush" ]; then
      echo "INFO: Installing curl from sources..."
      mkdir -p /var/opt
      rm -rf /var/opt/curl*
      cd /var/opt
      wget -q -U iCab http://files.aegir.cc/dev/src/curl-${_CURL_VRN}.tar.gz &> /dev/null
      tar -xzf curl-${_CURL_VRN}.tar.gz &> /dev/null
      if [ -e "/root/.install.modern.openssl.cnf" ] \
        && [ -x "/usr/local/ssl3/bin/openssl" ]; then
        _SSL_BINARY=/usr/local/ssl3/bin/openssl
      else
        _SSL_BINARY=/usr/local/ssl/bin/openssl
      fi
      if [ -e "/usr/local/ssl3/lib64/libssl.so.3" ]; then
        _SSL_PATH="/usr/local/ssl3"
        _SSL_LIB_PATH="${_SSL_PATH}/lib64"
      else
        _SSL_PATH="/usr/local/ssl"
        _SSL_LIB_PATH="${_SSL_PATH}/lib"
      fi
      _PKG_CONFIG_PATH="${_SSL_LIB_PATH}/pkgconfig"

      if [ -e "${_PKG_CONFIG_PATH}" ] \
        && [ -e "/var/opt/curl-${_CURL_VRN}" ]; then
        cd /var/opt/curl-${_CURL_VRN}
        LIBS="-ldl -lpthread" PKG_CONFIG_PATH="${_PKG_CONFIG_PATH}" ./configure \
          --with-openssl \
          --with-zlib=/usr \
          --prefix=/usr/local &> /dev/null
        make -j $(nproc) --quiet &> /dev/null
        make --quiet install &> /dev/null
        ldconfig 2> /dev/null
      fi
    fi
    if [ -f "/usr/local/bin/curl" ]; then
      _isCurl=$(/usr/local/bin/curl --version 2>&1)
      if [[ ! "${_isCurl}" =~ "OpenSSL" ]] || [ -z "${_isCurl}" ]; then
        echo "ERRR: curl is still broken, please install it and debug manually"
        _clean_pid_exit
      else
        echo "GOOD: /usr/local/bin/curl works"
      fi
    fi
  fi
}

_check_dns_curl() {
  if [ ! -f "/etc/resolv.conf" ]; then
    rm -f /etc/resolv.conf
    echo "nameserver 127.0.0.1" > /etc/resolv.conf
    if [ -e "${_vBs}/resolv.conf.vanilla" ]; then
      cat ${_vBs}/resolv.conf.vanilla >> /etc/resolv.conf
    fi
    echo "nameserver 1.1.1.1" >> /etc/resolv.conf
    echo "nameserver 1.0.0.1" >> /etc/resolv.conf
    echo "nameserver 8.8.8.8" >> /etc/resolv.conf
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf
    _check_dns_settings
  else
    _check_dns_settings
  fi
  if [ -x "/usr/sbin/unbound-control" ] \
    && [ -e "/etc/resolvconf/run/interface/lo.unbound" ]; then
    unbound-control reload &> /dev/null
  fi
  _find_fast_mirror_early
  _if_reinstall_curl
  _CURL_TEST=$(curl -L -k -s \
    --max-redirs 10 \
    --retry 3 \
    --retry-delay 10 \
    -I "http://${_USE_MIR}" 2> /dev/null)
  if [[ ! "${_CURL_TEST}" =~ "200 OK" ]]; then
    if [[ "${_CURL_TEST}" =~ "unknown option was passed in to libcurl" ]]; then
      echo "ERROR: cURL libs are out of sync! Re-installing again.."
      _if_reinstall_curl
    else
      echo "ERROR: ${_USE_MIR} is not available, please try later"
      _clean_pid_exit _check_dns_curl_a
    fi
  fi
}

_csf_check_fix() {
  if [ -x "/usr/sbin/csf" ] \
    && [ -e "/etc/csf/csf.deny" ] \
    && [ ! -x "/etc/csf/csfpost.sh" ]; then
    echo "" > /etc/csf/csfpost.sh
    echo "iptables -t raw -A PREROUTING -p tcp --dport 21 -j CT --helper ftp" >> /etc/csf/csfpost.sh
    echo "iptables -t raw -A OUTPUT -p tcp --dport 21 -j CT --helper ftp" >> /etc/csf/csfpost.sh
    chmod 700 /etc/csf/csfpost.sh
    sed -i "s/.*aegir.*//g" /etc/csf/csf.allow
    csf -a 94.237.26.49    de.files.aegir.cc  &> /dev/null
    csf -a 209.151.150.175 ny.files.aegir.cc  &> /dev/null
    csf -a 95.111.194.246  sg.files.aegir.cc  &> /dev/null
    service lfd stop &> /dev/null
    wait
    kill -9 $(ps aux | grep '[C]onfigServer' | awk '{print $2}') &> /dev/null
    killall sleep &> /dev/null
    rm -f /etc/csf/csf.error
    csf -x  &> /dev/null
    wait
    service clean-boa-env start &> /dev/null
    wait
    _if_fix_iptables_symlinks
    csf -uf &> /dev/null
    wait
    _NFTABLES_TEST=$(iptables -V 2>&1)
    if [[ "${_NFTABLES_TEST}" =~ "nf_tables" ]]; then
      if [ -e "/usr/sbin/iptables-legacy" ]; then
        update-alternatives --set iptables /usr/sbin/iptables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/ip6tables-legacy" ]; then
        update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/arptables-legacy" ]; then
        update-alternatives --set arptables /usr/sbin/arptables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/ebtables-legacy" ]; then
        update-alternatives --set ebtables /usr/sbin/ebtables-legacy &> /dev/null
      fi
    fi
    csf -e &> /dev/null
    wait
    sed -i "s/.*DHCP.*//g" /etc/csf/csf.allow
    wait
    sed -i "/^$/d" /etc/csf/csf.allow
    if [ -e "/var/log/daemon.log" ]; then
      _DHCP_LOG="/var/log/daemon.log"
    else
      _DHCP_LOG="/var/log/syslog"
    fi
    grep DHCPREQUEST "${_DHCP_LOG}" | awk '{print $12}' | sort -u | while read -r _IP; do
      if [[ ${_IP} =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
        IFS='.' read -r oct1 oct2 oct3 oct4 <<< "${_IP}"
        if (( oct1 <= 255 && oct2 <= 255 && oct3 <= 255 && oct4 <= 255 )); then
          echo "udp|out|d=67|d=${_IP} # Local DHCP out" >> /etc/csf/csf.allow
        fi
      fi
    done
    csf -q  &> /dev/null
    service lfd start &> /dev/null
    wait
    ### Linux kernel TCP SACK CVEs mitigation
    ### CVE-2019-11477 SACK Panic
    ### CVE-2019-11478 SACK Slowness
    ### CVE-2019-11479 Excess Resource Consumption Due to Low MSS Values
    if [ -x "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
      _SACK_TEST=$(ip6tables --list | grep tcpmss 2>&1)
      if [[ ! "${_SACK_TEST}" =~ "tcpmss" ]]; then
        sysctl net.ipv4.tcp_mtu_probing=0 &> /dev/null
        iptables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
        ip6tables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
      fi
    fi
  fi
}

_check_root() {
  if [ `whoami` = "root" ]; then
    [ -e "/root/.barracuda.cnf" ] && source /root/.barracuda.cnf
    export _B_NICE=${_B_NICE//[^0-9]/}
    : "${_B_NICE:=10}"
    renice ${_B_NICE} -p $$ &> /dev/null
    _csf_check_fix
    chmod a+w /dev/null
    if [ ! -e "/dev/fd" ]; then
      if [ -e "/proc/self/fd" ]; then
        rm -rf /dev/fd
        ln -s /proc/self/fd /dev/fd
      fi
    fi
    [ -e "/var/lib/man-db/auto-update" ] && rm -f /var/lib/man-db/auto-update
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
    fi
    if [ -x "/opt/local/bin/killer" ]; then
      sed -i "s/.*killer.*//gi" /etc/crontab &> /dev/null
      echo "*/1 *   * * *   root    bash /opt/local/bin/killer" >> /etc/crontab
    fi
    if [ "${_VMFAMILY}" = "VS" ]; then
      if [ ! -e "/etc/apt/preferences.d/fuse" ]; then
        mkdir -p /etc/apt/preferences.d/
        echo -e 'Package: fuse\nPin: release *\nPin-Priority: -1' > /etc/apt/preferences.d/fuse
        _apt_clean_update
      fi
      if [ ! -e "/etc/apt/preferences.d/udev" ]; then
        mkdir -p /etc/apt/preferences.d/
        echo -e 'Package: udev\nPin: release *\nPin-Priority: -1' > /etc/apt/preferences.d/udev
        _apt_clean_update
      fi
      if [ ! -e "/etc/apt/preferences.d/makedev" ]; then
        mkdir -p /etc/apt/preferences.d/
        echo -e 'Package: makedev\nPin: release *\nPin-Priority: -1' > /etc/apt/preferences.d/makedev
        _apt_clean_update
      fi
      apt-get remove fuse -y --purge --auto-remove -qq 2> /dev/null
      apt-get remove udev -y --purge --auto-remove -qq 2> /dev/null
      apt-get remove makedev -y --purge --auto-remove -qq 2> /dev/null
      _PTMX=OK
      if [ -e "/sbin/hdparm" ]; then
        apt-get remove hdparm -y --purge --auto-remove -qq 2> /dev/null
      fi
      _REMOVE_LINKS="buagent \
                     checkroot.sh \
                     fancontrol \
                     halt \
                     hwclock.sh \
                     hwclockfirst.sh \
                     ifupdown \
                     ifupdown-clean \
                     kerneloops \
                     klogd \
                     mountall-bootclean.sh \
                     mountall.sh \
                     mountdevsubfs.sh \
                     mountkernfs.sh \
                     mountnfs-bootclean.sh \
                     mountnfs.sh \
                     mountoverflowtmp \
                     mountvirtfs \
                     mtab.sh \
                     networking \
                     procps \
                     reboot \
                     sendsigs \
                     setserial \
                     svscan \
                     sysstat \
                     umountfs \
                     umountnfs.sh \
                     umountroot \
                     urandom \
                     vnstat"
      for _link in ${_REMOVE_LINKS}; do
        if [ -e "/etc/init.d/${_link}" ]; then
          update-rc.d -f ${_link} remove &> /dev/null
          mv -f /etc/init.d/${_link} /var/backups/init.d.${_link}
        fi
      done
      for s in cron dbus ssh; do
        if [ -e "/etc/init.d/${s}" ]; then
          sed -rn -e 's/^(# Default-Stop:).*$/\1 0 1 6/' -e '/^### BEGIN INIT INFO/,/^### END INIT INFO/p' /etc/init.d/${s} > /etc/insserv/overrides/${s}
        fi
      done
      /sbin/insserv -v -d &> /dev/null
    else
      _PTMX=CHECK
    fi
    _PTS_TEST=$(cat /proc/mounts | grep devpts 2>&1)
    if [[ ! "${_PTS_TEST}" =~ "devpts" ]] && [ ! -e "/dev/pts/ptmx" ]; then
      _PTS=FIX
    else
      _PTS=OK
    fi
    if [ "${_PTMX}" = "CHECK" ] && [ "${_PTS}" = "FIX" ]; then
      echo "Required /dev/pts/ptmx does not exist! We will fix this now..."
      mkdir -p /dev/pts
      rm -rf /dev/pts/*
      if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
        && [ -e "/etc/apt/apt.conf.d" ]; then
        echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
      fi
      _apt_clean_update
      apt-get install udev -y --allow-unauthenticated 2> /dev/null
      echo "devpts          /dev/pts        devpts  rw,noexec,nosuid,gid=5,mode=620 0  0" >> /etc/fstab
      mount -t devpts devpts /dev/pts &> /dev/null
    fi
    sed -i "s/^127.0.0.1.*/127.0.0.1 localhost/g" /etc/hosts
    wait
    sed -i "s/.*files.aegir.cc.*//g" /etc/hosts
    wait
    sed -i "s/.*github.*//g" /etc/hosts
    wait
    echo >>/etc/hosts
    sed -i "/^$/d" /etc/hosts
    wait
    if [ -e "/etc/init.d/postfix" ]; then
      service postfix restart &> /dev/null
    fi
  else
    echo "ERROR: This script should be run as a root user"
    _clean_pid_exit _check_root_a
  fi
  _DF_TEST=$(df -kTh / -l \
    | grep '/' \
    | sed 's/\%//g' \
    | awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "${_DF_TEST}" ] && [ "${_DF_TEST}" -gt "90" ]; then
    echo "ERROR: Your disk space is almost full !!! ${_DF_TEST}/100"
    echo "ERROR: We can not proceed until it is below 90/100"
    _clean_pid_exit _check_root_b
  fi
  if [ -e "${_barCnf}" ]; then
    source ${_barCnf}
  fi
}

_check_no_systemd() {
  if [ -e "/lib/systemd/systemd" ]; then
    echo "ERROR: This script can not be used with systemd"
    echo "ERROR: Please run 'autoinit' first"
    _clean_pid_exit _check_no_systemd_a_barracuda
  fi
}

_old_apt_keys_cleanup() {
  _isAptKey=$(which apt-key 2>&1)
  if [ -x "${_isAptKey}" ]; then
    _OLD_KEY_KSPLICE_TEST=$(${_isAptKey} list | grep ksplice 2>&1)
    _OLD_KEY_ORACLE_TEST=$(${_isAptKey} list | grep oracle 2>&1)
    _OLD_KEY_NEWRELIC_TEST=$(${_isAptKey} list | grep newrelic 2>&1)
    _OLD_KEY_PERCONA_TEST=$(${_isAptKey} list | grep percona 2>&1)
    _OLD_KEY_MALLORY_TEST=$(${_isAptKey} list | grep mallory 2>&1)
    _OLD_KEY_GHOST_TEST=$(${_isAptKey} list | grep "6857 6280" 2>&1)
    if [[ "${_OLD_KEY_KSPLICE_TEST}" =~ "ksplice" ]]; then
      ${_isAptKey} del B6D4038E &> /dev/null
    fi
    if [[ "${_OLD_KEY_ORACLE_TEST}" =~ "oracle" ]]; then
      ${_isAptKey} del AD986DA3 &> /dev/null
    fi
    if [[ "${_OLD_KEY_NEWRELIC_TEST}" =~ "newrelic" ]]; then
      ${_isAptKey} del 548C16BF &> /dev/null
    fi
    if [[ "${_OLD_KEY_PERCONA_TEST}" =~ "percona" ]]; then
      ${_isAptKey} del 8507EFA5 &> /dev/null
    fi
    if [[ "${_OLD_KEY_MALLORY_TEST}" =~ "mallory" ]]; then
      ${_isAptKey} del 8507EFA5 &> /dev/null
    fi
    if [[ "${_OLD_KEY_GHOST_TEST}" =~ "6857 6280" ]]; then
      ${_isAptKey} del 68576280 &> /dev/null
    fi
  fi
}

_proceed() {
  _check_root_keys_pwd
  _check_root
  _check_no_systemd
  _up_start
  _barracuda_downgrade_protection
  _os_detection_minimal
  _check_dns_curl
  _check_php_cli
  _old_apt_keys_cleanup &> /dev/null
  _check_etc_apt_preferences
  if [ "${_tRee}" = "dev" ]; then
    touch /root/.debug-boa-installer.cnf
    touch /root/.debug-octopus-installer.cnf
  fi
  [ ! -e "/root/.mysql.yes.new.password.cnf" ] && touch /root/.mysql.yes.new.password.cnf
  if [ -e "/root/.run-to-daedalus.cnf" ] \
    || [ -e "/root/.run-to-chimaera.cnf" ] \
    || [ -e "/root/.run-to-beowulf.cnf" ] \
    || [ "${_cmNd}" = "help" ] \
    || [ "${_cmNd}" = "info" ] \
    || [ "${_cmNd}" = "php-idle" ] \
    || [ "${_cmNd}" = "up-distro" ]; then
    _CHECK_SQL=NO
  else
    _CHECK_SQL=YES
  fi
  if [ "${_CHECK_SQL}" = "YES" ]; then
    _check_sql_running
    _check_sql_access
  fi
  _SCRIPT_URL="${_rgUrl}/${_bRnh}/${_barName}"
  curl ${_crlGet} "${_rgUrl}/${_bRnh}/${_pthIncB}" -o ${_vBs}/${_filIncB}
  curl ${_crlGet} ${_SCRIPT_URL} -o ${_vBs}/${_barName}
  _up_action
  _up_finish
}

_check_manufacturer_compatibility() {
  # Install dmidecode of not present
  if ! command -v dmidecode &> /dev/null; then
    /usr/bin/apt-get update &> /dev/null
    ${_INITINS} dmidecode &> /dev/null
  fi
  # Check if dmidecode is available
  _DMI_TEST=$(which dmidecode 2>&1)
  if [ -x "${_DMI_TEST}" ]; then
    _HOST_INFO=$(dmidecode -s system-manufacturer 2>&1)
  else
    _HOST_INFO="Unknown, dmidecode not available"
  fi
  # Check for Amazon EC2 in the system manufacturer field
  if dmidecode -s system-manufacturer | grep -i 'Amazon EC2' &> /dev/null; then
    _VMFAMILY="AWS"
    echo "Not supported environment detected: ${_HOST_INFO}"
    echo "Please check https://bit.ly/boa-caveats"
    echo "Bye!"
    _clean_pid_exit _check_manufacturer_compatibility_a
  elif [[ "${_HOST_INFO}" =~ "Unknown" ]] || [ -z "${_HOST_INFO}" ]; then
    echo "Mysterious environment: ${_HOST_INFO}"
    echo "Please check https://bit.ly/boa-caveats"
    echo "Bye!"
    _clean_pid_exit _check_manufacturer_compatibility_b
  fi
}

_if_start_screen() {
  if [[ -n "$SSH_CONNECTION" || -n "$SSH_CLIENT" ]]; then
    # Check if the user is inside a screen session
    if [[ ! "${_ARGS}" =~ (^|[[:space:]])(info|help)([[:space:]]|$) ]]; then
      if [ -z "$STY" ]; then
        # If not in screen, start a new screen session with the same script
        echo "You are not inside a screen session. Starting screen..."
        sleep 5
        screen -S session_barracuda bash -c "$0 ${_ARGS}"
        exit
      else
        # If already inside screen, continue the script
        echo "You are in a screen session now"
        sleep 3
      fi
    fi
  fi
}

_if_display_help() {
  if [ "${_cmNd}" = "help" ] || [ "${_cmNd}" = "info" ]; then
    echo
    echo "Usage: $(basename "$0") {version} {mode} {options}"
    echo
    echo "Usage: $(basename "$0") php-idle {enable|disable}"
    echo
    cat <<EOF

    Accepted keywords and values in every option:

    {version}
      up-lts <------- upgrade to Barracuda LTS release (no license)
      up-pro <------- upgrade to Barracuda PRO release (requires license)
      up-dev <------- upgrade to Barracuda Cutting Edge (requires license)
      php-idle <----- disable not used PHP versions or enable them again

    {mode}
      system <------- upgrade only system without Aegir Master (silent mode)
      aegir <-------- upgrade only Aegir Master Hostmaster (silent mode)
      log <---------- upgrade both system and Aegir Master (silent mode)

    {options}
      newrelickey <-- activate New Relic integration with valid license key
      php-8.3 <------ enable single-PHP mode (8.1 or 8.2 or 8.3 or 7.4)
      php-min <------ install PHP 8.1, 8.2, 8.3, 7.4, use 8.3 by default (php-all)
      php-max <------ install PHP 8.1, 8.2, 8.3, 8.0, 7.4, 7.3, 7.2, 7.1, 7.0, 5.6
      nodns <-------- disable DNS/SMTP checks on the fly
      percona-8.0 <-- specify Percona version to use (5.7, 8.0, 8.3, 8.4)

    See docs/UPGRADE.md for more details.

EOF
    _clean_pid_exit _proceed_a
  fi
}

_set_tree_vars() {
  if [ ! -z "${_outP}" ]; then
    if [ "${_outP}" = "log" ] \
      || [ "${_outP}" = "disable" ] \
      || [ "${_outP}" = "enable" ] \
      || [ "${_outP}" = "system" ] \
      || [ "${_outP}" = "distro" ]; then
      export _outP="${_argS}"
    else
      export _outP=
      export _rKey="${_argS}"
      export _dEbg="${_argT}"
      export _sQld="${_argF}"
    fi
  fi
  if [ "${_cmNd}" = "up-dev" ]; then
    _tRee=dev
    _ifnames_grub_check_sync
  elif [ "${_cmNd}" = "up-pro" ]; then
    _tRee=pro
    _ifnames_grub_check_sync
  elif [ "${_cmNd}" = "up-lts" ]; then
    _tRee=lts
    _ifnames_grub_check_sync
  else
    if [ "${_cmNd}" = "php-idle" ] \
      || [ "${_cmNd}" = "help" ] \
      || [ "${_cmNd}" = "info" ] \
      || [ "${_cmNd}" = "up-distro" ]; then
      _tRee=dev
    else
      echo
      echo "Sorry, you are trying not supported command.."
      echo "Display supported commands with: $(basename "$0") help"
      echo
      _clean_pid_exit _cmNd_a
    fi
  fi

  export _tRee="${_tRee}"
  export _rLsn="BOA-5.4.0"
  export _rlsE="${_rLsn}-${_tRee}"
  export _bRnh="5.x-${_tRee}"

}

export _ARGS="$@"
export _cmNd="$1"
export _outP="$2"
export _rKey="$3"
export _dEbg="$4"
export _sQld="$5"

export _argS="$2"
export _argT="$3"
export _argF="$4"

_check_root_direct
_set_tree_vars
_if_display_help
###_check_manufacturer_compatibility
_if_start_screen
_proceed

exit 0
