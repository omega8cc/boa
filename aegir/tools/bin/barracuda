#!/bin/bash

HOME=/root
SHELL=/bin/bash
PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin

export PATH=${PATH}
export SHELL=${SHELL}
export HOME=${HOME}

barCnf="/root/.barracuda.cnf"
barName="BARRACUDA.sh.txt"
crlGet="-L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab"
aptYesUnth="-y --allow-unauthenticated"
filIncB="barracuda.sh.cnf"
filIncO="octopus.sh.cnf"
octName="OCTOPUS.sh.txt"
bldPth="/opt/tmp/boa"
pthIncB="lib/settings/${filIncB}"
pthIncO="lib/settings/${filIncO}"
rgUrl="https://raw.githubusercontent.com/omega8cc/boa"
vBs="/var/backups"

_TODAY=$(date +%y%m%d 2>&1)
_TODAY=${_TODAY//[^0-9]/}
_NOW=$(date +%y%m%d-%H%M%S 2>&1)
_NOW=${_NOW//[^0-9-]/}
_CHECK_HOST=$(uname -n 2>&1)
_LOG_DIR="${vBs}/reports/up/$(basename "$0")/${_TODAY}"
_UP_LOG="${_LOG_DIR}/$(basename "$0")-up-${_NOW}.log"
_VMFAMILY=XEN
_VM_TEST=$(uname -a 2>&1)
if [[ "${_VM_TEST}" =~ "-beng" ]]; then
  _VMFAMILY="VS"
fi

###
### Avoid too many questions
###
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi

clean_pid_exit() {
  [ -e "/var/run/boa_wait.pid" ] && rm -f /var/run/boa_wait.pid
  [ -e "/var/run/boa_run.pid" ] && rm -f /var/run/boa_run.pid
  service cron start &> /dev/null
  exit 1
}

os_detection_minimal() {
  _APT_UPDATE="apt-get update"
  _THIS_RV=$(lsb_release -sc 2>&1)
  _OS_LIST="daedalus chimaera beowulf buster bullseye bookworm"
  for e in ${_OS_LIST}; do
    if [ "${e}" = "${_THIS_RV}" ]; then
      _APT_UPDATE="apt-get update --allow-releaseinfo-change"
    fi
  done
}

apt_clean_update() {
  apt-get clean -qq 2> /dev/null
  rm -rf /var/lib/apt/lists/* &> /dev/null
  ${_APT_UPDATE} -qq 2> /dev/null
}

check_ifnames() {
  _SYS_IFNAMES=$(grep GRUB_CMDLINE_LINUX= /etc/default/grub | grep "net.ifnames=0" 2>&1)
  if [ -e "/etc/default/grub" ] && [[ ! "${_SYS_IFNAMES}" =~ "net.ifnames=0" ]]; then
    echo
    echo "ERROR: BOA requires the classic network interface naming convention."
    echo "ERROR: Typically it should be eth0 and not ens3 systemd convention."
    echo
    echo "RDOCS: Please study recommended docs before introducing any changes!"
    echo
    echo "RDOCS:   https://bit.ly/boa-network-config"
    echo
    echo "HINTS: You can check your active network interfaces with command:"
    echo "HINTS:   ip addr show"
    echo "HINTS: to make sure you are in fact using supported naming convention."
    echo "HINTS: You may see names like eth0, eth1, eth2 -- they are supported."
    echo
    echo "HINTS: Add these two required parameters to GRUB_CMDLINE_LINUX variable:"
    echo "HINTS:   net.ifnames=0 biosdevname=0"
    echo "HINTS: in your /etc/default/grub configuration and then activate with"
    echo "HINTS:   grub-mkconfig -o /boot/grub/grub.cfg"
    echo "HINTS: Once this is done, reboot your system and run this installer again."
    echo
    echo "Bye"
    echo
    clean_pid_exit
  fi
}

check_root_direct() {
  _U_TEST=DENY
  [ "${SUDO_USER}" ] && _U_TEST_SDO=${SUDO_USER} || _U_TEST_SDO=`whoami`
  _U_TEST_WHO=$(who am i | awk '{print $1}' 2>&1)
  _U_TEST_LNE=$(logname 2>&1)
  if [ "${_U_TEST_SDO}" = "root" ] || [ "${_U_TEST_LNE}" = "root" ]; then
    if [ -z "${_U_TEST_WHO}" ]; then
      _U_TEST=ALLOW
      ### normal for root scripts running from cron
    else
      if [ "${_U_TEST_WHO}" = "root" ]; then
        _U_TEST=ALLOW
      fi
    fi
  fi
  if [ "${_U_TEST}" = "DENY" ]; then
    echo
    echo "ERROR: This script must be run as root directly,"
    echo "ERROR: without sudo/su switch from regular system user"
    echo "ERROR: Please add and test your SSH (RSA) keys for root account"
    echo "ERROR: with direct access before trying again"
    echo
    echo "HINT:  You can always restrict access later, or"
    echo "       allow only SSH (RSA) keys for root with directive"
    echo "         PermitRootLogin without-password"
    echo "       in the /usr/etc/sshd_config file"
    echo "Bye"
    clean_pid_exit
  fi
  check_ifnames
}

check_root_keys_pwd() {
  _S_TEST=$(grep "root:\*:" /etc/shadow 2>&1)
  _R_TEST=CHECK
  if [ -e "/root/.ssh/authorized_keys" ]; then
    _R_TEST=$(grep "ssh-rsa" /root/.ssh/authorized_keys 2>&1)
  fi
  if [[ ! "${_S_TEST}" =~ "root:" ]] \
    && [[ ! "${_R_TEST}" =~ "ssh-rsa" ]]; then
    echo
    echo "ERROR: BOA requires working SSH (RSA) keys for system root present"
    echo "ERROR: Please add and test your SSH (RSA) keys for root account"
    echo "ERROR: before trying again"
    echo
    echo "HINTS: Run this command on your local PC machine:"
    echo "HINTS:   ssh-keygen -b 4096 -t rsa -N '' -f ~/.ssh/id_rsa"
    echo "HINTS: Then copy the ~/.ssh/id_rsa.pub file from your PC"
    echo "HINTS: to ~/.ssh/authorized_keys file on the server"
    echo "HINTS: Make sure the key is not split into more than 1 line"
    echo "HINTS: Remember to run: chmod 600 ~/.ssh/authorized_keys"
    echo
    echo "Bye"
    echo
    clean_pid_exit
  fi
}

check_sql_access() {
  if [ -e "/root/.my.pass.txt" ] && [ -e "/root/.my.cnf" ]; then
    _SQL_PSWD=$(cat /root/.my.pass.txt 2>&1)
    _SQL_PSWD=$(echo -n ${_SQL_PSWD} | tr -d "\n" 2>&1)
    _IS_SYNC_SQL_PSWD=$(grep "${_SQL_PSWD}" /root/.my.cnf 2>&1)
  else
    echo "ALERT: /root/.my.cnf or /root/.my.pass.txt not found."
    echo "ALERT: Please fix this before trying again, giving up."
    echo "Bye"
    echo " "
    clean_pid_exit
  fi
  if [ -z "${_IS_SYNC_SQL_PSWD}" ] \
    || [[ ! "${_IS_SYNC_SQL_PSWD}" =~ "password=${_SQL_PSWD}" ]]; then
    echo "ALERT: SQL password is out of sync between"
    echo "ALERT: /root/.my.cnf and /root/.my.pass.txt"
    echo "ALERT: Please fix this before trying again, giving up."
    echo "Bye"
    echo " "
    clean_pid_exit
  else
    _IS_MYSQLD_RUNNING=$(ps aux | grep '[m]ysqld' | awk '{print $2}' 2>&1)
    if [ -z "${_IS_MYSQLD_RUNNING}" ]; then
      echo "ALERT: SQL server on this system is not running at all."
      echo "ALERT: Please fix this before trying again, giving up."
      echo "Bye"
      echo " "
      clean_pid_exit
    else
      _MYSQL_CONN_TEST=$(mysql -u root -e "status" 2>&1)
      if [ -z "${_MYSQL_CONN_TEST}" ] \
        || [[ "${_MYSQL_CONN_TEST}" =~ "Access denied" ]]; then
        echo "ALERT: SQL password in /root/.my.cnf does not work."
        echo "ALERT: Please fix this before trying again, giving up."
        echo "Bye"
        echo " "
        clean_pid_exit
      fi
    fi
  fi
}
check_sql_access

fix_dns_settings() {
  dnsLi="/root/.local.dns.IP.list"
  mkdir -p ${vBs}
  rm -f ${vBs}/resolv.conf.tmp
  if [ -e "/etc/resolv.conf" ]; then
    if [ -L "/etc/resolv.conf" ]; then
      rslvT=`readlink -n /etc/resolv.conf`
      if [ ! -e "${rslvT}" ]; then
        rm -f /etc/resolv.conf
      fi
    fi
    if [ -e "/etc/resolv.conf" ]; then
      cp -a /etc/resolv.conf ${vBs}/resolv.conf.tmp
    fi
  fi
  if [ ! -e "${vBs}/resolv.conf.tmp" ]; then
    echo "nameserver 1.1.1.1" >${vBs}/resolv.conf.tmp
    echo "nameserver 1.0.0.1" >>${vBs}/resolv.conf.tmp
  fi
  if [ ! -e "${vBs}/resolv.conf.vanilla" ]; then
    for Pre in `ls -la ${vBs}/resolv.conf.pre-*`; do
      if [ -e "${Pre}" ] && [ -f "${Pre}" ] && [ ! -L "${Pre}" ]; then
        cp -a ${Pre} ${vBs}/resolv.conf.vanilla
      fi
    done
  fi
  if [ ! -e "${vBs}/resolv.conf.vanilla" ] \
    && [ -e "${vBs}/resolv.conf.tmp" ]; then
    if [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${vBs}/resolv.conf.tmp /etc/resolv.conf
      cp -a ${vBs}/resolv.conf.tmp ${vBs}/resolv.conf.vanilla
    fi
  fi
  sed -i "/^$/d" ${vBs}/resolv.conf.vanilla &> /dev/null
  if [ -e "${vBs}/resolv.conf.vanilla" ]; then
    if [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${vBs}/resolv.conf.vanilla /etc/resolv.conf
    fi
  else
    if [ -e "${vBs}/resolv.conf.tmp" ] \
      && [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${vBs}/resolv.conf.tmp /etc/resolv.conf
    fi
  fi
  if [ -e "/etc/pdnsd.conf" ]; then
    if [ -e "${dnsLi}" ]; then
      sed -i "s/.*127.0.0.1.*//g; s/ *$//g; /^$/d" ${dnsLi}
      wait
      sed -i "s/.*Dynamic.*//g; s/ *$//g; /^$/d"   ${dnsLi}
      wait
      _BROKEN_DNS_TEST_X=$(grep "\." ${dnsLi} 2>&1)
      if [ -z "${_BROKEN_DNS_TEST_X}" ]; then
        echo "        label = \"cloudflare-servers\";" > ${dnsLi}
        echo "        ip=1.1.1.1;" >> ${dnsLi}
        echo "        ip=1.0.0.1;" >> ${dnsLi}
      fi
    fi
    _CUSTOM_DNS_TEST=$(grep 1.1.1.1 /etc/pdnsd.conf 2>&1)
    _BROKEN_DNS_CONF=$(grep "ip=Dynamic" /etc/pdnsd.conf 2>&1)
    _MISSING_DNS_TEST=$(grep "ip=" /etc/pdnsd.conf 2>&1)
    if [[ "${_CUSTOM_DNS_TEST}" =~ "1.1.1.1" ]] \
      || [ ! -e "${dnsLi}" ] \
      || [ -e "/root/.use.default.nameservers.cnf" ] \
      || [ -e "/root/.use.local.nameservers.cnf" ] \
      || [[ "${_BROKEN_DNS_CONF}" =~ "Dynamic" ]] \
      || [[ -z "${_MISSING_DNS_TEST}" ]]; then
      echo "        label = \"cloudflare-servers\";" > ${dnsLi}
      for _IP in `cat /etc/resolv.conf \
        | sed 's/.*127.0.0.1.*//g; s/.*search.*//g; s/.*Dynamic.*//g' \
        | cut -d ' ' -f2 \
        | sort \
        | uniq`;do echo "        ip=${_IP};" >> ${dnsLi};done
      wait
      sed -i "s/ip=.*//g; s/ *$//g; /^$/d" /etc/pdnsd.conf
      wait
      sed -i "s/.*127.0.0.1.*//g; s/ *$//g; /^$/d" ${dnsLi}
      wait
      sed -i "s/.*Dynamic.*//g; s/ *$//g; /^$/d"   ${dnsLi}
      wait
      _BROKEN_DNS_TEST_Y=$(grep "\." ${dnsLi} 2>&1)
      if [ -z "${_BROKEN_DNS_TEST_Y}" ]; then
         echo "        ip=1.1.1.1;" >> ${dnsLi}
         echo "        ip=1.0.0.1;" >> ${dnsLi}
      fi
      ### echo debug dns A
      _DNS_TPL_TEST_GE=$(grep "google-servers" /etc/pdnsd.conf 2>&1)
      _DNS_TPL_TEST_CF=$(grep "cloudflare-servers" /etc/pdnsd.conf 2>&1)
      _DNS_RGX_TEST=$(grep "cloudflare-servers" /root/.local.dns.IP.list 2>&1)
      if [[ "${_DNS_TPL_TEST_CF}" =~ "cloudflare-servers" ]] \
        && [[ "${_DNS_RGX_TEST}" =~ "cloudflare-servers" ]]; then
        sed -i '/        label = \"cloudflare-servers\";/ {r /root/.local.dns.IP.list
d;};' /etc/pdnsd.conf
        wait
      fi
      if [[ "${_DNS_TPL_TEST_GE}" =~ "google-servers" ]] \
        && [[ "${_DNS_RGX_TEST}" =~ "cloudflare-servers" ]]; then
        sed -i '/        label = \"google-servers\";/ {r /root/.local.dns.IP.list
d;};' /etc/pdnsd.conf
        wait
      fi
      resolvconf -u         &> /dev/null
      service pdnsd restart &> /dev/null
      pdnsd-ctl empty-cache &> /dev/null
    fi
  fi
}

check_dns_settings() {
  if [ -e "/root/.use.default.nameservers.cnf" ]; then
    _USE_DEFAULT_DNS=YES
    [ -e "/root/.local.dns.IP.list" ] && rm -f /root/.local.dns.IP.list
  fi
  if [ -e "/root/.use.local.nameservers.cnf" ]; then
    _USE_PROVIDER_DNS=YES
  else
    _REMOTE_DNS_TEST=$(host files.aegir.cc 1.1.1.1 -w 10 2>&1)
  fi
  if [[ "${_REMOTE_DNS_TEST}" =~ "no servers could be reached" ]] \
    || [[ "${_REMOTE_DNS_TEST}" =~ "Host files.aegir.cc not found" ]] \
    || [ "${_USE_DEFAULT_DNS}" = "YES" ] \
    || [ "${_USE_PROVIDER_DNS}" = "YES" ]; then
    if [ "${_USE_DEFAULT_DNS}" = "YES" ] \
      || [ "${_USE_PROVIDER_DNS}" = "YES" ] \
      || [ ! -e "${vBs}/resolv.conf.vanilla" ]; then
      fix_dns_settings
      if [ -e "/etc/init.d/postfix" ]; then
        service postfix restart &> /dev/null
      fi
    fi
  fi
}

barracuda_downgrade_protection() {
  if [ "${cmmand}" != "php-idle" ] && [ -e "/var/log/barracuda_log.txt" ]; then
    if [ "${cmmand}" = "up-lite" ] \
      && [[ "${_SERIES_TEST}" =~ "Barracuda ${rlsn}-pro" ]]; then
      _SERIES_TEST=$(cat /var/log/barracuda_log.txt 2>&1)
      echo
      echo "ERROR: Your system has been already upgraded to ${rlsn}-pro"
      echo "You can not downgrade back to previous/older/lite BOA version"
      echo "Please use 'barracuda up-pro system' to upgrade this server"
      echo "Bye"
      echo
      clean_pid_exit
    fi
    if [ "${cmmand}" != "up-dev" ] \
      && [ "${cmmand}" != "up-pro" ] \
      && [ "${cmmand}" != "up-lite" ] \
      && [ "${cmmand}" != "help" ]; then
      echo
      echo "Sorry, you are trying not supported command.."
      echo "Please use supported command to upgrade this server"
      echo "Display supported commands with: $(basename "$0") help"
      echo "Bye"
      echo
      clean_pid_exit
    fi
  fi
}

send_report() {
  if [ -e "${barCnf}" ]; then
    if [ -e "/root/.auto.up.cnf" ] \
      || [ -e "/root/.host8.cnf" ] \
      || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
      || [[ "${_CHECK_HOST}" =~ ".aegir.cc"($) ]] \
      || [[ "${_CHECK_HOST}" =~ ".o8.io"($) ]] \
      || [[ "${_CHECK_HOST}" =~ ".boa.io"($) ]]; then
      _MY_EMAIL="$(basename "$0")@omega8.cc"
    fi
    if [ ! -z "${_MY_EMAIL}" ]; then
      repSub="Successful Barracuda upgrade"
      repSub="REPORT: ${repSub} on ${_CHECK_HOST}"
      repSub=$(echo -n ${repSub} | fmt -su -w 2500 2>&1)
      cat ${_UP_LOG} | mail -e -s "${repSub} at ${_NOW}" ${_MY_EMAIL}
      echo "${repSub} sent to ${_MY_EMAIL}"
    fi
  fi
}

send_alert() {
  if [ -e "${barCnf}" ]; then
    if [ -e "/root/.auto.up.cnf" ] \
      || [ -e "/root/.host8.cnf" ] \
      || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
      || [[ "${_CHECK_HOST}" =~ ".aegir.cc"($) ]] \
      || [[ "${_CHECK_HOST}" =~ ".o8.io"($) ]] \
      || [[ "${_CHECK_HOST}" =~ ".boa.io"($) ]]; then
      _MY_EMAIL="$(basename "$0")@omega8.cc"
    fi
    if [ ! -z "${_MY_EMAIL}" ]; then
      repSub="${_ALERT_MSG} on ${_CHECK_HOST}"
      repSub=$(echo -n ${repSub} | fmt -su -w 2500 2>&1)
      cat ${_UP_LOG} | mail -e -s "${repSub} at ${_NOW}" ${_MY_EMAIL}
      echo "${repSub} sent to ${_MY_EMAIL}"
    fi
  fi
}

check_report() {
  sed -i "s/^_AWS_.*//g"         ${_UP_LOG}
  wait
  sed -i "s/^_NEWRELIC_KEY.*//g" ${_UP_LOG}
  wait
  sed -i "s/^_SCOUT_KEY.*//g"    ${_UP_LOG}
  wait
  sed -i "/^$/d"                 ${_UP_LOG}
  wait
  _SEND_ALERT=NO
  _RESULT_TEST_OK=$(grep "INFO: Test OK" ${_UP_LOG} 2>&1)
  _RESULT_TEST_CARD=$(grep "CARD: Now charging" ${_UP_LOG} 2>&1)
  _RESULT_REBOOT=$(grep "Please reboot this server" ${_UP_LOG} 2>&1)
  _RESULT_ENJOY=$(grep "Enjoy your Aegir Hosting System" ${_UP_LOG} 2>&1)
  _RESULT_APT_FAIL=$(grep "Displaying the last 15 lines" ${_UP_LOG} 2>&1)
  _RESULT_ALRT=$(grep "ALRT" ${_UP_LOG} 2>&1)
  _RESULT_FATAL=$(grep "FATAL ERROR" ${_UP_LOG} 2>&1)
  if [[ "${_RESULT_TEST_OK}" =~ "INFO: Test OK" ]] \
    || [[ "${_RESULT_TEST_CARD}" =~ "CARD: Now charging" ]] \
    || [[ "${_RESULT_REBOOT}" =~ "Please reboot" ]] \
    || [[ "${_RESULT_ENJOY}" =~ "Enjoy your Aegir" ]]; then
    _DO_NOTHING=YES
  else
    _SEND_ALERT=YES
    _ALERT_MSG="ALERT: Failed (msg) Barracuda upgrade"
  fi
  if [[ "${_RESULT_APT_FAIL}" =~ "Displaying the last 15 lines" ]]; then
    _SEND_ALERT=YES
    _ALERT_MSG="ALERT: Failed (apt) Barracuda upgrade"
  fi
  if [[ "${_RESULT_ALRT}" =~ "ALRT" ]]; then
    _SEND_ALERT=YES
    _CHECK_KERNEL=$(grep "Your OS kernel has been upgraded" ${_UP_LOG} 2>&1)
    _CHECK_KSPLICE=$(grep "Ksplice rebootless kernel" ${_UP_LOG} 2>&1)
    if [[ "${_CHECK_KERNEL}" =~ "OS kernel" ]]; then
      if [[ "${_CHECK_KSPLICE}" =~ "rebootless" ]]; then
        _ALERT_MSG="REPORT: Your OS kernel has been upgraded"
      else
        _ALERT_MSG="REBOOT: Your OS kernel has been upgraded"
      fi
    else
      _ALERT_MSG="ALERT: Failed (alrt) Barracuda upgrade"
    fi
  fi
  if [[ "${_RESULT_FATAL}" =~ "FATAL ERROR" ]]; then
    _SEND_ALERT=YES
    _ALERT_MSG="ALERT: Failed (aborted) Barracuda upgrade"
  fi
  if [ "${_SEND_ALERT}" = "YES" ]; then
    send_alert
  else
    send_report
  fi
}

check_php_cli() {
  _PHP_CHECK=$(readlink -n /usr/bin/php 2>&1)
  if [ ! -x "${_PHP_CHECK}" ]; then
    if [ "${_PHP_CLI_VERSION}" = "7.4" ]; then
      _PHP_CLI_PATH="/opt/php74/bin/php"
    elif [ "${_PHP_CLI_VERSION}" = "8.0" ]; then
      _PHP_CLI_PATH="/opt/php80/bin/php"
    elif [ "${_PHP_CLI_VERSION}" = "8.1" ]; then
      _PHP_CLI_PATH="/opt/php81/bin/php"
    elif [ "${_PHP_CLI_VERSION}" = "8.2" ]; then
      _PHP_CLI_PATH="/opt/php82/bin/php"
    else
      _PHP_CLI_PATH=""
    fi
    if [ -x "${_PHP_CLI_PATH}" ]; then
      _USE_PHP_CLI_PATH="${_PHP_CLI_PATH}"
    else
      if  [ -x "/opt/php74/bin/php" ]; then
        _USE_PHP_CLI_PATH="/opt/php74/bin/php"
      elif  [ -x "/opt/php80/bin/php" ]; then
        _USE_PHP_CLI_PATH="/opt/php80/bin/php"
      elif  [ -x "/opt/php81/bin/php" ]; then
        _USE_PHP_CLI_PATH="/opt/php81/bin/php"
      elif  [ -x "/opt/php82/bin/php" ]; then
        _USE_PHP_CLI_PATH="/opt/php82/bin/php"
      fi
    fi
    if [ -x "${_USE_PHP_CLI_PATH}" ]; then
      rm -f /usr/bin/php
      rm -f /usr/bin/php-cli
      ln -sfn ${_USE_PHP_CLI_PATH} /usr/bin/php
      ln -sfn ${_USE_PHP_CLI_PATH} /usr/bin/php-cli
    else
      echo "ERROR: I can not find PHP-CLI anywhere!"
      echo "ERROR: BOA requires PHP 7.4 or newer"
      clean_pid_exit
    fi
  fi
}

up_action() {
  if [ -e "${vBs}/${barName}" ] && [ -e "${barCnf}" ]; then
    if [ ! -z "${rkey}" ]; then
      if [ "${rkey}" = "php-82" ] || [ "${rkey}" = "php-8.2" ]; then
        phpS="8.2"
      elif [ "${rkey}" = "php-81" ] || [ "${rkey}" = "php-8.1" ]; then
        phpS="8.1"
      elif [ "${rkey}" = "php-74" ] || [ "${rkey}" = "php-7.4" ]; then
        phpS="7.4"
      elif [ "${rkey}" = "php-all" ] || [ "${rkey}" = "php-min" ]; then
        phpS="MIN"
      elif [ "${rkey}" = "php-max" ]; then
        phpS="MAX"
      elif [ "${rkey}" = "nodns" ]; then
        sed -i "s/^_SMTP_RELAY_TEST=.*/_SMTP_RELAY_TEST=NO/g"  ${vBs}/${barName}
        wait
        sed -i "s/^_DNS_SETUP_TEST=.*/_DNS_SETUP_TEST=NO/g"    ${vBs}/${barName}
        wait
        sed -i "s/^_SMTP_RELAY_TEST=.*/_SMTP_RELAY_TEST=NO/g"          ${barCnf}
        wait
        sed -i "s/^_DNS_SETUP_TEST=.*/_DNS_SETUP_TEST=NO/g"            ${barCnf}
        wait
      else
        _L_KEY=$(echo ${#rkey} 2>&1)
        if [ ! -z "${_L_KEY}" ] && [ "${_L_KEY}" = "40" ]; then
          sed -i "s/^_NEWRELIC.*/_NEWRELIC_KEY=\"${rkey}\"/g"  ${vBs}/${barName}
          wait
          sed -i "s/^_NEWRELIC.*/_NEWRELIC_KEY=\"${rkey}\"/g"          ${barCnf}
          wait
        fi
      fi

      ### Debugging
      if [ "$debug" = "debug" ]; then
        echo rkey is ${rkey}
        echo waiting 8 seconds...
        sleep 8
      fi
      ### Debugging

    fi
    ### Make sure that _PHP_SINGLE_INSTALL is set in ${barCnf}
    if [ "${phpS}" = "8.2" ] \
      || [ "${phpS}" = "8.1" ] \
      || [ "${phpS}" = "7.4" ]; then
      _PHP_SINGLE_INSTALL_TEST=$(grep _PHP_SINGLE_INSTALL ${barCnf} 2>&1)
      if [[ "${_PHP_SINGLE_INSTALL_TEST}" =~ "_PHP_SINGLE_INSTALL" ]]; then
        sed -i "s/^_PHP_SINGLE.*/_PHP_SINGLE_INSTALL=${phpS}/g" ${barCnf}
        wait
      else
        echo "_PHP_SINGLE_INSTALL=${phpS}" >> ${barCnf}
      fi
    fi
    ### Make sure that _PHP_SINGLE_INSTALL takes precedence
    if [ ! -z "${phpS}" ]; then
      if [ "${phpS}" = "8.2" ] \
        || [ "${phpS}" = "8.1" ] \
        || [ "${phpS}" = "7.4" ]; then

        ### Debugging
        if [ "$debug" = "debug" ]; then
          echo _PHP_MULTI_INSTALL is ${phpS}
          echo _PHP_SINGLE_INSTALL is ${phpS}
          echo waiting 8 seconds...
          sleep 8
        fi
        ###

        sleep 3
        if [ -e "${vBs}/${filIncB}" ]; then
          sed -i "s/^_PHP_SIN.*/_PHP_SINGLE_INSTALL=${phpS}/g" ${vBs}/${filIncB}
          wait
          sed -i "s/^_PHP_MUL.*/_PHP_MULTI_INSTALL=${phpS}/g"  ${vBs}/${filIncB}
          wait
          sed -i "s/^_PHP_CLI_V.*/_PHP_CLI_VERSION=${phpS}/g"  ${vBs}/${filIncB}
          wait
          sed -i "s/^_PHP_FPM_V.*/_PHP_FPM_VERSION=${phpS}/g"  ${vBs}/${filIncB}
        fi
        ### Legacy method
        sed -i "s/^_PHP_SINGL.*/_PHP_SINGLE_INSTALL=${phpS}/g" ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_MULTI.*/_PHP_MULTI_INSTALL=${phpS}/g"  ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_CLI_V.*/_PHP_CLI_VERSION=${phpS}/g"    ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_FPM_V.*/_PHP_FPM_VERSION=${phpS}/g"    ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_SINGL.*/_PHP_SINGLE_INSTALL=${phpS}/g"         ${barCnf}
        wait
        sed -i "s/^_PHP_MULTI.*/_PHP_MULTI_INSTALL=${phpS}/g"          ${barCnf}
        wait
        sed -i "s/^_PHP_CLI_V.*/_PHP_CLI_VERSION=${phpS}/g"            ${barCnf}
        wait
        sed -i "s/^_PHP_FPM_V.*/_PHP_FPM_VERSION=${phpS}/g"            ${barCnf}
        wait
        sed -i "s/^_PHP_CLI_V.*/_PHP_CLI_VERSION=${phpS}/g" \
          /root/.*.octopus.cnf &> /dev/null
        wait
        sed -i "s/^_PHP_FPM_V.*/_PHP_FPM_VERSION=${phpS}/g" \
          /root/.*.octopus.cnf &> /dev/null
        wait
        sleep 3

        ### Debugging
        if [ "$debug" = "debug" ]; then
          cat ${barCnf}
          echo
          echo test fin!
          clean_pid_exit
        fi
        ### Debugging

        if [ -e "/data/disk" ] && [ -e "/data/conf/global.inc" ]; then
          for Ctrl in `find /data/disk/*/log/fpm.txt \
            -maxdepth 0 -mindepth 0 | sort`; do
            echo ${phpS} > ${Ctrl}
          done
          for Ctrl in `find /data/disk/*/log/cli.txt \
            -maxdepth 0 -mindepth 0 | sort`; do
            echo ${phpS} > ${Ctrl}
          done
        fi
      elif [ "${phpS}" = "MIN" ] || [ "${phpS}" = "MAX" ]; then
        if [ "${phpS}" = "MAX" ]; then
          phpM="5.6 7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2"
        else
          phpM="7.4 8.1 8.2"
        fi
        phpS="8.1"

        ### Debugging
        if [ "$debug" = "debug" ]; then
          echo _PHP_MULTI_INSTALL is ${phpM}
          echo _PHP_SINGLE_INSTALL is ${phpS}
          echo waiting 8 seconds...
          sleep 8
        fi
        ###

        sleep 3
        if [ -e "${vBs}/${filIncB}" ]; then
        sed -i "s/^_PHP_SINGLE.*/_PHP_SINGLE_INSTALL=/g"       ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_MU.*/_PHP_MULTI_INSTALL=\"${phpM}\"/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_CLI_V.*/_PHP_CLI_VERSION=${phpS}/g"    ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_FPM_V.*/_PHP_FPM_VERSION=${phpS}/g"    ${vBs}/${filIncB}
        wait
        fi
        ### Legacy method
        sed -i "s/^_PHP_SINGLE.*/_PHP_SINGLE_INSTALL=/g"       ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_MU.*/_PHP_MULTI_INSTALL=\"${phpM}\"/g" ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_CLI_V.*/_PHP_CLI_VERSION=${phpS}/g"    ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_FPM_V.*/_PHP_FPM_VERSION=${phpS}/g"    ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_SINGL.*/_PHP_SINGLE_INSTALL=/g"                ${barCnf}
        wait
        sed -i "s/^_PHP_MULTI.*/_PHP_MULTI_INSTALL=\"${phpM}\"/g"      ${barCnf}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=${phpS}/g"     ${barCnf}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=${phpS}/g"     ${barCnf}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=${phpS}/g" \
          /root/.*.octopus.cnf &> /dev/null
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=${phpS}/g" \
          /root/.*.octopus.cnf &> /dev/null
        wait
        sleep 3

        ### Debugging
        if [ "$debug" = "debug" ]; then
          cat ${barCnf}
          echo
          echo test fin!
          clean_pid_exit
        fi
        ### Debugging

        if [ -e "/data/disk" ] && [ -e "/data/conf/global.inc" ]; then
          for Ctrl in `find /data/disk/*/log/fpm.txt \
            -maxdepth 0 -mindepth 0 | sort`; do
            echo ${phpS} > ${Ctrl}
          done
          for Ctrl in `find /data/disk/*/log/cli.txt \
            -maxdepth 0 -mindepth 0 | sort`; do
            echo ${phpS} > ${Ctrl}
          done
        fi
      fi
    fi
    if [ -e "/root/.auto.up.cnf" ] \
      || [ -e "/root/.host8.cnf" ] \
      || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
      || [[ "${_CHECK_HOST}" =~ ".boa.io"($) ]] \
      || [[ "${_CHECK_HOST}" =~ ".o8.io"($) ]] \
      || [[ "${_CHECK_HOST}" =~ ".aegir.cc"($) ]]; then
      _DO_NOTHING=YES
    else
      mkdir -p ${vBs}/old-firewall-monitor/${_NOW}
      mv -f /var/xdrago/monitor/*.log \
        ${vBs}/old-firewall-monitor/${_NOW}/ &> /dev/null
      rm -f /var/xdrago/monitor/* &> /dev/null
    fi
    if [ "${cmmand}" = "up-dev" ] \
      || [ "${cmmand}" = "up-pro" ] \
      || [ "${cmmand}" = "up-lite" ] \
      || [ "${cmmand}" = "php-idle" ]; then
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${brnch}/g"        ${vBs}/${filIncB}
      wait
      sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${tRee}/g"   ${vBs}/${filIncB}
      wait
      sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${tRee}/g"   ${vBs}/${filIncB}
      wait
      sed -i "s/^_X_VERSION=.*/_X_VERSION=${rlse}/g"           ${vBs}/${filIncB}
      wait
      sed -i "s/^_REDIS_MAJOR_RELEASE=.*/_REDIS_MAJOR_RELEASE=7/g"     ${barCnf}
      wait
    else
      if [ -e "${vBs}/${filIncB}" ]; then
        sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${brnch}/g"      ${vBs}/${filIncB}
        wait
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${tRee}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${rlse}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${rlse}/g"         ${vBs}/${filIncB}
        wait
      fi
      ### Legacy method
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${brnch}/g"        ${vBs}/${barName}
      wait
      sed -i "s/^_BRANCH_PROV.*/_BRANCH_PROVISION=${brnch}/g"  ${vBs}/${barName}
      wait
      if [ "${cmmand}" = "up-2.2" ]; then
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${lgcA}/g" ${vBs}/${barName}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${lgcA}/g" ${vBs}/${barName}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${lgcA}/g"         ${vBs}/${barName}
        wait
      elif [ "${cmmand}" = "up-2.3" ]; then
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${lgcB}/g" ${vBs}/${barName}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${lgcB}/g" ${vBs}/${barName}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${lgcB}/g"         ${vBs}/${barName}
        wait
      elif [ "${cmmand}" = "up-2.4" ]; then
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${lgcC}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${lgcC}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${lgcC}/g"         ${vBs}/${filIncB}
        wait
      elif [ "${cmmand}" = "up-3.2" ]; then
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${lgcD}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${lgcD}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${lgcD}/g"         ${vBs}/${filIncB}
        wait
      else
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${tRee}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${rlse}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${rlse}/g"         ${vBs}/${filIncB}
        wait
      fi
    fi
    if [ "${cmmand}" = "up-dev" ] \
      || [ "${cmmand}" = "up-pro" ] \
      || [ "${cmmand}" = "up-lite" ] \
      || [ "${cmmand}" = "php-idle" ]; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${brnch}/g"        ${vBs}/${filIncB}
      wait
    elif [ "${cmmand}" = "up-cluster" ]; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${cluster}/g"      ${vBs}/${filIncB}
      wait
    else
      if [ -e "${vBs}/${filIncB}" ]; then
        sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${brnch}/g"      ${vBs}/${filIncB}
        wait
      fi
      ### Legacy method
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${brnch}/g"        ${vBs}/${barName}
      wait
    fi
    if [ -e "${vBs}/${filIncB}" ]; then
      sed -i "s/^_AUTOPILOT=NO/_AUTOPILOT=YES/g"               ${vBs}/${filIncB}
      wait
      sed -i "s/^_SMTP_RELAY_TEST=YES/_SMTP_RELAY_TEST=NO/g"   ${vBs}/${filIncB}
      wait
    fi
    ### Legacy method
    sed -i "s/^_AUTOPILOT=NO/_AUTOPILOT=YES/g"                 ${vBs}/${barName}
    wait
    sed -i "s/^_SMTP_RELAY_TEST=YES/_SMTP_RELAY_TEST=NO/g"     ${vBs}/${barName}
    wait
    ### Force HTTP/2 or SPDY plus PFS on supported systems
    sed -i "s/^_NGINX_SPDY=.*/_NGINX_SPDY=YES/g"                       ${barCnf}
    wait
    sed -i "s/^_NGINX_FORWARD.*/_NGINX_FORWARD_SECRECY=YES/g"          ${barCnf}
    wait
    ### Force Redis SOCKET mode if PORT was used before
    sed -i "s/^_REDIS_LISTEN_MODE=PORT/_REDIS_LISTEN_MODE=SOCKET/g"    ${barCnf}
    wait
    ### Force latest OpenSSH from sources on supported systems
    sed -i "s/^_SSH_FROM_SOURCES=.*/_SSH_FROM_SOURCES=YES/g"           ${barCnf}
    wait
    if [ "${sql}" = "percona" ] \
      || [ "${rkey}" = "percona" ] \
      || [ "${debug}" = "percona" ]; then
      sed -i "s/^_DB_SERIES=.*/_DB_SERIES=5.7/g"               ${vBs}/${filIncB}
      wait
      sed -i "s/^_DB_SERVER=.*/_DB_SERVER=Percona/g"           ${vBs}/${filIncB}
      wait
      sed -i "s/^_DB_SERIES=.*/_DB_SERIES=5.7/g"                       ${barCnf}
      wait
      sed -i "s/^_DB_SERVER=.*/_DB_SERVER=Percona/g"                   ${barCnf}
      wait
    elif [ "${sql}" = "mariadb" ] \
      || [ "${rkey}" = "mariadb" ] \
      || [ "${debug}" = "mariadb" ]; then
      sed -i "s/^_DB_SERIES=.*/_DB_SERIES=10.2/g"              ${vBs}/${filIncB}
      wait
      sed -i "s/^_DB_SERVER=.*/_DB_SERVER=MariaDB/g"           ${vBs}/${filIncB}
      wait
      sed -i "s/^_DB_SERIES=.*/_DB_SERIES=10.2/g"                      ${barCnf}
      wait
      sed -i "s/^_DB_SERVER=.*/_DB_SERVER=MariaDB/g"                   ${barCnf}
      wait
    fi
    if [ -e "/root/.auto.up.cnf" ] \
      || [ -e "/root/.host8.cnf" ] \
      || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
      || [[ "${_CHECK_HOST}" =~ ".boa.io"($) ]] \
      || [[ "${_CHECK_HOST}" =~ ".o8.io"($) ]] \
      || [[ "${_CHECK_HOST}" =~ ".aegir.cc"($) ]]; then
      if [ -e "/root/.debug.cnf" ] && [ ! -e "/root/.default.cnf" ]; then
        _DO_NOTHING=YES
      else
        if [ -e "${barCnf}" ]; then
          sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"                   ${barCnf}
          wait
          sed -i "s/^_DNS_SETUP_TEST=.*/_DNS_SETUP_TEST=YES/g"         ${barCnf}
          wait
          sed -i "s/^_SMTP_RELAY_TEST=.*/_SMTP_RELAY_TEST=NO/g"        ${barCnf}
          wait
          sed -i "s/^_STRONG_PASSWORDS=.*/_STRONG_PASSWORDS=YES/g"     ${barCnf}
          wait
          sed -i "s/^_PERMISSIONS_FIX=.*/_PERMISSIONS_FIX=YES/g"       ${barCnf}
          wait
          if [ -e "/root/.mstr.clstr.cnf" ] \
            || [ -e "/root/.wbhd.clstr.cnf" ] \
            || [ -e "/root/.dbhd.clstr.cnf" ] \
            || [ -e "/root/.test.clstr.cnf" ]; then
            _DO_NOTHING=YES
          else
            sed -i "s/^_REDIS_LISTEN.*/_REDIS_LISTEN_MODE=SOCKET/g"    ${barCnf}
            wait
          fi
          if [[ "${_CHECK_HOST}" =~ ".host8." ]] \
            || [[ "${_CHECK_HOST}" =~ ".boa.io"($) ]] \
            || [[ "${_CHECK_HOST}" =~ ".o8.io"($) ]] \
            || [[ "${_CHECK_HOST}" =~ ".aegir.cc"($) ]]; then
            # if [ "${_VMFAMILY}" = "VS" ]; then
            #   sed -i "s/^_CPU_CRIT_RATIO=.*/_CPU_CRIT_RATIO=3/g"       ${barCnf}
            #   wait
            #   sed -i "s/^_CPU_MAX_RATIO=.*/_CPU_MAX_RATIO=2/g"         ${barCnf}
            #   wait
            #   sed -i "s/^_CPU_SPIDER_RATIO=.*/_CPU_SPIDER_RATIO=1/g"   ${barCnf}
            #   wait
            # fi
            if [ -e "/etc/init.d/redis-server" ]; then
              sed -i "s/^_USE_MYSQLTUNER=.*/_USE_MYSQLTUNER=NO/g"      ${barCnf}
              if [ ! -e "/root/.run-to-daedalus.cnf" ] \
                 && [ ! -e "/root/.run-to-chimaera.cnf" ] \
                 && [ ! -e "/root/.run-to-beowulf.cnf" ]; then
                if [[ "${_DB_SERVER}" =~ "Percona" ]]; then
                  _SQL_PSWD=$(cat /root/.my.pass.txt 2>&1)
                  _SQL_PSWD=$(echo -n ${_SQL_PSWD} | tr -d "\n" 2>&1)
                  mysql -u root -e "SET GLOBAL show_compatibility_56=ON;" &> /dev/null
                fi
              fi
            else
              sed -i "s/^_USE_MYSQLTUNER=.*/_USE_MYSQLTUNER=NO/g"      ${barCnf}
            fi
            wait
          fi
        fi
      fi
      sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"notify\@omega8.cc\"/g"       ${barCnf}
      wait
      _THIS_RV=$(lsb_release -sc 2>&1)
      if [ -e "/etc/default/tomcat" ] \
        && [ -e "/etc/init.d/tomcat" ] \
        && [ -e "${barCnf}" ]; then
        sed -i "s/^_TOMCAT_TO_JETTY=.*/_TOMCAT_TO_JETTY=YES/g" ${vBs}/${barName}
        wait
        sed -i "s/^_TOMCAT_TO_JETTY.*//g"                              ${barCnf}
        wait
        sed -i "/^$/d"                                                 ${barCnf}
        wait
        echo "_TOMCAT_TO_JETTY=YES" >>                                 ${barCnf}
      fi
    fi
    if [ -e "${vBs}/${barName}" ]; then
      if [ "${cmmand}" = "up-cluster" ]; then
        if [ ! -e "/var/run/mysqld/mysqld.pid" ] \
          && [ ! -e "/root/.dbhd.clstr.cnf" ] \
          && [ -e "/etc/init.d/mysql" ]; then
          [ -e "/root/.remote.db.cnf" ] && rm -f /root/.remote.db.cnf
          sleep 5
          if [ ! -e "/var/run/mysqld/mysqld.sock" ]; then
            service mysql start &> /dev/null
          fi
        fi
      fi
      if [ "${silent}" = "log" ] \
        || [ "${silent}" = "system" ] \
        || [ "${silent}" = "disable" ] \
        || [ "${silent}" = "enable" ]; then
        if [ "${_VMFAMILY}" = "VS" ]; then
          if [ -e "/root/.debug.cnf" ]; then
            n=8
          else
            n=$((RANDOM%9+2))
          fi
        else
          n=8
        fi
        if [ -e "/root/.dbhd.clstr.cnf" ]; then
          n=$((RANDOM%300+80))
        fi
        if [ "${silent}" = "log" ] \
          || [ "${silent}" = "system" ]; then
          echo
          echo "Preparing the upgrade in silent mode..."
          echo
          echo "NOTE: There will be no progress displayed in the console"
          echo "but you will receive an email once the upgrade is complete"
          echo
          sleep 5
          echo "You could watch the progress in another window with command:"
          echo "  tail -f ${_UP_LOG}"
          echo "or wait until you will see the line: BARRACUDA upgrade completed"
          echo
          echo "Waiting $n seconds..."
          sleep $n
          echo "Starting the upgrade in silent mode now..."
          echo
          sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"                   ${barCnf}
          wait
          sed -i "s/^_SPINNER=YES/_SPINNER=NO/g"               ${vBs}/${barName}
          wait
        fi
        if [ "${silent}" = "system" ]; then
          touch /var/run/boa_system_wait.pid
          if [ "${cmmand}" = "up-2.2" ] \
            || [ "${cmmand}" = "up-2.3" ]; then
            sed -i "s/^_SYS.*/_SYSTEM_UPGRADE_ONLY=YES/g"      ${vBs}/${barName}
            wait
            sed -i "s/^_SYS.*/_SYSTEM_UPGRADE_ONLY=YES/g"              ${barCnf}
            wait
          else
            if [ -e "/var/aegir/config/includes/nginx_vhost_common.conf" ] \
              && [ -d "/var/aegir/config/server_master/nginx/subdir.d" ]; then
              if [ -e "${vBs}/${filIncB}" ]; then
                sed -i "s/^_SYS.*/_SYSTEM_UPGRADE_ONLY=YES/g"  ${vBs}/${filIncB}
                wait
              fi
              ### Legacy method
              sed -i "s/^_SYS.*/_SYSTEM_UPGRADE_ONLY=YES/g"    ${vBs}/${barName}
              wait
              sed -i "s/^_SYS.*/_SYSTEM_UPGRADE_ONLY=YES/g"            ${barCnf}
              wait
            else
              if [[ "${_CHECK_HOST}" =~ "v55.lon." ]] \
                || [[ "${_CHECK_HOST}" =~ ".lon1.h" ]]; then
                if [ -e "${vBs}/${filIncB}" ]; then
                sed -i "s/^_SYS.*/_SYSTEM_UPGRADE_ONLY=YES/g"  ${vBs}/${filIncB}
                wait
                fi
                ### Legacy method
                sed -i "s/^_SYS.*/_SYSTEM_UPGRADE_ONLY=YES/g"  ${vBs}/${barName}
                wait
                sed -i "s/^_SYS.*/_SYSTEM_UPGRADE_ONLY=YES/g"          ${barCnf}
                wait
              else
                if [ -e "${vBs}/${filIncB}" ]; then
                  sed -i "s/^_SYS.*/_SYSTEM_UPGRADE_ONLY=NO/g" ${vBs}/${filIncB}
                  wait
                fi
                ### Legacy method
                sed -i "s/^_SYS.*/_SYSTEM_UPGRADE_ONLY=NO/g"   ${vBs}/${barName}
                wait
                sed -i "s/^_SYS.*/_SYSTEM_UPGRADE_ONLY=NO/g"           ${barCnf}
                wait
              fi
            fi
          fi
          sed -i "s/^_AEGIR_UPGRADE_ONLY=.*/_AEGIR_UPGRADE_ONLY=NO/g"  ${barCnf}
          wait
          bash ${vBs}/${barName} >${_UP_LOG} 2>&1
          wait
          check_report
        elif [ "${silent}" = "log" ]; then
          sed -i "s/^_SYSTEM_U.*/_SYSTEM_UPGRADE_ONLY=NO/g"            ${barCnf}
          wait
          sed -i "s/^_AEGIR_UPGRADE_ONLY=.*/_AEGIR_UPGRADE_ONLY=NO/g"  ${barCnf}
          wait
          bash ${vBs}/${barName} >${_UP_LOG} 2>&1
          wait
          check_report
        elif [ "${silent}" = "enable" ] || [ "${silent}" = "disable" ]; then
          sed -i "s/^_PHP_IDLE.*//g"                                   ${barCnf}
          wait
          if [ "${silent}" = "enable" ]; then
            echo "_PHP_IDLE=ON"                                     >> ${barCnf}
            wait
          elif [ "${silent}" = "disable" ]; then
            echo "_PHP_IDLE=OFF"                                    >> ${barCnf}
            wait
          fi
          bash ${vBs}/${barName}
          wait
        fi
      else
        sed -i "s/^_SYSTEM_U.*/_SYSTEM_UPGRADE_ONLY=NO/g"              ${barCnf}
        wait
        sed -i "s/^_AEGIR_UPGRADE_ONLY=.*/_AEGIR_UPGRADE_ONLY=NO/g"    ${barCnf}
        wait
        sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=NO/g"                      ${barCnf}
        wait
        if [ "${cmmand}" = "php-idle" ]; then
          sed -i "s/^_PHP_IDLE.*//g"                                   ${barCnf}
          wait
          if [ "${silent}" = "enable" ]; then
            echo "_PHP_IDLE=ON"                                     >> ${barCnf}
            wait
          elif [ "${silent}" = "disable" ]; then
            echo "_PHP_IDLE=OFF"                                    >> ${barCnf}
            wait
          fi
        fi
        bash ${vBs}/${barName}
        wait
      fi
    fi
  else
    echo
    echo "  ${barName} installer not available - try again later"
    echo "  Make sure that required ${barCnf} file also exists"
    echo
    clean_pid_exit
  fi
}

up_start() {
  if [ -e "/var/run/boa_run.pid" ]; then
    echo
    echo "  Another BOA installer is running probably"
    echo "  because /var/run/boa_run.pid exists"
    echo
    exit 1
  elif [ -e "/var/run/boa_wait.pid" ]; then
    echo
    echo "  Some important system task is running probably"
    echo "  because /var/run/boa_wait.pid exists"
    echo
    exit 1
  else
    touch /var/run/boa_run.pid
    touch /var/run/boa_wait.pid
    #kill -9 $(ps aux | grep '[d]aily.sh' | awk '{print $2}') &> /dev/null
    #rm -f /run/*daily*.pid
    mkdir -p ${_LOG_DIR}
    cd ${vBs}
    rm -f ${vBs}/BARRACUDA.sh*
  fi
  if [ -e "/opt/local/bin/php" ] \
    || [ -e "/opt/local/bin/pear" ] \
    || [ -e "/usr/local/bin/php" ] \
    || [ -e "/usr/local/bin/pear" ]; then
    rm -f /opt/local/bin/pear
    rm -f /opt/local/bin/php
    rm -f /usr/local/bin/pear
    rm -f /usr/local/bin/php
  fi
}

up_finish() {
  rm -f /root/.bashrc.bak*
  rm -f /root/BOA.sh*
  [ -e "/var/run/boa_run.pid" ] && rm -f /var/run/boa_run.pid
  [ -e "/var/run/boa_system_wait.pid" ] && rm -f /var/run/boa_system_wait.pid
  [ -e "/var/run/boa_wait.pid" ] && rm -f /var/run/boa_wait.pid
  [ -e "/var/run/manage_ltd_users.pid" ] && rm -f /var/run/manage_ltd_users.pid
  [ -e "/var/run/manage_rvm_users.pid" ] && rm -f /var/run/manage_rvm_users.pid
  rm -f ${vBs}/*.sh.cnf*
  rm -f ${vBs}/BARRACUDA.sh*
  if [ -e "/opt/local/bin/php" ] \
    || [ -e "/usr/local/bin/php" ]; then
    rm -f /opt/local/bin/php
    rm -f /usr/local/bin/php
  fi
  if [[ "${_CHECK_HOST}" =~ ".host8." ]] \
    || [[ "${_CHECK_HOST}" =~ ".boa.io"($) ]] \
    || [[ "${_CHECK_HOST}" =~ ".o8.io"($) ]] \
    || [[ "${_CHECK_HOST}" =~ ".aegir.cc"($) ]]; then
    service webmin stop &> /dev/null
    service usermin stop &> /dev/null
  fi
  rm -rf /opt/tmp/*
  if [ -x "/usr/sbin/csf" ] \
    && [ -e "/etc/csf/csf.deny" ] \
    && [ ! -x "/etc/csf/csfpost.sh" ]; then
    echo "" > /etc/csf/csfpost.sh
    echo "iptables -t raw -A PREROUTING -p tcp --dport 21 -j CT --helper ftp" >> /etc/csf/csfpost.sh
    echo "iptables -t raw -A OUTPUT -p tcp --dport 21 -j CT --helper ftp" >> /etc/csf/csfpost.sh
    chmod 700 /etc/csf/csfpost.sh
    service lfd stop &> /dev/null
    wait
    kill -9 $(ps aux | grep '[C]onfigServer' | awk '{print $2}') &> /dev/null
    killall sleep &> /dev/null
    rm -f /etc/csf/csf.error
    csf -x  &> /dev/null
    wait
    service clean-boa-env start &> /dev/null
    wait
    csf -uf &> /dev/null
    wait
    _NFTABLES_TEST=$(iptables -V 2>&1)
    if [[ "${_NFTABLES_TEST}" =~ "nf_tables" ]]; then
      if [ -e "/usr/sbin/iptables-legacy" ]; then
        update-alternatives --set iptables /usr/sbin/iptables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/ip6tables-legacy" ]; then
        update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/arptables-legacy" ]; then
        update-alternatives --set arptables /usr/sbin/arptables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/ebtables-legacy" ]; then
        update-alternatives --set ebtables /usr/sbin/ebtables-legacy &> /dev/null
      fi
    fi
    csf -e &> /dev/null
    wait
    sed -i "s/.*DHCP.*//g" /etc/csf/csf.allow
    wait
    sed -i "/^$/d" /etc/csf/csf.allow
    _DHCP_TEST=$(grep DHCPREQUEST /var/log/syslog | cut -d ' ' -f13 | sort | uniq 2>&1)
    if [[ "${_DHCP_TEST}" =~ "port" ]]; then
      for _IP in `grep DHCPREQUEST /var/log/syslog | cut -d ' ' -f12 | sort | uniq`;do echo "udp|out|d=67|d=${_IP} # Local DHCP out" >> /etc/csf/csf.allow;done
    else
      for _IP in `grep DHCPREQUEST /var/log/syslog | cut -d ' ' -f13 | sort | uniq`;do echo "udp|out|d=67|d=${_IP} # Local DHCP out" >> /etc/csf/csf.allow;done
    fi
    csf -q  &> /dev/null
    service lfd start &> /dev/null
    wait
    ### Linux kernel TCP SACK CVEs mitigation
    ### CVE-2019-11477 SACK Panic
    ### CVE-2019-11478 SACK Slowness
    ### CVE-2019-11479 Excess Resource Consumption Due to Low MSS Values
    if [ -x "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
      _SACK_TEST=$(ip6tables --list | grep tcpmss 2>&1)
      if [[ ! "${_SACK_TEST}" =~ "tcpmss" ]]; then
        sysctl net.ipv4.tcp_mtu_probing=0 &> /dev/null
        iptables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/sull
        ip6tables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
      fi
    fi
  fi
  if [ -e "/etc/init.d/postfix" ]; then
    service postfix restart &> /dev/null
  fi
  echo
  echo BARRACUDA upgrade completed
  echo Bye
  echo
  exit 0
}

set_pin_priority() {
  if [ ! -e "/etc/apt/preferences" ] && [ -e "/etc/issue.net" ]; then
    _IS_DEVUAN=$(grep "Devuan" /etc/issue.net 2>&1)
    _IS_DEBIAN=$(grep "Debian" /etc/issue.net 2>&1)
    if [[ "${_IS_DEVUAN}" =~ "Devuan" ]]; then
      _THIS_OS=Devuan
    elif [[ "${_IS_DEBIAN}" =~ "Debian" ]]; then
      _THIS_OS=Debian
    fi
    if [ "${_THIS_OS}" = "Devuan" ]; then
      curl ${crlGet} "${urlHmr}/conf/etc-apt-preferences-devuan.txt" \
        -o /etc/apt/preferences
    elif [ "${_THIS_OS}" = "Debian" ]; then
      curl ${crlGet} "${urlHmr}/conf/etc-apt-preferences-debian.txt" \
        -o /etc/apt/preferences
    fi
  fi
}

find_fast_mirror() {
  isNetc=$(which netcat 2>&1)
  if [ ! -x "${isNetc}" ] || [ -z "${isNetc}" ]; then
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
    fi
    apt_clean_update
    apt-get install netcat ${aptYesUnth} &> /dev/null
    wait
  fi
  ffMirr=$(which ffmirror 2>&1)
  if [ -x "${ffMirr}" ]; then
    ffList="/var/backups/boa-mirrors-2024-01.txt"
    mkdir -p /var/backups
    if [ ! -e "${ffList}" ]; then
      echo "de.files.aegir.cc"  > ${ffList}
      echo "ny.files.aegir.cc" >> ${ffList}
      echo "sg.files.aegir.cc" >> ${ffList}
    fi
    if [ -e "${ffList}" ]; then
      _BROKEN_FFMIRR_TEST=$(grep "stuff" ${ffMirr} 2>&1)
      if [[ "${_BROKEN_FFMIRR_TEST}" =~ "stuff" ]]; then
        _CHECK_MIRROR=$(bash ${ffMirr} < ${ffList} 2>&1)
        _USE_MIR="${_CHECK_MIRROR}"
        [[ "${_USE_MIR}" =~ "printf" ]] && _USE_MIR="files.aegir.cc"
      else
        _USE_MIR="files.aegir.cc"
      fi
    else
      _USE_MIR="files.aegir.cc"
    fi
  else
    _USE_MIR="files.aegir.cc"
  fi
  urlDev="http://${_USE_MIR}/dev"
  urlHmr="http://${_USE_MIR}/versions/${tRee}/boa/aegir"
}

check_dns_curl() {
  if [ ! -e "/etc/resolv.conf" ]; then
    rm -f /etc/resolv.conf
    if [ -e "${vBs}/resolv.conf.vanilla" ]; then
      cat ${vBs}/resolv.conf.vanilla >/etc/resolv.conf
    fi
    echo "nameserver 1.1.1.1" >>/etc/resolv.conf
    echo "nameserver 1.0.0.1" >>/etc/resolv.conf
    check_dns_settings
  else
    check_dns_settings
  fi
  if [ -d "/var/cache/pdnsd" ] \
    && [ -e "/etc/resolvconf/run/interface/lo.pdnsd" ]; then
    pdnsd-ctl empty-cache &> /dev/null
  fi
  find_fast_mirror
  isCurl=$(curl --version 2>&1)
  if [[ ! "${isCurl}" =~ "OpenSSL" ]] || [ -z "${isCurl}" ]; then
    echo "ERROR: cURL is broken! Re-installing.."
    rm -f /etc/apt/sources.list.d/openssl.list
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
    fi
    echo "curl install" | dpkg --set-selections &> /dev/null
    apt_clean_update
    apt-get install curl ${aptYesUnth} -fu --reinstall &> /dev/null
    if [ -f "/usr/bin/curl" ] && [ -e "/usr/local/bin/curl" ]; then
      rm -f /usr/local/bin/curl--broken
      mv -f /usr/local/bin/curl /usr/local/bin/curl--broken
    fi
  fi
  _CURL_TEST=$(curl -L -k -s \
    --max-redirs 10 \
    --retry 3 \
    --retry-delay 10 \
    -I "http://${_USE_MIR}" 2> /dev/null)
  if [[ ! "${_CURL_TEST}" =~ "200 OK" ]]; then
    if [[ "${_CURL_TEST}" =~ "unknown option was passed in to libcurl" ]]; then
      echo "ERROR: cURL libs are out of sync! Re-installing.."
      rm -f /etc/apt/sources.list.d/openssl.list
      if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
        && [ -e "/etc/apt/apt.conf.d" ]; then
        echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
      fi
      echo "curl install" | dpkg --set-selections &> /dev/null
      apt_clean_update
      apt-get install curl ${aptYesUnth} -fu --reinstall &> /dev/null
      if [ -f "/usr/bin/curl" ] && [ -e "/usr/local/bin/curl" ]; then
        rm -f /usr/local/bin/curl--broken
        mv -f /usr/local/bin/curl /usr/local/bin/curl--broken
      fi
    else
      echo "ERROR: ${_USE_MIR} is not available, please try later"
      clean_pid_exit
    fi
  fi
}

csf_check_fix() {
  if [ -x "/usr/sbin/csf" ] \
    && [ -e "/etc/csf/csf.deny" ] \
    && [ ! -x "/etc/csf/csfpost.sh" ]; then
    echo "" > /etc/csf/csfpost.sh
    echo "iptables -t raw -A PREROUTING -p tcp --dport 21 -j CT --helper ftp" >> /etc/csf/csfpost.sh
    echo "iptables -t raw -A OUTPUT -p tcp --dport 21 -j CT --helper ftp" >> /etc/csf/csfpost.sh
    chmod 700 /etc/csf/csfpost.sh
    sed -i "s/.*aegir.*//g" /etc/csf/csf.allow
    csf -a 94.237.26.49    de.files.aegir.cc  &> /dev/null
    csf -a 209.151.150.175 ny.files.aegir.cc  &> /dev/null
    csf -a 95.111.194.246  sg.files.aegir.cc  &> /dev/null
    service lfd stop &> /dev/null
    wait
    kill -9 $(ps aux | grep '[C]onfigServer' | awk '{print $2}') &> /dev/null
    killall sleep &> /dev/null
    rm -f /etc/csf/csf.error
    csf -x  &> /dev/null
    wait
    service clean-boa-env start &> /dev/null
    wait
    csf -uf &> /dev/null
    wait
    _NFTABLES_TEST=$(iptables -V 2>&1)
    if [[ "${_NFTABLES_TEST}" =~ "nf_tables" ]]; then
      if [ -e "/usr/sbin/iptables-legacy" ]; then
        update-alternatives --set iptables /usr/sbin/iptables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/ip6tables-legacy" ]; then
        update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/arptables-legacy" ]; then
        update-alternatives --set arptables /usr/sbin/arptables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/ebtables-legacy" ]; then
        update-alternatives --set ebtables /usr/sbin/ebtables-legacy &> /dev/null
      fi
    fi
    csf -e &> /dev/null
    wait
    sed -i "s/.*DHCP.*//g" /etc/csf/csf.allow
    wait
    sed -i "/^$/d" /etc/csf/csf.allow
    _DHCP_TEST=$(grep DHCPREQUEST /var/log/syslog | cut -d ' ' -f13 | sort | uniq 2>&1)
    if [[ "${_DHCP_TEST}" =~ "port" ]]; then
      for _IP in `grep DHCPREQUEST /var/log/syslog | cut -d ' ' -f12 | sort | uniq`;do echo "udp|out|d=67|d=${_IP} # Local DHCP out" >> /etc/csf/csf.allow;done
    else
      for _IP in `grep DHCPREQUEST /var/log/syslog | cut -d ' ' -f13 | sort | uniq`;do echo "udp|out|d=67|d=${_IP} # Local DHCP out" >> /etc/csf/csf.allow;done
    fi
    csf -q  &> /dev/null
    service lfd start &> /dev/null
    wait
    ### Linux kernel TCP SACK CVEs mitigation
    ### CVE-2019-11477 SACK Panic
    ### CVE-2019-11478 SACK Slowness
    ### CVE-2019-11479 Excess Resource Consumption Due to Low MSS Values
    if [ -x "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
      _SACK_TEST=$(ip6tables --list | grep tcpmss 2>&1)
      if [[ ! "${_SACK_TEST}" =~ "tcpmss" ]]; then
        sysctl net.ipv4.tcp_mtu_probing=0 &> /dev/null
        iptables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/sull
        ip6tables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
      fi
    fi
  fi
}

check_root() {
  if [ `whoami` = "root" ]; then
    if [ -e "/root/.barracuda.cnf" ]; then
      source /root/.barracuda.cnf
      _B_NICE=${_B_NICE//[^0-9]/}
    fi
    if [ -z "${_B_NICE}" ]; then
      _B_NICE=10
    fi
    renice ${_B_NICE} -p $$ &> /dev/null
    csf_check_fix
    chmod a+w /dev/null
    if [ ! -e "/dev/fd" ]; then
      if [ -e "/proc/self/fd" ]; then
        rm -rf /dev/fd
        ln -s /proc/self/fd /dev/fd
      fi
    fi
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
    fi
    if [ "${_VMFAMILY}" = "VS" ]; then
      if [ ! -e "/etc/apt/preferences.d/fuse" ]; then
        mkdir -p /etc/apt/preferences.d/
        echo -e 'Package: fuse\nPin: origin ""\nPin-Priority: -1' > /etc/apt/preferences.d/fuse
        apt_clean_update
      fi
      if [ ! -e "/etc/apt/preferences.d/udev" ]; then
        mkdir -p /etc/apt/preferences.d/
        echo -e 'Package: udev\nPin: origin ""\nPin-Priority: -1' > /etc/apt/preferences.d/udev
        apt_clean_update
      fi
      if [ ! -e "/etc/apt/preferences.d/makedev" ]; then
        mkdir -p /etc/apt/preferences.d/
        echo -e 'Package: makedev\nPin: origin ""\nPin-Priority: -1' > /etc/apt/preferences.d/makedev
        apt_clean_update
      fi
      apt-get remove fuse -y -qq &> /dev/null
      apt-get purge fuse -y -qq &> /dev/null
      apt-get remove udev -y -qq &> /dev/null
      apt-get purge udev -y -qq &> /dev/null
      apt-get remove makedev -y -qq &> /dev/null
      apt-get purge makedev -y -qq &> /dev/null
      _PTMX=OK
      if [ -e "/sbin/hdparm" ]; then
        apt-get remove hdparm -y -qq &> /dev/null
        apt-get purge hdparm -y -qq &> /dev/null
      fi
      if [ -e "/sbin/auditd" ]; then
        apt-get remove auditd -y -qq &> /dev/null
        apt-get purge auditd -y -qq &> /dev/null
      fi
      _REMOVE_LINKS="buagent \
                     checkroot.sh \
                     fancontrol \
                     halt \
                     hwclock.sh \
                     hwclockfirst.sh \
                     ifupdown \
                     ifupdown-clean \
                     kerneloops \
                     klogd \
                     mountall-bootclean.sh \
                     mountall.sh \
                     mountdevsubfs.sh \
                     mountkernfs.sh \
                     mountnfs-bootclean.sh \
                     mountnfs.sh \
                     mountoverflowtmp \
                     mountvirtfs \
                     mtab.sh \
                     networking \
                     procps \
                     reboot \
                     sendsigs \
                     setserial \
                     svscan \
                     sysstat \
                     umountfs \
                     umountnfs.sh \
                     umountroot \
                     urandom \
                     vnstat"
      for link in ${_REMOVE_LINKS}; do
        if [ -e "/etc/init.d/${link}" ]; then
          update-rc.d -f ${link} remove &> /dev/null
          mv -f /etc/init.d/${link} /var/backups/init.d.${link}
        fi
      done
      for s in cron dbus ssh; do
        if [ -e "/etc/init.d/${s}" ]; then
          sed -rn -e 's/^(# Default-Stop:).*$/\1 0 1 6/' -e '/^### BEGIN INIT INFO/,/^### END INIT INFO/p' /etc/init.d/${s} > /etc/insserv/overrides/${s}
        fi
      done
      /sbin/insserv -v -d &> /dev/null
    else
      _PTMX=CHECK
    fi
    _PTS_TEST=$(cat /proc/mounts | grep devpts 2>&1)
    if [[ ! "${_PTS_TEST}" =~ "devpts" ]] && [ ! -e "/dev/pts/ptmx" ]; then
      _PTS=FIX
    else
      _PTS=OK
    fi
    if [ "${_PTMX}" = "CHECK" ] && [ "${_PTS}" = "FIX" ]; then
      echo "Required /dev/pts/ptmx does not exist! We will fix this now..."
      mkdir -p /dev/pts
      rm -rf /dev/pts/*
      if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
        && [ -e "/etc/apt/apt.conf.d" ]; then
        echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
      fi
      apt_clean_update
      apt-get install udev -y --allow-unauthenticated &> /dev/null
      echo "devpts          /dev/pts        devpts  rw,noexec,nosuid,gid=5,mode=620 0  0" >> /etc/fstab
      mount -t devpts devpts /dev/pts &> /dev/null
    fi
    sed -i "s/.*173.231.133.190.*//g" /etc/hosts
    wait
    sed -i "s/^127.0.0.1.*/127.0.0.1 localhost/g" /etc/hosts
    wait
    sed -i "s/.*files.aegir.cc.*//g" /etc/hosts
    wait
    sed -i "s/.*github.*//g" /etc/hosts
    wait
    echo >>/etc/hosts
    sed -i "/^$/d" /etc/hosts
    wait
    if [ -e "/etc/init.d/postfix" ]; then
      service postfix restart &> /dev/null
    fi
  else
    echo "ERROR: This script should be ran as a root user"
    clean_pid_exit
  fi
  _DF_TEST=$(df -kTh / -l \
    | grep '/' \
    | sed 's/\%//g' \
    | awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "${_DF_TEST}" ] && [ "${_DF_TEST}" -gt "90" ]; then
    echo "ERROR: Your disk space is almost full !!! ${_DF_TEST}/100"
    echo "ERROR: We can not proceed until it is below 90/100"
    clean_pid_exit
  fi
  if [ -e "${barCnf}" ]; then
    source ${barCnf}
  fi
}

check_no_systemd() {
  if [ -e "/lib/systemd/systemd" ]; then
    echo "ERROR: This script can not be used with systemd"
    echo "ERROR: Please run 'boa init' first"
    clean_pid_exit
  fi
}

proceed() {
  check_root_direct
  check_root_keys_pwd
  check_root
  barracuda_downgrade_protection
  check_no_systemd
  os_detection_minimal
  check_dns_curl
  check_php_cli
  set_pin_priority
  up_start
  if [ "${cmmand}" = "up-dev" ] \
    || [ "${cmmand}" = "up-pro" ] \
    || [ "${cmmand}" = "up-lite" ] \
    || [ "${cmmand}" = "php-idle" ]; then
    if [ "${silent}" = "cluster" ] \
      || [ "${silent}" = "foobar" ]; then
      echo "FEATURE MODE: ${silent}"
      master="feature/${silent}"
      branch="feature/${silent}"
      _SCRIPT_URL="${rgUrl}/feature/${silent}/${barName}"
      curl ${crlGet} "${rgUrl}/feature/${silent}/${pthIncB}" -o ${vBs}/${filIncB}
    else
      _SCRIPT_URL="${rgUrl}/${brnch}/${barName}"
      curl ${crlGet} "${rgUrl}/${brnch}/${pthIncB}" -o ${vBs}/${filIncB}
    fi
  elif [ "${cmmand}" = "up-cluster" ]; then
    _SCRIPT_URL="${rgUrl}/${cluster}/${barName}"
    curl ${crlGet} "${rgUrl}/${cluster}/${pthIncB}" -o ${vBs}/${filIncB}
  elif [ "${cmmand}" = "up-3.2" ]; then
    branch="3.2.x-dev"
    _SCRIPT_URL="${rgUrl}/${lgcD}/${barName}"
    curl ${crlGet} "${rgUrl}/${lgcD}/${pthIncB}" -o ${vBs}/${filIncB}
  elif [ "${cmmand}" = "up-2.4" ]; then
    branch="2.4.x-dev"
    _SCRIPT_URL="${rgUrl}/${lgcC}/${barName}"
    curl ${crlGet} "${rgUrl}/${lgcC}/${pthIncB}" -o ${vBs}/${filIncB}
  elif [ "${cmmand}" = "up-2.3" ]; then
    branch="2.3.x-dev"
    _SCRIPT_URL="${rgUrl}/${lgcB}/${barName}"
  elif [ "${cmmand}" = "up-2.2" ]; then
    branch="2.2.x-legacy"
    _SCRIPT_URL="${rgUrl}/${lgcA}/${barName}"
  elif [ "${cmmand}" = "help" ]; then
    echo
    echo "Usage: $(basename "$0") {version} {mode} {options} {dbserver}"
    echo
    echo "Usage: $(basename "$0") php-idle {enable|disable}"
    echo
    cat <<EOF

  Accepted keywords and values in every option:

  {version}
      up-lite <------ upgrade to Barracuda Lite release (no license)
      up-pro <------- upgrade to Barracuda Pro release (requires license)
      up-dev <------- upgrade to Barracuda Cutting Edge (requires license)
      php-idle <----- disable not used PHP versions or enable them again

  {mode}
      system <------- upgrade only system without Aegir Master Hostmaster
      log <---------- upgrade both system and Aegir Master in silent mode

  {options}
      newrelickey <-- activate New Relic integration with valid license key
      php-8.1 <------ enable single-PHP mode (7.4 or 8.1 or 8.2)
      php-min <------ install PHP 7.4, 8.1, 8.2, use 8.1 by default (php-all)
      php-max <------ install PHP 7.4, 8.1, 8.2, 8.0, 7.3, 7.2, 7.1, 7.0, 5.6
      nodns <-------- disable DNS/SMTP checks on the fly

  {dbserver}
      percona <------ installed by default
      mariadb <------ deprecated and no longer supported, for testing only

  See docs/UPGRADE.txt for more details.

EOF
    clean_pid_exit
  fi
  if [ -e "/root/.mstr.clstr.cnf" ] \
    || [ -e "/root/.wbhd.clstr.cnf" ] \
    || [ -e "/root/.dbhd.clstr.cnf" ]; then
    _SCRIPT_URL="${rgUrl}/${cluster}/${barName}"
    cmmand="up-cluster"
  fi
  curl ${crlGet} ${_SCRIPT_URL} -o ${barName}
  up_action
  up_finish
}

cmmand="$1"
silent="$2"
rkey="$3"
debug="$4"
sql="$5"
if [ ! -z "${silent}" ]; then
  if [ "${silent}" = "log" ] \
    || [ "${silent}" = "cluster" ] \
    || [ "${silent}" = "disable" ] \
    || [ "${silent}" = "enable" ] \
    || [ "${silent}" = "system" ]; then
    silent="$2"
  else
    silent=
    rkey="$2"
    debug="$3"
    sql="$4"
  fi
fi

if [ "${cmmand}" = "up-dev" ]; then
  tRee=dev
elif [ "${cmmand}" = "up-pro" ]; then
  tRee=pro
elif [ "${cmmand}" = "up-lite" ]; then
  tRee=lite
else
  if [ "${cmmand}" = "php-idle" ] || [ "${cmmand}" = "help" ]; then
    tRee=pro
  else
    echo
    echo "Sorry, you are trying not supported command.."
    echo "Please use supported command to upgrade this server"
    echo "Display supported commands with: $(basename "$0") help"
    echo "Bye"
    echo
    clean_pid_exit
  fi
fi

rlsn="BOA-5.1.0"
rlse="${rlsn}-${tRee}"
cluster="${rlse}"
lgcA="BOA-2.2.9"
lgcB="BOA-2.3.8"
lgcC="BOA-2.4.9"
lgcD="BOA-3.2.2"
branch="5.x-${tRee}"
brnch=${branch//\//\\\/}

export tRee="${tRee}"
export rlsn="${rlsn}"

proceed
