#!/bin/bash

export HOME=/root
export SHELL=/bin/bash
export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin
export _tRee=dev
export _xSrl=540devT02

_barCnf="/root/.barracuda.cnf"

# Define default values
_CHECK_HOST=$(uname -n 2>&1)
_DEFAULT_CPU_CRIT_RATIO="3.9"
_DEFAULT_CPU_MAX_RATIO="3.3"
_DEFAULT_CPU_SPIDER_RATIO="1"
_LOCK_CPU_CONFIG="/root/.lock.cpu.config.cnf"
_UPDATE_CPU_PID="/var/xdrago/log/.update_conf_variable.ctrl.${_tRee}.${_xSrl}.pid"

_LOCK_DOS_CONFIG="/root/.lock.dos.config.cnf"
_LOCK_DOS_PID="/var/xdrago/log/.sync_scan_nginx.ctrl.${_tRee}.${_xSrl}.pid"

_DEFAULT_NGINX_DOS_LINES=1999
_DEFAULT_NGINX_DOS_LIMIT=399
_DEFAULT_NGINX_DOS_MODE=2
_DEFAULT_NGINX_DOS_DIV_INC_NR=40
_DEFAULT_NGINX_DOS_INC_MIN=3
_DEFAULT_NGINX_DOS_LOG=SILENT
_DEFAULT_NGINX_DOS_IGNORE="doccomment"
_DEFAULT_NGINX_DOS_STOP="foobar"

# Function to update or add variables in the configuration file
_update_conf_variable() {
  local _var_name="$1"
  local _default_value="$2"
  local _conf_file="$3"

  if grep -qE "^#?${_var_name}=" "${_conf_file}"; then
    # Variable exists, uncomment and update value
    sed -i "s|^#\?${_var_name}=.*|${_var_name}=\"${_default_value}\"|g" "${_conf_file}"
  else
    # Variable doesn't exist, append to the file
    echo "${_var_name}=\"${_default_value}\"" >> "${_conf_file}"
  fi
}

if [ ! -e "${_LOCK_CPU_CONFIG}" ]; then
  if [ ! -e "${_UPDATE_CPU_PID}" ]; then
    # Update variables
    _update_conf_variable "_CPU_CRIT_RATIO" "${_DEFAULT_CPU_CRIT_RATIO}" "${_barCnf}"
    _update_conf_variable "_CPU_MAX_RATIO" "${_DEFAULT_CPU_MAX_RATIO}" "${_barCnf}"
    _update_conf_variable "_CPU_SPIDER_RATIO" "${_DEFAULT_CPU_SPIDER_RATIO}" "${_barCnf}"
    rm -f /var/xdrago/log/.update_conf_variable.ctrl*
    touch ${_UPDATE_CPU_PID}
    touch ${_LOCK_CPU_CONFIG}
  fi
fi

# Define directories and error log path
_SSL_DIR="/etc/ssl/private"
_NGINX_ERROR_LOG="/var/log/nginx/error.log"

# Function to check if a file is empty
_is_empty_file() {
  local file="$1"
  [[ ! -s "$file" ]]
}

# Check for empty .dhp files and attempt to replace or regenerate them
_process_dhp_files() {
  local _dhp_files=("${_SSL_DIR}"/*.dhp)
  local _non_empty_dhp=""
  # Find the first non-empty .dhp file
  for _dhp_file in "${_dhp_files[@]}"; do
    if ! _is_empty_file "${_dhp_file}"; then
      _non_empty_dhp="${_dhp_file}"
      break
    fi
  done
  # Loop over all .dhp files
  for _dhp_file in "${_dhp_files[@]}"; do
    if _is_empty_file "${_dhp_file}"; then
      if [[ -n "${_non_empty_dhp}" ]]; then
        echo "Replacing empty file ${_dhp_file} with ${_non_empty_dhp}"
        cp "${_non_empty_dhp}" "${_dhp_file}"
      else
        echo "No non-empty .dhp file found, generating new file for ${_dhp_file}"
        openssl dhparam -out "${_dhp_file}" 4096 > /dev/null 2>&1 &
      fi
    fi
  done
}

# Scan Nginx error log for .dhp related errors
_scan_nginx_errors() {
  grep "PEM_read_bio_DHparams" "${_NGINX_ERROR_LOG}" | awk -F'(")' '{print $2}' | while read -r _missing_dhp; do
    if [[ ! -f "${_missing_dhp}" ]]; then
      echo "Missing .dhp file detected: ${_missing_dhp}"
      if [[ -n "${_non_empty_dhp}" ]]; then
        echo "Copying non-empty .dhp file to ${_missing_dhp}"
        cp "${_non_empty_dhp}" "${_missing_dhp}"
      else
        echo "Generating new .dhp file for ${_missing_dhp}"
        openssl dhparam -out "${_missing_dhp}" 4096 > /dev/null 2>&1 &
      fi
    fi
  done
}

_process_dhp_files
_scan_nginx_errors

_crontab_check_clean_race() {
  _CSF_CRON_TEST=$(grep water /etc/crontab 2>&1)
  if [ -e "/etc/csf/csf.deny" ] \
    && [ -x "/usr/sbin/csf" ] \
    && [[ "${_CSF_CRON_TEST}" =~ "water" ]]; then
    sed -i "s/.*fire.*//g" /etc/crontab &> /dev/null
    wait
    sed -i "s/.*water.*//g" /etc/crontab &> /dev/null
    wait
    sed -i "/^$/d" /etc/crontab &> /dev/null
    wait
  fi
}
_crontab_check_clean_race

_bring_all_ram_cpu_online() {
  _RAM_AUTO_FILE="/sys/devices/system/memory/auto_online_blocks"
  if [ -f "${_RAM_AUTO_FILE}" ]; then
    if grep -qx offline "${_RAM_AUTO_FILE}"; then
      echo online > "${_RAM_AUTO_FILE}"
    fi
  fi
  for _CPU_DIR in /sys/devices/system/cpu/cpu[0-9]*
  do
    _CPU=${_CPU_DIR##*/}
    _CPU_STATE_FILE="${_CPU_DIR}/online"
    if [ -f "${_CPU_STATE_FILE}" ]; then
      if grep -qx 0 "${_CPU_STATE_FILE}"; then
        echo 1 > "${_CPU_STATE_FILE}"
      fi
    fi
  done
  for _RAM_DIR in /sys/devices/system/memory/memory[0-9]*
  do
    _RAM=${_RAM_DIR##*/}
    _RAM_STATE_FILE="${_RAM_DIR}/state"
    if [ -f "${_RAM_STATE_FILE}" ]; then
      if grep -qx offline "${_RAM_STATE_FILE}"; then
        echo online > "${_RAM_STATE_FILE}"
      fi
    fi
  done
}
_bring_all_ram_cpu_online

_if_disable_not_used_services() {
  _clearSwap=No
  if [ ! -e "/root/.allow.clamav.cnf" ] || [ -e "/root/.deny.clamav.cnf" ]; then
    if [ -e "/etc/init.d/clamav-daemon" ]; then
      _clearSwap=YES
      update-rc.d -f clamav-daemon remove &> /dev/null
      mv -f /etc/init.d/clamav-daemon /var/backups/
    fi
    if [ -e "/etc/init.d/clamav-freshclam" ]; then
      _clearSwap=YES
      update-rc.d -f clamav-freshclam remove &> /dev/null
      mv -f /etc/init.d/clamav-freshclam /var/backups/
    fi
    kill -9 $(ps aux | grep '[c]lamd' | awk '{print $2}') &> /dev/null
    kill -9 $(ps aux | grep '[f]reshclam' | awk '{print $2}') &> /dev/null
    rm -f /run/clamav/*
  fi
  if [ -e "/root/.deny.java.cnf" ]; then
    if [ -e "/etc/init.d/solr7" ]; then
      _clearSwap=YES
      update-rc.d -f solr7 remove &> /dev/null
      mv -f /etc/init.d/solr7 /var/backups/
    fi
    if [ -e "/etc/init.d/jetty9" ]; then
      _clearSwap=YES
      update-rc.d -f jetty9 remove &> /dev/null
      mv -f /etc/init.d/jetty9 /var/backups/
    fi
    kill -9 $(ps aux | grep '[a]vahi-daemon' | awk '{print $2}') &> /dev/null
    kill -9 $(ps aux | grep '[j]ava' | awk '{print $2}') &> /dev/null
  fi
  if [ "${_clearSwap}" = "YES" ]; then
    swapoff -a
    swapon -a
  fi
}
_if_disable_not_used_services

_os_detection_minimal() {
  _APT_UPDATE="apt-get update"
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  _OS_LIST="daedalus chimaera beowulf buster bullseye bookworm"
  for e in ${_OS_LIST}; do
    if [ "${e}" = "${_OS_CODE}" ]; then
      _APT_UPDATE="apt-get update --allow-releaseinfo-change"
    fi
  done
}
_os_detection_minimal

_apt_clean_update() {
  #apt-get clean -qq 2> /dev/null
  #rm -rf /var/lib/apt/lists/* &> /dev/null
  ${_APT_UPDATE} -qq 2> /dev/null
}

_system_hostname_check_fix() {
  if [ -e "${_barCnf}" ]; then
    source ${_barCnf}
    if [ ! -z "${_MY_HOSTN}" ]; then
      _diffHostTest=$(diff -w -B /etc/hostname /etc/mailname 2>&1)
      if [ -z "${_diffHostTest}" ]; then
        _hostUpdate=""
        echo "INFO: hostname/mailname diff empty -- nothing to update"
      else
        _hostUpdate=YES
        _diffHostTest=$(echo -n ${_diffHostTest} | fmt -su -w 2500 2>&1)
        echo "INFO: hostname/mailname diff ${_diffHostTest}"
      fi
      if [ "${_hostUpdate}" = "YES" ]; then
        hostname -b ${_MY_HOSTN} ### force our custom FQDN/local hostname
        echo "${_MY_HOSTN}" > /etc/hostname
        echo "${_MY_HOSTN}" > /etc/mailname
      fi
    fi
  fi
}
_system_hostname_check_fix

rm -f /run/clear_m.pid

_ADD_XTRA=YES
_CRON_TEST=$(grep "clear.xsh" /var/spool/cron/crontabs/root 2>&1)
if [[ "${_CRON_TEST}" =~ "clear.xsh" ]]; then
  _ADD_XTRA=NO
fi

_TIME=$(date +%H%M 2>&1)
_TIME=${_TIME//[^0-9-]/}
_MINUTE=$(date +%M 2>&1)
_MINUTE=${_MINUTE//[^0-9-]/}
_NOW=$(date +%y%m%d-%H%M%S 2>&1)
_NOW=${_NOW//[^0-9-]/}

_if_hosted_sys() {
  if [ -e "/root/.host8.cnf" ] \
    || [[ "${_CHECK_HOST}" =~ ".aegir.cc"($) ]]; then
    _hostedSys=YES
  else
    _hostedSys=NO
  fi
}

_send_boa_system_report() {
  if [ -e "${_barCnf}" ]; then
    _RCPT_EMAIL=
    _BCC_EMAIL=
    _repBodFile=/var/backups/hosted-boa-status.txt
    _if_hosted_sys
    if [ "${_hostedSys}" = "YES" ]; then
      _RCPT_EMAIL="systems@omega8.cc"
      _BCC_EMAIL="notify@omega8.cc"
    fi
    if [ ! -z "${_RCPT_EMAIL}" ] \
      && [ ! -z "${_BCC_EMAIL}" ] \
      && [ -e "/root/.run.example.report.cnf" ]; then
      _repSub="BOA Status on ${_CHECK_HOST}"
      _repSub=$(echo -n ${_repSub} | fmt -su -w 2500 2>&1)
      boa info report both > ${_repBodFile}
      cat ${_repBodFile} | s-nail -b ${_BCC_EMAIL} -s "${_repSub} at ${_NOW}" ${_RCPT_EMAIL}
      rm -f ${_repBodFile}
    fi
  fi
}

if [ "${_TIME}" = "1200" ] || [ "${_MINUTE}" = "00" ]; then
  export TERM=vt100
  _send_boa_system_report
fi

_crontab_update() {
  if [ -e "/etc/crontab" ]; then
    sed -i "s/.*xdrago.*//gi" /etc/crontab &> /dev/null
    wait
    sed -i "s/.*arracuda.*//gi" /etc/crontab &> /dev/null
    wait
    sed -i "s/.*ctopus.*//gi" /etc/crontab &> /dev/null
    wait
    sed -i "s/.*du.*sql.*//gi" /etc/crontab &> /dev/null
    wait
    if [ "${_ADD_XTRA}" = "YES" ]; then
      echo "*/19 *  * * *   root    bash /var/xdrago/clear.sh >/dev/null 2>&1" >> /etc/crontab
    fi
    if [ -e "/etc/csf" ]; then
      echo "01 *    * * *   root    rm -f /var/xdrago/monitor/log/web.log >/dev/null 2>&1" >> /etc/crontab
      echo "01 *    * * *   root    rm -f /var/xdrago/monitor/log/ssh.log >/dev/null 2>&1" >> /etc/crontab
      echo "01 *    * * *   root    rm -f /var/xdrago/monitor/log/ftp.log >/dev/null 2>&1" >> /etc/crontab
    fi
    sed -i "/^$/d" /etc/crontab &> /dev/null
    wait

    if [ "${_AUTO_PHP}" = "php-all" ]; then
      _BCDA_FULL="up-${_AUTO_VER} log php-all"
      _BCDA_SYST="up-${_AUTO_VER} system php-all"
    elif [ "${_AUTO_PHP}" = "php-min" ]; then
      _BCDA_FULL="up-${_AUTO_VER} log php-min"
      _BCDA_SYST="up-${_AUTO_VER} system php-min"
    elif [ "${_AUTO_PHP}" = "php-max" ]; then
      _BCDA_FULL="up-${_AUTO_VER} log php-max"
      _BCDA_SYST="up-${_AUTO_VER} system php-max"
    else
      _BCDA_FULL="up-${_AUTO_VER} log"
      _BCDA_SYST="up-${_AUTO_VER} system"
    fi
    _OCTO_FULL="up-${_AUTO_VER} all force log"

    if [ ! -z "${_BCDA_SYST}" ]; then
      echo "# Barracuda weekly system only upgrade" >> /etc/crontab
      echo "${_AUTO_UP_MINUTE} ${_AUTO_UP_HOUR}    * * ${_AUTO_UP_WEEKLY}   root    bash /opt/local/bin/barracuda ${_BCDA_SYST}" >> /etc/crontab
    fi

    if [ ! -z "${_BCDA_FULL}" ]; then
      echo "# Barracuda ${_AUTO_VER} full upgrade" >> /etc/crontab
      echo "${_AUTO_UP_MINUTE} ${_AUTO_UP_HOUR}    ${_AUTO_UP_DAY} ${_AUTO_UP_MONTH} *   root    bash /opt/local/bin/barracuda ${_BCDA_FULL}" >> /etc/crontab
    fi

    if [ ! -z "${_OCTO_FULL}" ]; then
      echo "# Octopus ${_AUTO_VER} full upgrade" >> /etc/crontab
      echo "${_AUTO_OCT_UP_MINUTE} ${_AUTO_OCT_UP_HOUR}    ${_AUTO_UP_DAY} ${_AUTO_UP_MONTH} *   root    bash /opt/local/bin/octopus ${_OCTO_FULL}" >> /etc/crontab
    fi

    echo Cron Update Completed
  fi
}

_crontab_cleanup() {
  if [ -e "/etc/crontab" ]; then
    sed -i "s/.*xdrago.*//gi" /etc/crontab &> /dev/null
    wait
    sed -i "s/.*arracuda.*//gi" /etc/crontab &> /dev/null
    wait
    sed -i "s/.*ctopus.*//gi" /etc/crontab &> /dev/null
    wait
    sed -i "s/.*du.*sql.*//gi" /etc/crontab &> /dev/null
    wait
    if [ "${_ADD_XTRA}" = "YES" ]; then
      echo "*/19 *  * * *   root    bash /var/xdrago/clear.sh >/dev/null 2>&1" >> /etc/crontab
    fi
    if [ -e "/etc/csf" ]; then
      echo "01 *    * * *   root    rm -f /var/xdrago/monitor/log/web.log >/dev/null 2>&1" >> /etc/crontab
      echo "01 *    * * *   root    rm -f /var/xdrago/monitor/log/ssh.log >/dev/null 2>&1" >> /etc/crontab
      echo "01 *    * * *   root    rm -f /var/xdrago/monitor/log/ftp.log >/dev/null 2>&1" >> /etc/crontab
    fi
    sed -i "/^$/d" /etc/crontab &> /dev/null
    wait
    echo Cron Cleanup Completed
  fi
}

[ -e "/root/.use.curl.from.packages.cnf" ] && chattr -i /root/.use.curl.from.packages.cnf
[ -e "/root/.use.curl.from.packages.cnf" ] && rm -f /root/.use.curl.from.packages.cnf

if [ -e "/var/xdrago/log" ]; then
  _BROKEN_UPDATE_TEST=$(grep "Under Construction" /var/xdrago/*.sh 2>&1)
  if [ ! -z "${_BROKEN_UPDATE_TEST}" ]; then
    rm -f /var/xdrago/log/*.pid
  fi
  _BROKEN_UPDATE_TEST=$(grep "Under Construction" /var/xdrago/monitor/check/* 2>&1)
  if [ ! -z "${_BROKEN_UPDATE_TEST}" ]; then
    rm -f /var/xdrago/log/*.pid
  fi
  _BROKEN_UPDATE_TEST=$(grep "404 Not Found" /var/xdrago/monitor/check/* 2>&1)
  if [ ! -z "${_BROKEN_UPDATE_TEST}" ]; then
    rm -f /var/xdrago/log/*.pid
  fi
fi

if [ -e "/root/.pause_heavy_tasks_maint.cnf" ]; then
  killall -9 mysqldump
  killall -9 rsync
fi

if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
  && [ -e "/etc/apt/apt.conf.d" ]; then
  echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
  rm -f /etc/apt/apt.conf.d/00sandboxtmp
  rm -f /etc/apt/apt.conf.d/00temp
  _apt_clean_update
fi

if [ -e "/var/aegir/drush" ]; then
  if [ ! -e "${_LOCK_DOS_CONFIG}" ]; then
    if [ ! -e "${_LOCK_DOS_PID}" ]; then
      # Update variables
      _update_conf_variable "_NGINX_DOS_LINES" "${_DEFAULT_NGINX_DOS_LINES}" "${_barCnf}"
      _update_conf_variable "_NGINX_DOS_LIMIT" "${_DEFAULT_NGINX_DOS_LIMIT}" "${_barCnf}"
      _update_conf_variable "_NGINX_DOS_MODE" "${_DEFAULT_NGINX_DOS_MODE}" "${_barCnf}"
      _update_conf_variable "_NGINX_DOS_DIV_INC_NR" "${_DEFAULT_NGINX_DOS_DIV_INC_NR}" "${_barCnf}"
      _update_conf_variable "_NGINX_DOS_INC_MIN" "${_DEFAULT_NGINX_DOS_INC_MIN}" "${_barCnf}"
      _update_conf_variable "_NGINX_DOS_LOG" "${_DEFAULT_NGINX_DOS_LOG}" "${_barCnf}"
      _update_conf_variable "_NGINX_DOS_IGNORE" "${_DEFAULT_NGINX_DOS_IGNORE}" "${_barCnf}"
      _update_conf_variable "_NGINX_DOS_STOP" "${_DEFAULT_NGINX_DOS_STOP}" "${_barCnf}"
      # Update legacy Perl script too
      sed -i "s/^_NGINX_DOS_LIMIT=.*/_NGINX_DOS_LIMIT=399/g"  ${_barCnf}
      sed -i "s/default_critnumber =.*/default_critnumber = 399;/g" /var/xdrago/monitor/check/scan_nginx.pl
      wait
      sed -i "s/default_lines =.*/default_lines = 1999;/g" /var/xdrago/monitor/check/scan_nginx.pl
      rm -f /var/xdrago/log/.sync_scan_nginx*
      touch ${_LOCK_DOS_PID}
      touch ${_LOCK_DOS_CONFIG}
    fi
  fi

  [ -z "${_AUTO_VER}" ] && _AUTO_VER="${_tRee}"

  if [ -e "${_barCnf}" ]; then
    _AUTO_UP_WEEKLY=${_AUTO_UP_WEEKLY//[^0-9]/}
    _AUTO_UP_MONTH=${_AUTO_UP_MONTH//[^0-9]/}
    _AUTO_UP_DAY=${_AUTO_UP_DAY//[^0-9]/}
    _AUTO_UP_HOUR=${_AUTO_UP_HOUR//[^0-9]/}
    _AUTO_UP_MINUTE=${_AUTO_UP_MINUTE//[^0-9]/}
    _AUTO_OCT_UP_HOUR=${_AUTO_OCT_UP_HOUR//[^0-9]/}
    _AUTO_OCT_UP_MINUTE=${_AUTO_OCT_UP_MINUTE//[^0-9]/}

    if [ ! -z "${_AUTO_UP_WEEKLY}" ] \
      && [ ! -z "${_AUTO_UP_MONTH}" ] \
      && [ ! -z "${_AUTO_UP_DAY}" ]; then
      [ -z "${_AUTO_UP_HOUR}" ] && _AUTO_UP_HOUR=0
      [ -z "${_AUTO_UP_MINUTE}" ] && _AUTO_UP_MINUTE=15
      [ -z "${_AUTO_OCT_UP_HOUR}" ] && _AUTO_OCT_UP_HOUR=1
      [ -z "${_AUTO_OCT_UP_MINUTE}" ] && _AUTO_OCT_UP_MINUTE=15
    fi

    if [ -e "/etc/apticron/apticron.conf" ]; then
      sed -i "s/^# be something like.*/# be something like ${_MY_EMAIL}/g" \
        /etc/apticron/apticron.conf
      _APTICRON_TEST=$(grep "omega8" /etc/apticron/apticron.conf 2>&1)
      if [[ "${_APTICRON_TEST}" =~ "omega8" ]]; then
        _AUTO_UP=YES
      fi
    fi
    if [[ "${_MY_EMAIL}" =~ "omega8" ]]; then
      _AUTO_UP=YES
    fi
    if [ "${_AUTO_UP}" = "YES" ]; then
      if [ ! -e "/root/.auto.up.cnf" ] || [ ! -e "/root/.host8.cnf" ]; then
        touch /root/.auto.up.cnf
        touch /root/.host8.cnf
      fi
    else
      [ -e "/root/.auto.up.cnf" ] && rm -f /root/.auto.up.cnf
    fi
  fi
  _if_hosted_sys
  if [ "${_hostedSys}" = "YES" ]; then
	if [[ "${_CHECK_HOST}" =~ ^(lcy1.ao.|lcy15.uk.) ]]; then
	  _DONT_TOUCH=OK
	  rm -f /etc/csf/csf.conf-pre*
	else
	  if [ ! -e "/var/xdrago/log/.csf_legacy_cleanup.${_xSrl}.pid" ]; then
	    sed -i "s/.*Legacy.*//g"    /etc/csf/csf.ignore
	    wait
	    sed -i "s/.*Legacy.*//g"    /etc/csf/csf.allow
	    wait
	    sed -i "s/.*Manually.*//g"  /etc/csf/csf.ignore
	    wait
	    sed -i "s/.*Manually.*//g"  /etc/csf/csf.allow
	    wait
	    sed -i "s/.*Temporary.*//g" /etc/csf/csf.ignore
	    wait
	    sed -i "s/.*Temporary.*//g" /etc/csf/csf.allow
	    wait
	    sed -i "/^$/d" /etc/csf/csf.ignore
	    sed -i "/^$/d" /etc/csf/csf.allow
	    rm -f /etc/csf/csf.conf-pre*
	    touch /var/xdrago/log/.csf_legacy_cleanup.${_xSrl}.pid
	  fi
	fi

	rm -f /var/xdrago/*.old
	rm -f /var/xdrago/.*.off

	if [ ! -e "/var/xdrago/log/.csf_dhcp_udp_cleanup.${_xSrl}.pid" ]; then
      sed -i "s/.*DHCP.*//g" /etc/csf/csf.allow
      wait
      sed -i "/^$/d" /etc/csf/csf.allow
      if [ -e "/var/log/daemon.log" ]; then
        _DHCP_LOG="/var/log/daemon.log"
      else
        _DHCP_LOG="/var/log/syslog"
      fi
      grep DHCPREQUEST "${_DHCP_LOG}" | awk '{print $12}' | sort -u | while read -r _IP; do
        if [[ ${_IP} =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
          IFS='.' read -r oct1 oct2 oct3 oct4 <<< "${_IP}"
          if (( oct1 <= 255 && oct2 <= 255 && oct3 <= 255 && oct4 <= 255 )); then
            echo "udp|out|d=67|d=${_IP} # Local DHCP out" >> /etc/csf/csf.allow
          fi
        fi
      done
 	  csf -q
	  touch /var/xdrago/log/.csf_dhcp_udp_cleanup.${_xSrl}.pid
	fi

    if [ ! -e "/var/xdrago/log/.disabled_modules_fix.${_xSrl}.pid" ]; then
      sed -i "s/^_MODULES_FIX=.*/_MODULES_FIX=NO/g"  ${_barCnf}
      touch /var/xdrago/log/.disabled_modules_fix.${_xSrl}.pid
    fi

    if [ ! -e "/var/xdrago/log/.custom_percona_forced.${_xSrl}.pid" ]; then
      _DBS_TEST=$(which mysql 2>&1)
      if [ ! -z "${_DBS_TEST}" ]; then
        _DB_SERVER_TEST=$(mysql -V 2>&1)
      fi
      _DB_V=
      if [[ "${_DB_SERVER_TEST}" =~ "Ver 8.4." ]]; then
        _DB_V=8.4
      elif [[ "${_DB_SERVER_TEST}" =~ "Ver 8.3." ]]; then
        _DB_V=8.3
      elif [[ "${_DB_SERVER_TEST}" =~ "Ver 8.0." ]]; then
        _DB_V=8.0
      elif [[ "${_DB_SERVER_TEST}" =~ "Distrib 5.7." ]]; then
        _DB_V=5.7
      fi
      if [[ ! "${_DB_SERVER}" =~ "Percona" ]] || [ -z "${_DB_V}" ]; then
        sed -i "s/^_DB_SERIES=.*/_DB_SERIES=5.7/g"  ${_barCnf}
        sed -i "s/^_DB_SERVER=.*/_DB_SERVER=Percona/g"  ${_barCnf}
      elif [ ! -z "${_DB_V}" ] && [ "${_DB_V}" = "5.7" ]; then
        _SQL_PSWD=$(cat /root/.my.pass.txt 2>&1)
        _SQL_PSWD=$(echo -n ${_SQL_PSWD} | tr -d "\n" 2>&1)
        _CHECK_EXISTS=$(mysql -u root -e "SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = 'drandom_2test')" | grep "0" 2>&1)
        if [[ "${_CHECK_EXISTS}" =~ "0" ]]; then
          _CHECK_REPAIR=$(mysql -u root -e "CREATE USER IF NOT EXISTS 'drandom_2test'@'localhost';" 2>&1)
          if [ "${_DEBUG_MODE}" = "YES" ]; then
            echo _CHECK_REPAIR 1 ${_CHECK_REPAIR}
          fi
          if [[ "${_CHECK_REPAIR}" =~ "corrupted" ]]; then
            mysqlcheck -u root -A --auto-repair --silent
            mysql_upgrade -u root --force
            mysql -u root -e "ALTER TABLE mysql.user DROP COLUMN default_role;"
            mysql -u root -e "ALTER TABLE mysql.user DROP COLUMN is_role;"
            mysql -u root -e "ALTER TABLE mysql.user DROP COLUMN max_statement_time;"
            mysql_upgrade -u root --force
          fi
          _CHECK_REPAIR=$(mysql -u root -e "CREATE USER IF NOT EXISTS 'drandom_2test'@'localhost';" 2>&1)
          if [ "${_DEBUG_MODE}" = "YES" ]; then
            echo _CHECK_REPAIR 2 ${_CHECK_REPAIR}
          fi
        fi
        mysql -u root -e "SET GLOBAL innodb_flush_log_at_trx_commit=2;" &> /dev/null
        mysql -u root -e "SET GLOBAL innodb_flush_log_at_timeout=5;" &> /dev/null
        mysql -u root -e "SET GLOBAL innodb_stats_on_metadata=0;" &> /dev/null
      fi
      sed -i "s/^_USE_MYSQLTUNER=.*/_USE_MYSQLTUNER=NO/g"  ${_barCnf}
      rm -f /etc/mysql/conf.d/mysqldump.cnf
      touch /var/xdrago/log/.custom_percona_forced.${_xSrl}.pid
    fi

    _AUTO_PHP="php-min"
    _AUTO_VER="${_tRee}"
    _AUTO_UP_WEEKLY=7
    _AUTO_UP_MONTH=9
    _AUTO_UP_DAY=11
    _AUTO_UP_HOUR=3
    _AUTO_UP_MINUTE=10
    _AUTO_OCT_UP_HOUR=4
    _AUTO_OCT_UP_MINUTE=10

    #if [ ! -e "/root/.silent.update.cnf" ]; then
    #  touch /root/.silent.update.cnf
    #fi
    [ -e " /root/.my.optimize.cnf" ] && rm -f /root/.my.optimize.cnf
    [ -e "/root/.pause_tasks_maint.cnf" ] && rm -f /root/.pause_tasks_maint.cnf
    [ -e "/root/.restrict_this_vm.cnf" ] && rm -f /root/.restrict_this_vm.cnf
    [ -e "/root/.force.sites.verify.cnf" ] && rm -f /root/.force.sites.verify.cnf
    [ -e "/root/.run.example.report.cnf" ] && rm -f /root/.run.example.report.cnf
    [ -e "/var/xdrago/weekly.sh" ] && rm -f /var/xdrago/weekly.sh
    if [ ! -e "/root/.dev.server.cnf" ] \
      && [ -e "/var/aegir/drush" ] \
      && [ -e "/data/all/000" ]; then
      [ -e "/root/.debug-boa-installer.cnf" ] && rm -f /root/.debug-boa-installer.cnf
      [ -e "/root/.debug-octopus-installer.cnf" ] && rm -f /root/.debug-octopus-installer.cnf
    fi
    if [ -e "/run/boa_run.pid" ]; then
      touch /root/.pause_tasks_maint.cnf
    else
      [ -e "/root/.pause_tasks_maint.cnf" ] && rm -f /root/.pause_tasks_maint.cnf
      [ -e "/root/.restrict_this_vm.cnf" ] && rm -f /root/.restrict_this_vm.cnf
      if [ `ps aux | grep -v "grep" | grep --count "gpg-agent"` -gt "5" ]; then
        kill -9 $(ps aux | grep '[g]pg-agent' | awk '{print $2}') &> /dev/null
        echo "$(date 2>&1) Too many gpg-agent processes killed" >> \
          /var/xdrago/log/gpg-agent-count.kill.log
      fi
      if [ `ps aux | grep -v "grep" | grep --count "dirmngr"` -gt "5" ]; then
        kill -9 $(ps aux | grep '[d]irmngr' | awk '{print $2}') &> /dev/null
        echo "$(date 2>&1) Too many dirmngr processes killed" >> \
          /var/xdrago/log/dirmngr-count.kill.log
      fi
    fi
    if [ -e "/root/.restrict_this_vm.cnf" ]; then
      killall -9 rsync
      chmod 700 /usr/bin/rsync
      chmod 700 /usr/bin/mysqldump
    else
      chmod 750 /usr/bin/rsync
      chmod 750 /usr/bin/mysqldump
    fi
  fi
  if [ ! -e "/etc/init.d/ssh" ] \
    || [ ! -e "/etc/init.d/redis-server" ]; then
    _AUTO_UP_WEEKLY=
    _AUTO_UP_MONTH=
    _AUTO_UP_DAY=
  fi
  if [ -e "/root/.my.cluster_root_pwd.txt" ]; then
    _AUTO_UP_WEEKLY=
    _AUTO_UP_MONTH=
    _AUTO_UP_DAY=
  fi

  if [ -e "/root/.dev.server.cnf" ]; then
    if [ ! -e "/var/xdrago/log/.etc_crontab_update_dev_ctrl_f1.${_tRee}.${_xSrl}.pid" ]; then
      rm -f /var/xdrago/log/.*etc_crontab_update_dev_ctrl*
      _crontab_cleanup
      service cron restart
      touch /var/xdrago/log/.etc_crontab_update_dev_ctrl_f1.${_tRee}.${_xSrl}.pid
    fi
  else
    if [ ! -e "/var/xdrago/log/.etc_crontab_update_prod_ctrl_f1.${_tRee}.${_xSrl}.pid" ]; then
      rm -f /var/xdrago/log/.*etc_crontab_update_prod_ctrl*
      if [ ! -z "${_AUTO_UP_MONTH}" ] \
        && [ ! -z "${_AUTO_UP_DAY}" ]; then
        _crontab_update
      else
        _crontab_cleanup
      fi
      service cron restart
      touch /var/xdrago/log/.etc_crontab_update_prod_ctrl_f1.${_tRee}.${_xSrl}.pid
    fi
  fi

  if [ ! -e "/var/xdrago/log/.etc_csf_allow_ctrl.${_tRee}.${_xSrl}.pid" ]; then
    mkdir -p /var/backups/csf
    cp -a /etc/csf/csf.ignore /var/backups/csf/csf.ignore.${_tRee}.${_xSrl}.txt
    cp -a /etc/csf/csf.allow /var/backups/csf/csf.allow.${_tRee}.${_xSrl}.txt
    rm -f /root/.*.pid
    rm -f /var/xdrago/log/.etc_csf_allow_ctrl*
    touch /var/xdrago/log/.etc_csf_allow_ctrl.${_tRee}.${_xSrl}.pid
  fi

  ###
  ### Fix for iptables paths backward compatibility
  ###
  if [ -x "/sbin/iptables" ] && [ ! -e "/usr/sbin/iptables" ]; then
    ln -s /sbin/iptables /usr/sbin/iptables
  fi
  if [ -x "/usr/sbin/iptables" ] && [ ! -e "/sbin/iptables" ]; then
    ln -s /usr/sbin/iptables /sbin/iptables
  fi
  if [ -x "/sbin/iptables-save" ] && [ ! -e "/usr/sbin/iptables-save" ]; then
    ln -s /sbin/iptables-save /usr/sbin/iptables-save
  fi
  if [ -x "/usr/sbin/iptables-save" ] && [ ! -e "/sbin/iptables-save" ]; then
    ln -s /usr/sbin/iptables-save /sbin/iptables-save
  fi
  if [ -x "/sbin/iptables-restore" ] && [ ! -e "/usr/sbin/iptables-restore" ]; then
    ln -s /sbin/iptables-restore /usr/sbin/iptables-restore
  fi
  if [ -x "/usr/sbin/iptables-restore" ] && [ ! -e "/sbin/iptables-restore" ]; then
    ln -s /usr/sbin/iptables-restore /sbin/iptables-restore
  fi
  if [ -x "/sbin/ip6tables" ] && [ ! -e "/usr/sbin/ip6tables" ]; then
    ln -s /sbin/ip6tables /usr/sbin/ip6tables
  fi
  if [ -x "/usr/sbin/ip6tables" ] && [ ! -e "/sbin/ip6tables" ]; then
    ln -s /usr/sbin/ip6tables /sbin/ip6tables
  fi
  if [ -x "/sbin/ip6tables-save" ] && [ ! -e "/usr/sbin/ip6tables-save" ]; then
    ln -s /sbin/ip6tables-save /usr/sbin/ip6tables-save
  fi
  if [ -x "/usr/sbin/ip6tables-save" ] && [ ! -e "/sbin/ip6tables-save" ]; then
    ln -s /usr/sbin/ip6tables-save /sbin/ip6tables-save
  fi
  if [ -x "/sbin/ip6tables-restore" ] && [ ! -e "/usr/sbin/ip6tables-restore" ]; then
    ln -s /sbin/ip6tables-restore /usr/sbin/ip6tables-restore
  fi
  if [ -x "/usr/sbin/ip6tables-restore" ] && [ ! -e "/sbin/ip6tables-restore" ]; then
    ln -s /usr/sbin/ip6tables-restore /sbin/ip6tables-restore
  fi
  ###
  ### Fix for iptables paths backward compatibility
  ###

  _NFTABLES_TEST=$(iptables -V 2>&1)
  if [[ "${_NFTABLES_TEST}" =~ "nf_tables" ]]; then
    if [ -e "/usr/sbin/iptables-legacy" ]; then
      update-alternatives --set iptables /usr/sbin/iptables-legacy &> /dev/null
    fi
    if [ -e "/usr/sbin/ip6tables-legacy" ]; then
      update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy &> /dev/null
    fi
    if [ -e "/usr/sbin/arptables-legacy" ]; then
      update-alternatives --set arptables /usr/sbin/arptables-legacy &> /dev/null
    fi
    if [ -e "/usr/sbin/ebtables-legacy" ]; then
      update-alternatives --set ebtables /usr/sbin/ebtables-legacy &> /dev/null
    fi
    touch /var/xdrago/log/.nf_tables_ctrl.${_tRee}.${_xSrl}.pid
  fi

  if [ -x "/etc/init.d/site24x7monagent" ] \
    && [ ! -e "/var/xdrago/log/.site24x7monagent_ctrl.${_tRee}.${_xSrl}.pid" ]; then
    service site24x7monagent stop
    wait
    service site24x7monagent start
    rm -f /var/xdrago/log/.site24x7monagent*
    touch /var/xdrago/log/.site24x7monagent_ctrl.${_tRee}.${_xSrl}.pid
  fi

  if [ -x "/usr/local/bin/curl" ] \
    && [ ! -e "/var/xdrago/log/.curl_ctrl.${_tRee}.${_xSrl}.pid" ]; then
    if [ -f "/usr/bin/curl" ]; then
      mv -f /usr/bin/curl /usr/bin/legacy-curl
    fi
    ln -s /usr/local/bin/curl /usr/bin/curl
    touch /var/xdrago/log/.curl_ctrl.${_tRee}.${_xSrl}.pid
  fi

  if [ ! -e "/var/xdrago/log/.force_nginx_restart_ctrl.${_tRee}.${_xSrl}.pid" ]; then
    _IS_NGINX_LOCKED=$(service nginx restart 2>&1)
    if [[ "${_IS_NGINX_LOCKED}" =~ "Address already in use" ]]; then
      kill -9 $(ps aux | grep '[n]ginx' | awk '{print $2}') &> /dev/null
      service nginx start
      wait
      rm -f /var/xdrago/log/.force_nginx_restart_ctrl*
      touch /var/xdrago/log/.force_nginx_restart_ctrl.${_tRee}.${_xSrl}.pid
    fi
  fi

  _IS_MOVESQL_RUNNING=$(ps aux | grep '[m]ove_sql.sh' | awk '{print $2}' 2>&1)
  if [ ! -z "${_IS_MOVESQL_RUNNING}" ]; then
    if [ `ps aux | grep -v "grep" | grep --count "move_sql.sh"` -gt "2" ]; then
      kill -9 $(ps aux | grep '[m]ove_sql.sh' | awk '{print $2}') &> /dev/null
      rm -f /run/mysql_restart_running.pid
      rm -f /run/boa_wait.pid
      rm -f /var/xdrago/log/.move_sql_ctrl*
      touch /var/xdrago/log/.move_sql_ctrl.${_tRee}.${_xSrl}.pid
    fi
  fi

  _IS_SQLCLEANUP_RUNNING=$(ps aux | grep '[m]ysql_cleanup.sh' | awk '{print $2}' 2>&1)
  if [ ! -z "${_IS_SQLCLEANUP_RUNNING}" ]; then
    if [ `ps aux | grep -v "grep" | grep --count "mysql_cleanup.sh"` -gt "2" ]; then
      kill -9 $(ps aux | grep '[m]ysql_cleanup.sh' | awk '{print $2}') &> /dev/null
      rm -f /run/mysql_backup_running.pid
      rm -f /var/xdrago/log/.sqlcleanup_ctrl*
      touch /var/xdrago/log/.sqlcleanup_ctrl.${_tRee}.${_xSrl}.pid
    fi
  fi

  _IS_SOLRSTART_RUNNING=$(ps aux | grep '[s]olr start' | awk '{print $2}' 2>&1)
  if [ ! -z "${_IS_SOLRSTART_RUNNING}" ]; then
    if [ `ps aux | grep -v "grep" | grep --count "solr start"` -gt "2" ]; then
      kill -9 $(ps aux | grep '[s]olr start' | awk '{print $2}') &> /dev/null
      touch /var/xdrago/log/.solr_start_ctrl.${_tRee}.${_xSrl}.pid
    fi
  fi

  _IS_PROCTRL_RUNNING=$(ps aux | grep '[p]roc_num_ctrl.cgi' | awk '{print $2}' 2>&1)
  if [ ! -z "${_IS_PROCTRL_RUNNING}" ]; then
    if [ `ps aux | grep -v "grep" | grep --count "proc_num_ctrl.pl"` -gt "1" ]; then
      kill -9 $(ps aux | grep '[p]roc_num_ctrl.cgi' | awk '{print $2}') &> /dev/null
      touch /var/xdrago/log/.proc_num_ctrl.${_tRee}.${_xSrl}.pid
    fi
  fi

  rm -f /run/solr_jetty.pid
  rm -f /run/solr-jetty.pid
  rm -f /run/fmp_wait.pid

  _IS_SQLBACKUP_RUNNING=$(ps aux | grep '[m]ysql_backup.sh' | awk '{print $2}' 2>&1)
  if [ ! -z "${_IS_SQLBACKUP_RUNNING}" ]; then
    if [ `ps aux | grep -v "grep" | grep --count "mysql_backup.sh"` -gt "2" ]; then
      kill -9 $(ps aux | grep '[m]ysql_backup.sh' | awk '{print $2}') &> /dev/null
      kill -9 $(ps aux | grep '[m]ydumper' | awk '{print $2}') &> /dev/null
      kill -9 $(ps aux | grep '[u]sage.sh' | awk '{print $2}') &> /dev/null
      kill -9 $(ps aux | grep '[r]unner.sh' | awk '{print $2}') &> /dev/null
      rm -f /run/boa_sql_backup.pid
      rm -f /run/mysql_backup_running.pid
      rm -f /run/boa_wait.pid
      rm -f /run/daily-fix.pid
      rm -f /var/xdrago/log/.sqlbackup_ctrl*
      touch /var/xdrago/log/.sqlbackup_ctrl.${_tRee}.${_xSrl}.pid
    fi
  fi
fi

exit 0

###EOF2024###
