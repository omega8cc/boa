#!/bin/bash

export HOME=/root
export SHELL=/bin/bash
export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin

# Ensure the script is run with root privileges
if [ "$EUID" -ne 0 ]; then
  echo "Please run as root."
  exit 1
fi

# Function to register failures
_clean_pid_exit() {
  echo "REASON ${e} on $(date 2>&1)" >> /root/.memorytuner.exit.exceptions.log
  exit 1
}

# Function to check if MySQL server is running
_check_sql_running() {
  while [ -z "${_IS_MYSQLD_RUNNING}" ] \
    || [ ! -e "/run/mysqld/mysqld.sock" ]; do
    _IS_MYSQLD_RUNNING=$(pgrep mysqld 2>&1)
    echo "INFO: Waiting for MySQLD availability..."
    sleep 5
  done
}
_check_sql_running

# Function to check if MySQL server access credentials for root are working
_check_sql_access() {
  if [ -e "/root/.my.pass.txt" ] && [ -e "/root/.my.cnf" ]; then
    _SQL_PSWD=$(cat /root/.my.pass.txt 2>&1)
    _SQL_PSWD=$(echo -n "${_SQL_PSWD}" | tr -d "\n" 2>&1)
    _IS_SYNC_SQL_PSWD=$(grep "password=${_SQL_PSWD}" /root/.my.cnf 2>&1)
  else
    echo "ALERT: /root/.my.cnf or /root/.my.pass.txt not found."
    echo "ALERT: Please fix this before trying again, giving up."
    echo "Bye"
    echo " "
    _clean_pid_exit _check_sql_access_a
  fi
  if [ -z "${_IS_SYNC_SQL_PSWD}" ]; then
    echo "ALERT: SQL password is out of sync between"
    echo "ALERT: /root/.my.cnf and /root/.my.pass.txt"
    echo "ALERT: Please fix this before trying again, giving up."
    echo "Bye"
    echo " "
    _clean_pid_exit _check_sql_access_b
  else
    _IS_MYSQLD_RUNNING=$(pgrep mysqld 2>&1)
    if [ -z "${_IS_MYSQLD_RUNNING}" ]; then
      echo "ALERT: SQL server on this system is not running at all."
      echo "ALERT: Please fix this before trying again, giving up."
      echo "Bye"
      echo " "
      _clean_pid_exit _check_sql_access_c
    else
      _MYSQL_CONN_TEST=$(mysql -u root -e "status" 2>&1)
      if [ -z "${_MYSQL_CONN_TEST}" ] \
        || [[ "${_MYSQL_CONN_TEST}" =~ "Access denied" ]]; then
        echo "ALERT: SQL password in /root/.my.cnf does not work."
        echo "ALERT: Please fix this before trying again, giving up."
        echo "Bye"
        echo " "
        _clean_pid_exit _check_sql_access_d
      fi
    fi
  fi
}
_check_sql_access

# Function to get total system memory in MB
_get_total_mem_mb() {
  local _mem_kb
  _mem_kb=$(grep MemTotal /proc/meminfo | awk '{print $2}')
  echo $((_mem_kb / 1024))
}

# Function to get memory usage of a process or group of processes in MB
_get_mem_usage_mb() {
  local _process_name=$1
  local _mem_usage_kb
  _mem_usage_kb=$(ps -eo rss,args | grep -w "${_process_name}" | grep -v grep | awk '{sum+=$1} END {print sum}')
  _mem_usage_kb=${_mem_usage_kb:-0}
  echo "scale=2; ${_mem_usage_kb} / 1024" | bc
}

# Function to get service uptime in seconds
_get_service_uptime() {
  local service_name=$1
  local pidfile=$2

  if [ ! -f "$pidfile" ]; then
    echo 0  # Service is not running
    return
  fi

  # Get the PID from the PID file
  local pid
  pid=$(cat "$pidfile")

  # Check if the process is running
  if ! ps -p "$pid" > /dev/null 2>&1; then
    echo 0  # Process is not running
    return
  fi

  # Get the current time and the PID file modification time in seconds since epoch
  local current_time
  local file_time
  current_time=$(date +%s)
  file_time=$(stat -c %Y "$pidfile")

  # Calculate the uptime in seconds
  local uptime
  uptime=$((current_time - file_time))

  echo "$uptime"
}

# Function to get MySQL server uptime in seconds
_get_mysql_uptime() {
  local _uptime
  _uptime=$(mysql -Nse "SHOW GLOBAL STATUS LIKE 'Uptime';" | awk '{print $2}')
  echo "${_uptime}"
}

# Function to get MySQL version
_get_mysql_version() {
  mysql -V | awk '{print $5}' | tr -d ','
}

# Function to get number of databases
_get_number_of_databases() {
  mysql -Nse "SELECT COUNT(*) FROM information_schema.schemata;"
}

# Function to parse MySQLTuner-perl recommendations with progress indicator
_parse_mysqltuner_recommendations() {
  if [[ "${_MYSQL_VERSION}" =~ ^8\. ]]; then
    # Use mysqltuner8 for Percona 8.x
    if ! command -v mysqltuner8 &> /dev/null; then
      echo "mysqltuner8 is not installed. Please install it before running this script."
      exit 1
    fi
    echo "Running mysqltuner8..."
    local _tempfile=$(mktemp)
    mysqltuner8 --nogood --nocolor --nographics --buffers --silent > "${_tempfile}" &
    local _mysqltuner_pid=$!
  elif [[ "${_MYSQL_VERSION}" =~ ^5\.7 ]]; then
    # Use mysqltuner5 for Percona 5.7
    if ! command -v mysqltuner5 &> /dev/null; then
      echo "mysqltuner5 is not installed. Please install it before running this script."
      exit 1
    fi
    echo "Running mysqltuner5..."
    local _tempfile=$(mktemp)
    mysqltuner5 --nogood --nocolor --nographics --buffers --silent > "${_tempfile}" &
    local _mysqltuner_pid=$!
  else
    echo "Unsupported MySQL version: ${_MYSQL_VERSION}"
    exit 1
  fi

  # Show progress while mysqltuner is running
  echo -n "Processing"
  while kill -0 ${_mysqltuner_pid} 2>/dev/null; do
    echo -n "."
    sleep 5
  done
  echo " Done."

  local _mysqltuner_output=$(cat "${_tempfile}")
  rm "${_tempfile}"

  # Parse key recommendations
  _REC_INNODB_BUFFER_POOL_SIZE_MB=$(echo "${_mysqltuner_output}" | grep -i "InnoDB Buffer Pool" | grep -o '[0-9]\+M' | tr -d 'M')
  _REC_KEY_BUFFER_SIZE_MB=$(echo "${_mysqltuner_output}" | grep -i "Key buffer size" | grep -o '[0-9]\+M' | tr -d 'M')
  _REC_TMP_TABLE_SIZE_MB=$(echo "${_mysqltuner_output}" | grep -i "Temporary tables" | grep -o '[0-9]\+M' | tr -d 'M')
  _REC_READ_RND_BUFFER_SIZE_MB=$(echo "${_mysqltuner_output}" | grep -i "read_rnd_buffer_size" | grep -o '[0-9]\+K' | tr -d 'K')
  _REC_JOIN_BUFFER_SIZE_MB=$(echo "${_mysqltuner_output}" | grep -i "join_buffer_size" | grep -o '[0-9]\+K' | tr -d 'K')

  # Convert K to M for read_rnd_buffer_size and join_buffer_size
  _REC_READ_RND_BUFFER_SIZE_MB=$((_REC_READ_RND_BUFFER_SIZE_MB / 1024))
  _REC_JOIN_BUFFER_SIZE_MB=$((_REC_JOIN_BUFFER_SIZE_MB / 1024))

  # Parse innodb_log_file_size or innodb_redo_log_capacity
  if [[ "${_MYSQL_VERSION}" =~ ^8\. ]]; then
    _REC_INNODB_LOG_SIZE_MB=$(echo "${_mysqltuner_output}" | \
      grep -i "innodb_redo_log_capacity should be" | \
      grep -o '[0-9]\+M' | tr -d 'M')
  else
    _REC_INNODB_LOG_SIZE_MB=$(echo "${_mysqltuner_output}" | \
      grep -i "innodb_log_file_size should be" | \
      grep -o '[0-9]\+M' | tr -d 'M')
  fi

  # If recommendations are not found, set to default values
  : ${_REC_INNODB_BUFFER_POOL_SIZE_MB:=0}
  : ${_REC_KEY_BUFFER_SIZE_MB:=0}
  : ${_REC_TMP_TABLE_SIZE_MB:=0}
  : ${_REC_READ_RND_BUFFER_SIZE_MB:=0}
  : ${_REC_JOIN_BUFFER_SIZE_MB:=0}
  : ${_REC_INNODB_LOG_SIZE_MB:=0}
}

# Function to get current MySQL settings from /etc/mysql/my.cnf
_get_current_mysql_settings() {
  _CUR_INNODB_BUFFER_POOL_SIZE=$(grep -i "^innodb_buffer_pool_size" /etc/mysql/my.cnf | awk -F'=' '{print $2}' | tr -d 'M ')
  _CUR_KEY_BUFFER_SIZE=$(grep -i "^key_buffer_size" /etc/mysql/my.cnf | awk -F'=' '{print $2}' | tr -d 'M ')
  _CUR_TMP_TABLE_SIZE=$(grep -i "^tmp_table_size" /etc/mysql/my.cnf | awk -F'=' '{print $2}' | tr -d 'M ')
  _CUR_MAX_CONS=$(grep -i "^max_connections" /etc/mysql/my.cnf | awk -F'=' '{print $2}' | tr -d ' ')
  _CUR_READ_RND_BUFFER_SIZE=$(grep -i "^read_rnd_buffer_size" /etc/mysql/my.cnf | awk -F'=' '{print $2}' | tr -d 'M ')
  _CUR_JOIN_BUFFER_SIZE=$(grep -i "^join_buffer_size" /etc/mysql/my.cnf | awk -F'=' '{print $2}' | tr -d 'M ')

  if [[ "${_MYSQL_VERSION}" =~ ^8\. ]]; then
    _CUR_INNODB_LOG_SIZE=$(grep -i "^innodb_redo_log_capacity" /etc/mysql/my.cnf | awk -F'=' '{print $2}' | tr -d 'M ')
  else
    _CUR_INNODB_LOG_SIZE=$(grep -i "^innodb_log_file_size" /etc/mysql/my.cnf | awk -F'=' '{print $2}' | tr -d 'M ')
  fi
}

### Main script starts here

# Get total system memory
_TOTAL_MEM_MB=$(_get_total_mem_mb)

# Define services and their PID files
declare -A _services_pidfiles=(
  ["nginx"]="/run/nginx.pid"
  ["php74-fpm"]="/run/php74-fpm.pid"
  ["php81-fpm"]="/run/php81-fpm.pid"
  ["php82-fpm"]="/run/php82-fpm.pid"
  ["php83-fpm"]="/run/php83-fpm.pid"
  ["redis"]="/run/redis/redis.pid"
  ["java"]="/var/solr7/solr-9077.pid"
)

# Define estimated memory usage for services (in MB)
declare -A _service_estimated_mem_mb=(
  ["nginx"]=100
  ["php74-fpm"]=200
  ["php81-fpm"]=200
  ["php82-fpm"]=200
  ["php83-fpm"]=200
  ["redis"]=200
  ["java"]=100
)

# Ensure _TOTAL_MEM_MB is set by default to 85% of available RAM
_MAX_MEM_MB="${_TOTAL_MEM_MB}"
_TOTAL_MEM_MB=$(echo "(${_TOTAL_MEM_MB} * 85) / 100" | bc)

# Threshold for uptime (e.g., 1 hour = 3600 seconds)
_UPTIME_THRESHOLD=3600

# Initialize total memory usage of other services
_TOTAL_OTHER_SERVICES_MEM_MB=0

# Array to store debugging information
declare -A _service_mem_usage_mb

# Loop through the services
for _service in "${!_services_pidfiles[@]}"; do
  _pidfile="${_services_pidfiles[${_service}]}"
  _uptime=$(_get_service_uptime "${_service}" "${_pidfile}")

  if [ "${_uptime}" -ge "${_UPTIME_THRESHOLD}" ]; then
    # Use actual memory usage
    _mem_usage_mb=$(_get_mem_usage_mb "${_service}")
  else
    # Use estimated memory usage
    _mem_usage_mb=${_service_estimated_mem_mb[${_service}]}
    echo "Service ${_service} has short uptime (${_uptime} seconds). Using estimated memory usage: ${_mem_usage_mb} MB"
  fi

  # Ensure _mem_usage_mb is a valid number
  if ! [[ "${_mem_usage_mb}" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
    _mem_usage_mb=0
  fi

  # Accumulate total memory usage
  _TOTAL_OTHER_SERVICES_MEM_MB=${_TOTAL_OTHER_SERVICES_MEM_MB:-0}
  _TOTAL_OTHER_SERVICES_MEM_MB=$(echo "${_TOTAL_OTHER_SERVICES_MEM_MB} + ${_mem_usage_mb}" | bc)
  # Store for debugging
  _service_mem_usage_mb["${_service}"]=${_mem_usage_mb}
done

# Get current memory usage of MySQL server
_MYSQL_MEM_MB=$(_get_mem_usage_mb 'mysqld')

# Ensure variables are not empty and are valid numbers
for _service in "${!_service_mem_usage_mb[@]}"; do
  _mem_usage=${_service_mem_usage_mb[${_service}]}
  if ! [[ "${_mem_usage}" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
    _mem_usage=0
  fi
  _service_mem_usage_mb[${_service}]=${_mem_usage}
done

# Debugging statements to verify memory usage
for _service in "${!_service_mem_usage_mb[@]}"; do
  echo "${_service} Memory Usage: ${_service_mem_usage_mb[${_service}]} MB"
done

# Get current MySQL usage statistics
_MYSQL_VERSION=$(_get_mysql_version)
_NUMBER_OF_DATABASES=$(_get_number_of_databases)

# Ensure _TOTAL_OTHER_SERVICES_MEM_MB is valid
if ! [[ "${_TOTAL_OTHER_SERVICES_MEM_MB}" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
  _TOTAL_OTHER_SERVICES_MEM_MB=0
fi

# Calculate max memory for MySQL
_MAX_MEM_FOR_MYSQL_MB=$(echo "${_TOTAL_MEM_MB} - ${_TOTAL_OTHER_SERVICES_MEM_MB}" | bc)

# Ensure _AVA_MEM_FOR_MYSQL_MB is set by default to 85% of _MAX_MEM_FOR_MYSQL_MB
_AVA_MEM_FOR_MYSQL_MB=$(echo "(${_MAX_MEM_FOR_MYSQL_MB} * 85) / 100" | bc)

echo "Max raw RAM available: ${_MAX_MEM_MB} MB"
echo "Memory safely available for all services: ${_TOTAL_MEM_MB} MB"
echo "Memory actually used by other services now: ${_TOTAL_OTHER_SERVICES_MEM_MB} MB"
echo "Memory actually used by MySQL now: ${_MYSQL_MEM_MB} MB"
echo "Memory available for MySQL theoretically: ${_AVA_MEM_FOR_MYSQL_MB} MB"
echo "Max RAM available for MySQL: ${_MAX_MEM_FOR_MYSQL_MB} MB"

# Safety check: Ensure there's enough memory for MySQL
_MIN_MYSQL_MEM_MB=1024  # Minimum memory required for MySQL in MB
if (( $(echo "${_AVA_MEM_FOR_MYSQL_MB} < ${_MIN_MYSQL_MEM_MB}" | bc -l) )); then
  echo "Error: Not enough memory available for MySQL after accounting for other services."
  echo "Available memory for MySQL: ${_AVA_MEM_FOR_MYSQL_MB} MB"
  echo "Consider upgrading your system's RAM."
  exit 1
fi

# Get MySQL uptime
_MYSQL_UPTIME_SECONDS=$(_get_mysql_uptime)

# Run MySQLTuner-perl only if uptime >= 24 hours (86400 seconds)
if [ "${_NUMBER_OF_DATABASES}" -lt 100 ] && [ "${_MYSQL_UPTIME_SECONDS}" -ge 86400 ]; then
  echo "Running MySQLTuner-perl to gather recommendations..."
  _parse_mysqltuner_recommendations
else
  echo "Skipping MySQLTuner-perl."
  if [ "${_NUMBER_OF_DATABASES}" -ge 100 ]; then
    echo "Reason: Number of databases is ${_NUMBER_OF_DATABASES} (>=100)."
  fi
  if [ "${_MYSQL_UPTIME_SECONDS}" -lt 86400 ]; then
    echo "Reason: MySQL uptime is less than 24 hours."
  fi
  _REC_INNODB_BUFFER_POOL_SIZE_MB=0
  _REC_KEY_BUFFER_SIZE_MB=0
  _REC_TMP_TABLE_SIZE_MB=0
  _REC_READ_RND_BUFFER_SIZE_MB=0
  _REC_JOIN_BUFFER_SIZE_MB=0
  _REC_INNODB_LOG_SIZE_MB=0
fi

# Ensure _AVA_MEM_FOR_MYSQL_MB is valid
if ! [[ "${_AVA_MEM_FOR_MYSQL_MB}" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
  _AVA_MEM_FOR_MYSQL_MB=0
fi

# Calculate recommended InnoDB buffer pool size
if [ "${_REC_INNODB_BUFFER_POOL_SIZE_MB}" -gt 0 ]; then
  echo "Using MySQLTuner recommended InnoDB buffer pool size: ${_REC_INNODB_BUFFER_POOL_SIZE_MB} MB"
else
  # Default to 75% of available MySQL memory
  _REC_INNODB_BUFFER_POOL_SIZE_MB=$(echo "(${_AVA_MEM_FOR_MYSQL_MB} * 75) / 100" | bc)
  echo "Calculated InnoDB buffer pool size: ${_REC_INNODB_BUFFER_POOL_SIZE_MB} MB"
fi

# Ensure InnoDB buffer pool size does not exceed available memory
if (( $(echo "${_REC_INNODB_BUFFER_POOL_SIZE_MB} > ${_AVA_MEM_FOR_MYSQL_MB}" | bc -l) )); then
  _REC_INNODB_BUFFER_POOL_SIZE_MB=${_AVA_MEM_FOR_MYSQL_MB}
fi

# Calculate recommended key_buffer_size
if [ "${_REC_KEY_BUFFER_SIZE_MB}" -gt 0 ]; then
  echo "Using MySQLTuner recommended key_buffer_size: ${_REC_KEY_BUFFER_SIZE_MB} MB"
else
  # Default to a minimal value if MyISAM is not used much
  _REC_KEY_BUFFER_SIZE_MB=8
  echo "Calculated key_buffer_size: ${_REC_KEY_BUFFER_SIZE_MB} MB"
fi

# Calculate tmp_table_size and max_heap_table_size
if [ "${_REC_TMP_TABLE_SIZE_MB}" -gt 0 ]; then
  echo "Using MySQLTuner recommended tmp_table_size: ${_REC_TMP_TABLE_SIZE_MB} MB"
else
  _EST_MEM_PER_TMP_TABLE_MB=64  # Estimated size per temp table in MB
  _REC_TMP_TABLE_SIZE_MB=$(echo "${_AVA_MEM_FOR_MYSQL_MB} / 4" | bc)
  if (( $(echo "${_REC_TMP_TABLE_SIZE_MB} > ${_EST_MEM_PER_TMP_TABLE_MB}" | bc -l) )); then
    _REC_TMP_TABLE_SIZE_MB=${_EST_MEM_PER_TMP_TABLE_MB}
  fi
  echo "Calculated tmp_table_size: ${_REC_TMP_TABLE_SIZE_MB} MB"
fi

# Calculate read_rnd_buffer_size
if [ "${_REC_READ_RND_BUFFER_SIZE_MB}" -gt 0 ]; then
  echo "Using MySQLTuner recommended read_rnd_buffer_size: ${_REC_READ_RND_BUFFER_SIZE_MB} MB"
else
  # Default value
  _REC_READ_RND_BUFFER_SIZE_MB=4  # 4MB is a reasonable default
  echo "Calculated read_rnd_buffer_size: ${_REC_READ_RND_BUFFER_SIZE_MB} MB"
fi

# Calculate join_buffer_size
if [ "${_REC_JOIN_BUFFER_SIZE_MB}" -gt 0 ]; then
  echo "Using MySQLTuner recommended join_buffer_size: ${_REC_JOIN_BUFFER_SIZE_MB} MB"
else
  # Default value
  _REC_JOIN_BUFFER_SIZE_MB=8  # 8MB is a reasonable default
  echo "Calculated join_buffer_size: ${_REC_JOIN_BUFFER_SIZE_MB} MB"
fi

# Estimate average memory per connection, including per-connection buffers
_EST_MEM_PER_CON_MB=$(echo "${_REC_READ_RND_BUFFER_SIZE_MB} + ${_REC_JOIN_BUFFER_SIZE_MB} + 4" | bc)  # 4MB for other per-connection buffers

# Ensure _EST_MEM_PER_CON_MB is valid
if ! [[ "${_EST_MEM_PER_CON_MB}" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
  _EST_MEM_PER_CON_MB=16  # Default value
fi

# Calculate max_connections based on available memory
_MAX_POS_CONS=$(echo "${_AVA_MEM_FOR_MYSQL_MB} / ${_EST_MEM_PER_CON_MB}" | bc)

# Ensure _MAX_POS_CONS is valid
if ! [[ "${_MAX_POS_CONS}" =~ ^[0-9]+$ ]]; then
  _MAX_POS_CONS=25
fi

# Ensure max_connections is not set unreasonably high
if [ "${_MAX_POS_CONS}" -gt 500 ]; then
  _REC_MAX_CONS=500
elif [ "${_MAX_POS_CONS}" -lt 25 ]; then
  _REC_MAX_CONS=25
else
  _REC_MAX_CONS=${_MAX_POS_CONS}
fi
echo "Calculated max_connections: ${_REC_MAX_CONS}"

# Calculate innodb_log_file_size or innodb_redo_log_capacity
if [[ "${_MYSQL_VERSION}" =~ ^8\. ]]; then
  if [ "${_REC_INNODB_LOG_SIZE_MB}" -gt 0 ]; then
    echo "Using MySQLTuner recommended innodb_redo_log_capacity: ${_REC_INNODB_LOG_SIZE_MB} MB"
  else
    # Default calculation
    _REC_INNODB_LOG_SIZE_MB=$(echo "(${_REC_INNODB_BUFFER_POOL_SIZE_MB} * 20) / 100" | bc)
    echo "Calculated innodb_redo_log_capacity: ${_REC_INNODB_LOG_SIZE_MB} MB"
  fi
else
  if [ "${_REC_INNODB_LOG_SIZE_MB}" -gt 0 ]; then
    echo "Using MySQLTuner recommended innodb_log_file_size: ${_REC_INNODB_LOG_SIZE_MB} MB"
  else
    # Default calculation
    _REC_INNODB_LOG_SIZE_MB=$(echo "(${_REC_INNODB_BUFFER_POOL_SIZE_MB} * 25) / 100" | bc)
    echo "Calculated innodb_log_file_size: ${_REC_INNODB_LOG_SIZE_MB} MB"
  fi
fi

# Ensure it does not exceed available memory
if (( $(echo "${_REC_INNODB_LOG_SIZE_MB} > ${_AVA_MEM_FOR_MYSQL_MB}" | bc -l) )); then
  _REC_INNODB_LOG_SIZE_MB=${_AVA_MEM_FOR_MYSQL_MB}
fi

# Get current MySQL settings
_get_current_mysql_settings

# Initialize a variable to track if a restart is needed
_NEEDS_RESTART=0

# Function to update MySQL configuration settings
_update_setting() {
  local _setting_name=$1
  local _new_value=$2
  local _current_value=$3
  local _requires_restart=$4
  local _is_memory_size=$5  # New parameter indicating if setting is a memory size

  # Ensure _new_value is valid
  if [ -z "${_new_value}" ] || ! [[ "${_new_value}" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
    echo "Warning: Invalid value for ${_setting_name}. Skipping update."
    return
  fi

  if [ "${_current_value}" != "${_new_value}" ]; then
    if grep -q "^${_setting_name}" "${_TMP_CONFIG_FILE}"; then
      if [ "${_is_memory_size}" -eq 1 ]; then
        sed -i "s|^${_setting_name}.*|${_setting_name} = ${_new_value}M|" "${_TMP_CONFIG_FILE}"
      else
        sed -i "s|^${_setting_name}.*|${_setting_name} = ${_new_value}|" "${_TMP_CONFIG_FILE}"
      fi
    else
      if [ "${_is_memory_size}" -eq 1 ]; then
        echo "${_setting_name} = ${_new_value}M" >> "${_TMP_CONFIG_FILE}"
      else
        echo "${_setting_name} = ${_new_value}" >> "${_TMP_CONFIG_FILE}"
      fi
    fi

    if [ "${_requires_restart}" -eq 1 ]; then
      _NEEDS_RESTART=1
    else
      if [ "${_is_memory_size}" -eq 1 ]; then
        # Apply setting dynamically with multiplication
        mysql -e "SET GLOBAL ${_setting_name}=$(echo "${_new_value} * 1024 * 1024" | bc);"
      else
        # Apply setting dynamically without multiplication
        mysql -e "SET GLOBAL ${_setting_name}=${_new_value};"
      fi
    fi
  fi
}

# Update /etc/mysql/my.cnf if settings differ
_update_mysql_config() {
  _CONFIG_FILE="/etc/mysql/my.cnf"
  _TMP_CONFIG_FILE="/tmp/my.cnf.$$"
  cp "${_CONFIG_FILE}" "${_TMP_CONFIG_FILE}"

  # Update settings
  _update_setting "innodb_buffer_pool_size" "${_REC_INNODB_BUFFER_POOL_SIZE_MB}" "${_CUR_INNODB_BUFFER_POOL_SIZE}" 1 1
  if [[ "${_MYSQL_VERSION}" =~ ^8\. ]]; then
    _update_setting "innodb_redo_log_capacity" "${_REC_INNODB_LOG_SIZE_MB}" "${_CUR_INNODB_LOG_SIZE}" 1 1
  else
    _update_setting "innodb_log_file_size" "${_REC_INNODB_LOG_SIZE_MB}" "${_CUR_INNODB_LOG_SIZE}" 1 1
  fi
  _update_setting "key_buffer_size" "${_REC_KEY_BUFFER_SIZE_MB}" "${_CUR_KEY_BUFFER_SIZE}" 1 1
  _update_setting "max_connections" "${_REC_MAX_CONS}" "${_CUR_MAX_CONS}" 0 0  # Not a memory size
  _update_setting "tmp_table_size" "${_REC_TMP_TABLE_SIZE_MB}" "${_CUR_TMP_TABLE_SIZE}" 0 1
  _update_setting "max_heap_table_size" "${_REC_TMP_TABLE_SIZE_MB}" "${_CUR_TMP_TABLE_SIZE}" 0 1
  _update_setting "read_rnd_buffer_size" "${_REC_READ_RND_BUFFER_SIZE_MB}" "${_CUR_READ_RND_BUFFER_SIZE}" 0 1
  _update_setting "join_buffer_size" "${_REC_JOIN_BUFFER_SIZE_MB}" "${_CUR_JOIN_BUFFER_SIZE}" 0 1

  # Replace the original config file if changes were made
  if cmp -s "${_TMP_CONFIG_FILE}" "${_CONFIG_FILE}"; then
    rm "${_TMP_CONFIG_FILE}"
  else
    mv "${_TMP_CONFIG_FILE}" "${_CONFIG_FILE}"
  fi
}

_update_mysql_config

if [ "${_NEEDS_RESTART}" -eq 1 ]; then
  echo "Some settings require a MySQL restart to take effect."
  echo "Invoking /var/xdrago/move_sql.sh to safely restart MySQL."
  bash /var/xdrago/move_sql.sh
  wait
else
  echo "Settings have been applied dynamically where possible."
  echo "No restart required."
fi
echo "MySQL configuration update completed."
