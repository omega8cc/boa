#!/bin/bash

export HOME=/root
export SHELL=/bin/bash
export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin

_WEBG=www-data
_THIS_DB_PORT=3306
_ieni="--ignore-errors"

###
### Avoid too many questions
###
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi

###-------------SYSTEM-----------------###

_send_notice_migration_complete() {
  _MAILX_TEST=`s-nail -V 2>&1`
  if [[ "${_MAILX_TEST}" =~ "built for Linux" ]]; then
  cat <<EOF | s-nail -b ${_BCC_EMAIL} -s "IMPORTANT: Completed migration to the new facility for ${_DOMAIN}" ${_CLIENT_EMAIL}
Hello,

You are receiving this notification because your Aegir hosting system
migration process to the new facility has been completed.

# Caveats:

  * New Aegir URL is listed in the new welcome email
  * New SSH/SFTP credentials are listed in the new welcome email
  * All cron tasks are paused during this migration and in the next 1-3 hours
  * The old Aegir control panel has been disabled to protect proxy vhosts
  * The main SSH account home directory contents has not been migrated
  * SSH (RSA) keys have been transferred, but only for the main SSH account
  * SSH sub-accounts (Clients), if used, will be recreated from scratch
  * The Aegir backend USER.id_rsa.pub public SSH key has changed

  * NOTE! YOUR **NEW** WELCOME EMAIL CONTAINS THE NEW DEFAULT IP ADDRESS
    of your Aegir instance in the new facility. It is recommended
    that you update DNS for all non-SSL-enabled sites as soon
    as possible, to point the traffic directly to the new servers
    and not rely on the provided proxy for too long.

  * For SSL-enabled sites with dedicated IP addresses - please
    don't update their DNS until you will receive separate email
    with new dedicated IP address to use. Your SSL certificates
    have been migrated automatically, so only DNS update will be needed
    once new IP address is provided.

  * You should use only the new SSH/SFTP credentials listed in the
    new welcome email, because this is your only access to all your
    migrated live/active sites and their files.

  * While Aegir control panel URL has changed, its access credentials
    are still the same as before, in contrast to SSH/SFTP credentials.
    This is to preserve your Aegir control panel tasks history,
    all sites<-->clients associations and domain aliases/redirects.

Kind Regards,
--
Your BOA Server Skynet Agent

EOF
  fi
  echo "INFO: Migration complete notice sent to ${_CLIENT_EMAIL} [${_THIS_HM_USER}]: OK"
}

_send_notice_migration_start() {
  _MAILX_TEST=`s-nail -V 2>&1`
  if [[ "${_MAILX_TEST}" =~ "built for Linux" ]]; then
  cat <<EOF | s-nail -b ${_BCC_EMAIL} -s "STATUS: Running migration to the new facility for ${_DOMAIN}" ${_CLIENT_EMAIL}
Hello,

You are receiving this notification because your Aegir hosting system
migration process to the new facility has been started.

You will receive another email when the migration is complete.

WARNING! Please do not run any tasks in your old Aegir control panel.
It could break special proxy vhosts we have created for you to provide
service continuity during this migration.

Kind Regards,
--
Your BOA Server Skynet Agent

EOF
  fi
  echo "INFO: Migration start notice sent to ${_CLIENT_EMAIL} [${_THIS_HM_USER}]: OK"
}

_enable_chattr() {
  isTest="$1"
  isTest=${isTest//[^a-z0-9]/}
  if [ ! -z "${isTest}" ] && [ -d "/home/$1/" ]; then
    if [ "$1" != "${_THIS_HM_USER}.ftp" ]; then
      chattr +i /home/$1/
    else
      if [ -d "/home/$1/platforms/" ]; then
        chattr +i /home/$1/platforms/
        chattr +i /home/$1/platforms/* &> /dev/null
      fi
    fi
    if [ -d "/home/$1/.drush/" ]; then
      chattr +i /home/$1/.drush/
    fi
    if [ -d "/home/$1/.drush/usr/" ]; then
      chattr +i /home/$1/.drush/usr/
    fi
    if [ -f "/home/$1/.drush/php.ini" ]; then
      chattr +i /home/$1/.drush/*.ini
    fi
    if [ -d "/home/$1/.bazaar/" ]; then
      chattr +i /home/$1/.bazaar/
    fi
  fi
}

_disable_chattr() {
  isTest="$1"
  isTest=${isTest//[^a-z0-9]/}
  if [ ! -z "${isTest}" ] && [ -d "/home/$1/" ]; then
    if [ "$1" != "${_THIS_HM_USER}.ftp" ]; then
      if [ -d "/home/$1/" ]; then
        chattr -i /home/$1/
      fi
    else
      if [ -d "/home/$1/platforms/" ]; then
        chattr -i /home/$1/platforms/
        chattr -i /home/$1/platforms/* &> /dev/null
      fi
    fi
    if [ -d "/home/$1/.drush/" ]; then
      chattr -i /home/$1/.drush/
    fi
    if [ -d "/home/$1/.drush/usr/" ]; then
      chattr -i /home/$1/.drush/usr/
    fi
    if [ -f "/home/$1/.drush/php.ini" ]; then
      chattr -i /home/$1/.drush/*.ini
    fi
    if [ -d "/home/$1/.bazaar/" ]; then
      chattr -i /home/$1/.bazaar/
    fi
  fi
}

_run_drush8_hmr_cmd() {
  su -s /bin/bash - ${_THIS_HM_USER} -c "drush8 @hostmaster $1"
  wait
}

_run_drush8_nosilent_cmd() {
  su -s /bin/bash - ${_THIS_HM_USER} -c "drush8 @${_Dom} $1"
  wait
}

_migrate_sites() {
  for _Site in `find ${_USR}/config/server_master/nginx/vhost.d -maxdepth 1 -mindepth 1 -type f | sort`
  do
    _Dom=`echo ${_Site} | cut -d'/' -f9 | awk '{ print $1}'`
    _Vht="${_USR}/config/server_master/nginx/vhost.d/${_Dom}"
    Vhd="${_USR}/config/server_master/nginx/vhost.d/.${_Dom}"
    _Vhs="${_USR}/config/server_master/nginx/vhost.d/https.${_Dom}"
    if [ -e "${_Vht}" ] && [ ! -z "${_oct}" ]; then
      chown ${_oct}:users ${_Vht}
      chmod 600 ${_Vht}
    fi
    if [ -e "${Vhd}" ] && [ ! -z "${_oct}" ]; then
      chown ${_oct}:users ${Vhd}
      chmod 600 ${Vhd}
    fi
    if [ -e "${_USR}/.drush/${_Dom}.alias.drushrc.php" ]; then
      echo Dom is ${_Dom}
      _Dir=`cat ${_USR}/.drush/${_Dom}.alias.drushrc.php | grep "site_path'" | cut -d: -f2 | awk '{ print $3}' | sed "s/[\,']//g"`
      _Plr=`cat ${_USR}/.drush/${_Dom}.alias.drushrc.php | grep "root'" | cut -d: -f2 | awk '{ print $3}' | sed "s/[\,']//g"`
      if [ "${_cmd}" = "import" ] || [ "${_cmd}" = "export" ]; then
        _DBN=`cat ${_Dir}/drushrc.php | grep "options\['db_name'\] = " | cut -d: -f2 | awk '{ print $3}' | sed "s/[\,';]//g"`
        echo "site ${_Dom} raw _DBN is ${_DBN}"
        _DBN=${_DBN//[^a-zA-Z0-9_]/}
        echo "site ${_Dom} clean _DBN is ${_DBN}"
      fi
      if [ "${_cmd}" = "import" ]; then
        _DBP=`cat ${_Dir}/drushrc.php | grep "options\['db_passwd'\] = " | cut -d: -f2 | awk '{ print $3}' | sed "s/[\,';]//g"`
        echo "site ${_Dom} raw _DBP is ${_DBP}"
        _DBP=${_DBP//[^a-zA-Z0-9_]/}
        echo "site ${_Dom} clean _DBP is ${_DBP}"
        if [ -e "${Vhd}" ]; then
          mv -f ${Vhd} ${_Vht}
        fi
        if [ ! -z "${_dst}" ]; then
          _TGT_HM_USER="${_dst}"
        else
          _TGT_HM_USER="${_oct}"
        fi
        chown ${_TGT_HM_USER}:users ${_Vht}
        chmod 600 ${_Vht}
        if [ -e "${_Dir}/drushrc.php" ]; then
          sed -i "s/\$options\['db_host'\] = '.*/\$options[\'db_host\'] = \'localhost\';/g" ${_Dir}/drushrc.php
          wait
        fi
        if [ -e "${_Vht}" ]; then
          sed -i "s/.*fastcgi_param.*db_host.*;/  fastcgi_param db_host   localhost;/g" ${_Vht}
          wait
        fi
        echo "INFO: site ${_Dom} db_host on ${_TGT_HM_USER} fixed"
        if [ ! -z "${_DBN}" ] && [ ! -z "${_DBP}" ]; then
          if [ ! -d "/var/lib/mysql/${_DBN}" ]; then
            if [ -e "/data/conf/${_USR}_use_proxysql.txt" ]; then
              _SQL_CONNECT=127.0.0.1
              _THIS_DB_PORT=6033
              mysqladmin -u root -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp flush-privileges &> /dev/null
            else
              mysqladmin -u root flush-privileges &> /dev/null
            fi
            [ -e "/root/.my.cluster_root_pwd.txt" ] && echo "SQL3 -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp -uroot"
            if [ -e "/root/.my.proxysql_adm_pwd.txt" ]; then
              _PROXYSQL_PASSWORD=$(cat /root/.my.proxysql_adm_pwd.txt 2>&1)
              _PROXYSQL_PASSWORD=$(echo -n ${_PROXYSQL_PASSWORD} | tr -d "\n" 2>&1)
              mysql -uadmin -p${_PROXYSQL_PASSWORD} -h127.0.0.1 -P6032 --protocol=tcp<<PROXYSQL
DELETE FROM mysql_users WHERE username='${_DBN}';
DELETE FROM mysql_query_rules WHERE username='${_DBN}';
INSERT INTO mysql_users (username,password,default_hostgroup) VALUES ('${_DBN}','${_DBP}','10');
LOAD MYSQL USERS TO RUNTIME;
SAVE MYSQL USERS FROM RUNTIME;
SAVE MYSQL USERS TO DISK;
INSERT INTO mysql_query_rules (username,destination_hostgroup,active) VALUES ('${_DBN}',10,1);
INSERT INTO mysql_query_rules (username,destination_hostgroup,active) VALUES ('${_DBN}',11,1);
LOAD MYSQL QUERY RULES TO RUNTIME;
SAVE MYSQL QUERY RULES TO DISK;
PROXYSQL
            fi
            mysql --silent -u root -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp -u root mysql<<EOFMYSQL
CREATE DATABASE ${_DBN} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER IF NOT EXISTS '${_DBN}'@'localhost';
CREATE USER IF NOT EXISTS '${_DBN}'@'%';
GRANT ALL ON ${_DBN}.* TO '${_DBN}'@'localhost' WITH GRANT OPTION;
GRANT ALL ON ${_DBN}.* TO '${_DBN}'@'%' WITH GRANT OPTION;
ALTER USER '${_DBN}'@'localhost' IDENTIFIED BY '${_DBP}';
ALTER USER '${_DBN}'@'%' IDENTIFIED BY '${_DBP}';
EOFMYSQL
            if [ -e "/data/conf/${_USR}_use_proxysql.txt" ]; then
              _SQL_CONNECT=127.0.0.1
              _THIS_DB_PORT=6033
              mysqladmin -u root -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp flush-privileges &> /dev/null
            else
              mysqladmin -u root flush-privileges &> /dev/null
            fi
            echo "INFO: site ${_Dom} db setup on ${_oct} complete"
          else
            echo "ALRT: site ${_Dom} db ${_DBN} already exists!"
          fi
          if [ -e "${_USR}/src/${_DBN}" ]; then
            if [ -e "/data/conf/${_USR}_use_proxysql.txt" ]; then
              _SQL_CONNECT=127.0.0.1
              _THIS_DB_PORT=6033
            fi
            [ -e "/root/.my.cluster_root_pwd.txt" ] && echo "SQL4 -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp"
            if [ -x "/usr/local/bin/mydumper" ]; then
              _MYQUICK_ITD=$(mydumper -V 2>&1 \
                | tr -d "\n" \
                | tr -d "," \
                | tr -d "v" \
                | cut -d" " -f2 \
                | awk '{ print $1}' 2>&1)
              _DB_V=$(mysql -V 2>&1 \
                | tr -d "\n" \
                | cut -d" " -f6 \
                | awk '{ print $1}' \
                | cut -d"-" -f1 \
                | awk '{ print $1}' \
                | sed "s/[\,']//g" 2>&1)
              if [ "${_DB_V}" = "Linux" ]; then
                _DB_V=$(mysql -V 2>&1 \
                  | tr -d "\n" \
                  | cut -d" " -f4 \
                  | awk '{ print $1}' \
                  | cut -d"-" -f1 \
                  | awk '{ print $1}' \
                  | sed "s/[\,']//g" 2>&1)
              fi
              _MD_V=$(mydumper --version 2>&1 \
                | tr -d "\n" \
                | cut -d" " -f6 \
                | awk '{ print $1}' \
                | cut -d"-" -f1 \
                | awk '{ print $1}' \
                | sed "s/[\,']//g" 2>&1)
              if [ "${_DEBUG_MODE}" = "YES" ]; then
                echo "INFO: Installed MyQuick ${_MYQUICK_ITD} for ${_MD_V} (${_DB_V})"
              fi
            fi
            myloader \
              --database=${_DBN} \
              --host=localhost \
              --user=root \
              --password=${_SQL_PSWD} \
              --port=3306 \
              --directory=${_USR}/src/${_DBN}/ \
              --threads=4 \
              --overwrite-tables \
              --verbose=1
            echo "INFO: site ${_Dom} db import on ${_oct} complete"
            ###
            ### Activate readonly on source via global.inc and not via drush
            ###
            ### _run_drush8_nosilent_cmd "variable-set --always-set site_readonly 0"
            ### _run_drush8_nosilent_cmd "dis readonlymode -y"
            ### echo "INFO: site ${_Dom} readonlymode on ${_oct} disabled"
            ###
          else
            echo "ALRT: site ${_Dom} db failure due to missing ${_USR}/src/${_DBN}"
          fi
          if [ -e "${_USR}/.drush/${_Dom}.alias.drushrc.php" ]; then
            _run_drush8_hmr_cmd "hosting-task @${_Dom} verify --force"
            echo "INFO: site ${_Dom} verify on ${_oct} scheduled"
          else
            echo "ALRT: site ${_Dom} verify failure due to missing ${_USR}/.drush/${_Dom}.alias.drushrc.php"
          fi
        else
          echo "ALRT: site ${_Dom} db failure due to empty _DBN/${_DBN} or _DBP/${_DBP}"
        fi
      elif [ "${_cmd}" = "export" ]; then
        _run_drush8_nosilent_cmd "en readonlymode -y"
        ###
        ### Activate readonly on source via global.inc and not via drush
        ###
        ### _run_drush8_nosilent_cmd "variable-set --always-set site_readonly 1"
        ###
        echo "INFO: site ${_Dom} readonlymode module on ${_oct} enabled"
        if [ -x "/usr/local/bin/mydumper" ]; then
          _MYQUICK_ITD=$(mydumper -V 2>&1 \
            | tr -d "\n" \
            | tr -d "," \
            | tr -d "v" \
            | cut -d" " -f2 \
            | awk '{ print $1}' 2>&1)
          _DB_V=$(mysql -V 2>&1 \
            | tr -d "\n" \
            | cut -d" " -f6 \
            | awk '{ print $1}' \
            | cut -d"-" -f1 \
            | awk '{ print $1}' \
            | sed "s/[\,']//g" 2>&1)
          if [ "${_DB_V}" = "Linux" ]; then
            _DB_V=$(mysql -V 2>&1 \
              | tr -d "\n" \
              | cut -d" " -f4 \
              | awk '{ print $1}' \
              | cut -d"-" -f1 \
              | awk '{ print $1}' \
              | sed "s/[\,']//g" 2>&1)
          fi
          _MD_V=$(mydumper --version 2>&1 \
            | tr -d "\n" \
            | cut -d" " -f6 \
            | awk '{ print $1}' \
            | cut -d"-" -f1 \
            | awk '{ print $1}' \
            | sed "s/[\,']//g" 2>&1)
          if [ "${_DEBUG_MODE}" = "YES" ]; then
            echo "INFO: Installed MyQuick ${_MYQUICK_ITD} for ${_MD_V} (${_DB_V})"
          fi
        fi
        mkdir -p ${_USR}/src/${_DBN}
        mydumper \
          --database=${_DBN} \
          --host=localhost \
          --user=root \
          --password=${_SQL_PSWD} \
          --port=3306 \
          --outputdir=${_USR}/src/${_DBN}/ \
          --rows=50000 \
          --build-empty-files \
          --threads=4 \
          --less-locking \
          --long-query-guard=900 \
          --verbose=1
        echo "INFO: site ${_Dom} db export on ${_oct} complete"
      elif [ "${_cmd}" = "proxy" ]; then
        if [ -e "${_USR}/log/exported.pid" ] && [ ! -z "${_tgt}" ]; then
          if [ -e "${_Vht}" ]; then
            _NMS=`cat ${_Vht} | grep "server_name" | sed "s/server_name//g; s/;//g" | sort | uniq | tr -d "\n" | sed "s/  / /g; s/  / /g; s/  / /g" | sort | uniq`
            if [ -e "${_USR}/config/server_master/ssl.d/${_Dom}/openssl.key" ] \
              && [ -e "/var/xdrago/conf/https_proxy_le.conf" ]; then
              cp -a /var/xdrago/conf/https_proxy_le.conf ${_Vhs}
              sed -i "s/.*server_name.*;/  server_name                 ${_NMS};/g" ${_Vhs}
              wait
              sed -i "s/target_ip/${_tgt}/g" ${_Vhs}
              wait
              sed -i "s/oct_uid/${_oct}/g" ${_Vhs}
              wait
              sed -i "s/domain_name/${_Dom}/g" ${_Vhs}
              wait
              chown ${_oct}:users ${_Vhs}
              chmod 600 ${_Vhs}
            fi
            mv -f ${_Vht} $Vhd
            cp -a /var/xdrago/conf/proxy.conf ${_Vht}
            sed -i "s/.*server_name.*;/  server_name                 ${_NMS};/g" ${_Vht}
            wait
            sed -i "s/target_ip/${_tgt}/g" ${_Vht}
            wait
            chown ${_oct}:users ${_Vht}
            chmod 600 ${_Vht}
            echo "INFO: site ${_Dom} proxy conversion on ${_oct} complete"
          else
            echo "ALRT: site ${_Dom} proxy conversion on ${_oct} failed due to missing ${_Vht}"
          fi
        else
          echo "ALRT: site ${_Dom} proxy conversion on ${_oct} failed due to empty tgt/${_tgt}"
        fi
      fi
    fi
  done
}

_delete_this_platform() {
  _run_drush8_hmr_cmd "hosting-task @platform_${_T_PFM_NAME} delete --force"
  echo "Old empty platform_${_T_PFM_NAME} will be deleted"
  _run_drush8_hmr_cmd "hosting-dispatch"
  sleep 5
  _run_drush8_hmr_cmd "hosting-tasks --force"
  sleep 1
}

_migrate_prepare() {
  _THIS_HM_USER=${_oct}
  _USR=/data/disk/${_oct}
  _THIS_HM_SITE=`cat ${_USR}/.drush/hostmaster.alias.drushrc.php \
    | grep "site_path'" \
    | cut -d: -f2 \
    | awk '{ print $3}' \
    | sed "s/[\,']//g"`
  echo _THIS_HM_USER ${_THIS_HM_USER}
  echo _USR ${_USR}
  echo _THIS_HM_SITE ${_THIS_HM_SITE}
  if [ -e "${_USR}/log/option.txt" ]; then
    _CLIENT_OPTION=`cat ${_USR}/log/option.txt`
    _CLIENT_OPTION=`echo -n ${_CLIENT_OPTION} | tr -d "\n"`
  fi
  if [ -e "${_USR}/log/cores.txt" ]; then
    _CLIENT_CORES=`cat ${_USR}/log/cores.txt`
    _CLIENT_CORES=`echo -n ${_CLIENT_CORES} | tr -d "\n"`
  fi
  if [ -e "${_USR}/log/subscr.txt" ]; then
    _CLIENT_SUBSCR=`cat ${_USR}/log/subscr.txt`
    _CLIENT_SUBSCR=`echo -n ${_CLIENT_SUBSCR} | tr -d "\n"`
  fi
  if [ -e "${_USR}/log/email.txt" ]; then
    _CLIENT_EMAIL=`cat ${_USR}/log/email.txt`
    _CLIENT_EMAIL=`echo -n ${_CLIENT_EMAIL} | tr -d "\n"`
    if [[ "${_CLIENT_EMAIL}" =~ "@" ]]; then
      _DO_NOTHING=YES
    else
      _CLIENT_EMAIL="omega8cc@gmail.com"
    fi
    _CLIENT_EMAIL=${_CLIENT_EMAIL//\\\@/\@}
  fi

  [ -z "${_THIS_DB_PORT}" ] && _THIS_DB_PORT=3306
  [ -z "${_CLIENT_OPTION}" ] && _CLIENT_OPTION=EDGE
  [ -z "${_CLIENT_SUBSCR}" ] && _CLIENT_SUBSCR=M
  [ -z "${_CLIENT_CORES}" ]  && _CLIENT_CORES=1
  [ -z "${_CLIENT_EMAIL}" ]  && _CLIENT_EMAIL="omega8cc@gmail.com"

  echo "_CLIENT_EMAIL is ${_CLIENT_EMAIL}"
  echo "_THIS_HM_USER is ${_THIS_HM_USER}"
  echo "_CLIENT_OPTION is ${_CLIENT_OPTION}"
  echo "_CLIENT_SUBSCR is ${_CLIENT_SUBSCR}"
  echo "_CLIENT_CORES is ${_CLIENT_CORES}"

  if [ "${_cmd}" = "export" ] && [ ! -z "${_CLIENT_EMAIL}" ]; then
    _send_notice_migration_start
  fi

  su -s /bin/bash ${_THIS_HM_USER} -c "drush8 cc drush" &> /dev/null
  wait
  _disable_chattr ${_THIS_HM_USER}.ftp &> /dev/null
  rm -rf /home/${_THIS_HM_USER}.ftp/drush-backups
  _run_drush8_hmr_cmd "sqlq \"DELETE FROM hosting_task WHERE task_type='delete' AND task_status='-1'\""
  _run_drush8_hmr_cmd "sqlq \"DELETE FROM hosting_task WHERE task_type='delete' AND task_status='0' AND executed='0'\""
  rm -rf ${_USR}/clients/*/backups
  symlinks -dr ${_USR}/clients &> /dev/null
  if [ -d "/home/${_THIS_HM_USER}.ftp" ]; then
    symlinks -dr /home/${_THIS_HM_USER}.ftp &> /dev/null
    rm -f /home/${_THIS_HM_USER}.ftp/{.profile,.bash_logout,.bash_profile,.bashrc}
  fi
  if [ -e "${_THIS_HM_SITE}/drushrc.php" ]; then
    _HDB=`cat ${_THIS_HM_SITE}/drushrc.php \
      | grep "options\['db_name'\] = " \
      | cut -d: -f2 \
      | awk '{ print $3}' \
      | sed "s/[\,';]//g"`
    echo "raw _HDB is ${_HDB}"
    _HDB=${_HDB//[^a-zA-Z0-9_]/}
    echo "clean _HDB is ${_HDB}"
  else
    echo "no ${_THIS_HM_SITE}/drushrc.php found"
  fi
  mkdir -p ${_USR}/src
  if [ "${_cmd}" = "export" ] \
    && [ ! -z "${_HDB}" ] \
    && [ ! -e "${_USR}/src/prev_hostmaster.sql" ] \
    && [ ! -e "${_USR}/log/exported.pid" ]; then
      mysqldump -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp \
        --single-transaction \
        --quick \
        --no-autocommit \
        --skip-add-locks \
        --no-tablespaces \
        --hex-blob ${_HDB} \
        comment \
        date_format_locale \
        date_format_type \
        date_formats \
        fe_block_boxes \
        field_config \
        field_config_instance \
        field_data_body \
        field_data_comment_body \
        field_data_field_composer_git_docroot \
        field_data_field_composer_git_path \
        field_data_field_composer_git_project_url \
        field_data_field_composer_git_version \
        field_data_field_composer_project_docroot \
        field_data_field_composer_project_package \
        field_data_field_composer_project_path \
        field_data_field_composer_project_version \
        field_data_field_deployment_strategy \
        field_data_field_git_docroot \
        field_data_field_git_reference \
        field_data_field_git_repository_path \
        field_data_field_git_repository_url \
        field_revision_body \
        field_revision_comment_body \
        field_revision_field_composer_git_docroot \
        field_revision_field_composer_git_path \
        field_revision_field_composer_git_project_url \
        field_revision_field_composer_git_version \
        field_revision_field_composer_project_docroot \
        field_revision_field_composer_project_package \
        field_revision_field_composer_project_path \
        field_revision_field_composer_project_version \
        field_revision_field_deployment_strategy \
        field_revision_field_git_docroot \
        field_revision_field_git_reference \
        field_revision_field_git_repository_path \
        field_revision_field_git_repository_url \
        filter \
        filter_format \
        history \
        hosting_backup_gc_sites \
        hosting_client \
        hosting_client_user \
        hosting_context \
        hosting_cron \
        hosting_package \
        hosting_package_instance \
        hosting_package_languages \
        hosting_platform \
        hosting_platform_client_access \
        hosting_site \
        hosting_site_alias \
        hosting_site_backups \
        hosting_ssl_cert \
        hosting_ssl_cert_ips \
        hosting_ssl_site \
        hosting_task \
        hosting_task_arguments \
        hosting_task_log \
        node \
        node_access \
        node_comment_statistics \
        node_revision \
        node_type \
        role \
        role_permission \
        url_alias \
        userprotect \
        users \
        users_roles \
        > ${_USR}/src/prev_hostmaster.sql
    _run_drush8_hmr_cmd "variable-set --always-set maintenance_mode 1"
    if [ -e "${_USR}/src/prev_hostmaster.sql" ]; then
      echo "INFO: hostmaster ${_oct} db export complete"
      touch ${_USR}/log/exported.pid
    else
      echo "ALRT: no ${_USR}/src/prev_hostmaster.sql exists!"
      exit 1
    fi
  fi
  if [ "${_cmd}" = "import" ] \
    && [ -e "${_USR}/config/includes/nginx_vhost_common.conf" ] \
    && [ ! -z "${_HDB}" ] \
    && [ -e "${_USR}/src/prev_hostmaster.sql" ] \
    && [ ! -e "${_USR}/log/imported.pid" ]; then
    if [ ! -z "${_dst}" ]; then
      if [ "${_oct}" = "${_dst}" ]; then
        [ -e "/root/.my.cluster_root_pwd.txt" ] && echo "SQL5 -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp"
        mysql --silent -u root -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp ${_HDB} < ${_USR}/src/prev_hostmaster.sql
        _run_drush8_hmr_cmd "variable-set --always-set site_frontpage 'hosting/sites'"
        touch ${_USR}/log/imported.pid
      fi
    else
      [ -e "/root/.my.cluster_root_pwd.txt" ] && echo "SQL6 -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp"
      mysql --silent -u root -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp ${_HDB} < ${_USR}/src/prev_hostmaster.sql
      _run_drush8_hmr_cmd "variable-set --always-set site_frontpage 'hosting/sites'"
      touch ${_USR}/log/imported.pid
    fi

    if [ "${_fix}" = "fix" ]; then
      if [ ! -e "${_USR}/log/post-merge-fix.pid" ]; then
        echo "HOTFIX B: Hostmaster STATUS: Fix for migrated/merged instance 1/2 start"
        _DOMAIN=`cat ${_USR}/log/domain.txt`
        _DOMAIN=`echo -n ${_DOMAIN} | tr -d "\n"`
        _USE_AEGIR_HOST=`uname -n`

        ### Pre-Fix for migrated/merged instances
        if [ -e "${_USR}/log/imported.pid" ] || [ -e "${_USR}/log/exported.pid" ]; then
          if [ -e "${_USR}/aegir/distro/001/sites/${_DOMAIN}/drushrc.php" ]; then
            sed -i "s/platform_0.*'/platform_hostmaster'/g"    ${_USR}/.drush/hostmaster.alias.drushrc.php
            wait
            sed -i "s/distro\/0.*\/sites/distro\/001\/sites/g" ${_USR}/.drush/hostmaster.alias.drushrc.php
            wait
            sed -i "s/distro\/01.*',/distro\/001',/g"          ${_USR}/.drush/hostmaster.alias.drushrc.php
            wait
            sed -i "s/distro\/02.*',/distro\/001',/g"          ${_USR}/.drush/hostmaster.alias.drushrc.php
            wait
            sed -i "s/distro\/03.*',/distro\/001',/g"          ${_USR}/.drush/hostmaster.alias.drushrc.php
            wait
            sed -i "s/distro\/04.*',/distro\/001',/g"          ${_USR}/.drush/hostmaster.alias.drushrc.php
            wait
            sed -i "s/distro\/05.*',/distro\/001',/g"          ${_USR}/.drush/hostmaster.alias.drushrc.php
            wait
            sed -i "s/platform_0.*'/platform_hostmaster'/g"    ${_USR}/.drush/hm.alias.drushrc.php
            wait
            sed -i "s/distro\/0.*\/sites/distro\/001\/sites/g" ${_USR}/.drush/hm.alias.drushrc.php
            wait
            sed -i "s/distro\/01.*',/distro\/001',/g"          ${_USR}/.drush/hm.alias.drushrc.php
            wait
            sed -i "s/distro\/02.*',/distro\/001',/g"          ${_USR}/.drush/hm.alias.drushrc.php
            wait
            sed -i "s/distro\/03.*',/distro\/001',/g"          ${_USR}/.drush/hm.alias.drushrc.php
            wait
            sed -i "s/distro\/04.*',/distro\/001',/g"          ${_USR}/.drush/hm.alias.drushrc.php
            wait
            sed -i "s/distro\/05.*',/distro\/001',/g"          ${_USR}/.drush/hm.alias.drushrc.php
            for Platform in `find ${_USR}/.drush/platform_* -maxdepth 1 -type f | sort`; do
              _T_PFM_NAME=$(echo "${Platform}" \
                | sed "s/.*platform_//g; s/.alias.drushrc.php//g" \
                | awk '{ print $1}' 2>&1)
              _T_PFM_ROOT=$(cat ${Platform} \
                | grep "root'" \
                | cut -d: -f2 \
                | awk '{ print $3}' \
                | sed "s/[\,']//g" 2>&1)
              _T_PFM_SITE=$(grep "${_T_PFM_ROOT}/sites/" \
                ${_USR}/.drush/*.drushrc.php \
                | grep site_path 2>&1)
              if [ ! -e "${_T_PFM_ROOT}/sites/all" ] \
                && [ "${_T_PFM_NAME}" != "hostmaster" ]; then
                _delete_this_platform
                mkdir -p ${_USR}/undo
                mv -f ${_USR}/.drush/platform_${_T_PFM_NAME}.alias.drushrc.php \
                  ${_USR}/undo/ &> /dev/null
                echo "GHOST platform ${_T_PFM_ROOT} detected and moved to ${_USR}/undo/"
              fi
              if [[ "${_T_PFM_SITE}" =~ ".restore" ]]; then
                echo "WARNING: ghost site leftover found: ${_T_PFM_SITE}"
              fi
              if [ -z "${_T_PFM_SITE}" ] \
                && [ "${_T_PFM_NAME}" != "hostmaster" ] \
                && [ -e "${_T_PFM_ROOT}/sites/all" ]; then
                _delete_this_platform
              fi
            done
          fi
        fi

        _run_drush8_hmr_cmd "sqlq \"REPLACE INTO hosting_context (nid, name) VALUES ('4', 'server_localhost'), ('2', 'server_master')\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"REPLACE INTO hosting_package (vid, nid, package_type, short_name, old_short_name, description) VALUES ('6', '6', 'platform', 'drupal', '', '')\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"REPLACE INTO node_revision (nid, vid, uid, title, body, teaser, log, timestamp, format) VALUES ('6', '6', '1', 'drupal', '', '', '', '1412168340', '0')\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"REPLACE INTO node (nid, vid, type, language, title, uid, status, created, changed, comment, promote, moderate, sticky, tnid, translate) VALUES ('6', '6', 'package', '', 'drupal', '1', '1', '1412168321', '1412168340', '0', '0', '0', '0', '0', '0')\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"DELETE FROM hosting_package WHERE nid='2' AND short_name='drupal'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"DELETE FROM hosting_package WHERE nid='4' AND short_name='drupal'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"DELETE FROM node WHERE nid='8' AND type='site'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"DELETE FROM node_revision WHERE nid='8'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"UPDATE node SET type='server' WHERE nid='2'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"UPDATE node SET type='server' WHERE nid='4'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"UPDATE node SET title='${_USE_AEGIR_HOST}' WHERE nid='2'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"UPDATE node SET title='localhost' WHERE nid='4'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"UPDATE node_revision SET title='${_USE_AEGIR_HOST}' WHERE nid='2'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"UPDATE node_revision SET title='localhost' WHERE nid='4'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"UPDATE hosting_site SET db_server='4' WHERE db_server='2'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"UPDATE hosting_platform SET web_server='2' WHERE web_server='0'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"UPDATE users_roles SET rid='7' WHERE rid='5'\"" &> /dev/null
        su -s /bin/bash ${_THIS_HM_USER} -c "drush8 cc drush" &> /dev/null
        wait
        rm -rf ${_USR}/.tmp/cache
        _run_drush8_hmr_cmd "hosting-task @server_localhost verify --force" &> /dev/null
        _run_drush8_hmr_cmd "hosting-dispatch" &> /dev/null
        sleep 5
        _run_drush8_hmr_cmd "hosting-tasks --force" &> /dev/null
        echo "HOTFIX B: Hostmaster STATUS: Fix for migrated/merged instance 1/2 complete"
      fi
      _run_drush8_hmr_cmd "sqlq \"UPDATE hosting_site SET client='1' WHERE profile='7'\"" &> /dev/null
      _run_drush8_hmr_cmd "sqlq \"UPDATE hosting_site SET client='1' WHERE profile='9'\"" &> /dev/null
      _run_drush8_hmr_cmd "sqlq \"UPDATE hosting_site SET client='1' WHERE client='0'\"" &> /dev/null
      _run_drush8_hmr_cmd "sqlq \"UPDATE hosting_platform SET web_server='2' WHERE web_server='0'\"" &> /dev/null
      _run_drush8_hmr_cmd "sqlq \"UPDATE node SET uid='1' WHERE uid='0'\"" &> /dev/null
      _run_drush8_hmr_cmd "sqlq \"UPDATE node_revision SET uid='1' WHERE uid='0'\"" &> /dev/null
      _HM_NID=$(_run_drush8_hmr_cmd "sqlq \"SELECT site.nid FROM hosting_site site JOIN hosting_package_instance pkgi ON pkgi.rid=site.nid JOIN hosting_package pkg ON pkg.nid=pkgi.package_id WHERE pkg.short_name='hostmaster'\"" 2>&1)
      _HM_NID=${_HM_NID//[^0-9]/}
      if [ ! -z "${_HM_NID}" ]; then
        echo "HOTFIX B: Hostmaster STATUS: Fix 1/2 hosting_context ${_HM_NID}"
        if [ -e "${_USR}/aegir/distro/001/sites/${_DOMAIN}/drushrc.php" ]; then
          _HM_PLF=$(_run_drush8_hmr_cmd "sqlq \"SELECT platform FROM hosting_site WHERE nid='${_HM_NID}'\"" 2>&1)
          _HM_PLF=${_HM_PLF//[^0-9]/}
          _run_drush8_hmr_cmd "sqlq \"DELETE FROM hosting_context WHERE name='platform_hostmaster' AND nid != '${_HM_PLF}'\"" &> /dev/null
          _run_drush8_hmr_cmd "sqlq \"UPDATE hosting_context SET name='platform_hostmaster' WHERE nid='${_HM_PLF}'\"" &> /dev/null
        fi
        _run_drush8_hmr_cmd "sqlq \"UPDATE hosting_context SET name='hostmaster' WHERE nid='${_HM_NID}'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"UPDATE node SET title='${_DOMAIN}' WHERE nid='${_HM_NID}'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"UPDATE node_revision SET title='${_DOMAIN}' WHERE nid='${_HM_NID}'\"" &> /dev/null
        _run_drush8_hmr_cmd "sqlq \"UPDATE hosting_site_alias SET alias='www.${_DOMAIN}' WHERE nid='${_HM_NID}'\"" &> /dev/null
        echo FIXED > ${_USR}/log/post-merge-fix.pid
      else
        echo "HOTFIX B: Hostmaster STATUS: Fix 1/2 hosting_context _HM_NID empty!"
      fi
      if [ -e "${_USR}/aegir/distro/001/sites/${_DOMAIN}/drushrc.php" ] \
        && [ ! -e "${_USR}/log/hmpathfix.pid" ]; then
        _run_drush8_hmr_cmd "sqlq \"UPDATE hosting_platform SET publish_path='${_USR}/aegir/distro/001' WHERE publish_path LIKE '%/aegir/distro/%'\"" &> /dev/null
        touch ${_USR}/log/hmpathfix.pid
      fi
    fi

  fi
  if [ "${_cmd}" = "create" ]; then
    if [ ! -z "${_dst}" ]; then
      _TGT_HM_USER="${_dst}"
    else
      _TGT_HM_USER="${_oct}"
    fi
    if [ ! -z "${_CLIENT_EMAIL}" ] \
      && [ ! -z "${_TGT_HM_USER}" ] \
      && [ ! -z "${_CLIENT_OPTION}" ] \
      && [ ! -z "${_CLIENT_SUBSCR}" ] \
      && [ ! -z "${_CLIENT_CORES}" ]; then
      ssh root@${_tgt} "/opt/local/bin/boa in-octopus ${_CLIENT_EMAIL} ${_TGT_HM_USER} none ${_CLIENT_OPTION} ${_CLIENT_SUBSCR} ${_CLIENT_CORES}"
      ssh root@${_tgt} "/bin/rm -f /data/disk/${_TGT_HM_USER}/tools/le/.ctrl/ssl-demo-mode.pid"
      ssh root@${_tgt} "/bin/rm -f /data/disk/${_TGT_HM_USER}/tools/le/config"
      ssh root@${_tgt} "/bin/rm -f /data/disk/${_TGT_HM_USER}/tools/le/config.sh"
      echo "INFO: new octopus ${_TGT_HM_USER} setup on ${_tgt} complete"
    else
      echo "ALRT: new octopus ${_TGT_HM_USER} setup on ${_tgt} failed because of missing arguments"
      exit 1
    fi
  fi
  if [ "${_cmd}" = "import" ] \
    || [ "${_cmd}" = "export" ] \
    || [ "${_cmd}" = "proxy" ]; then
    _migrate_sites
  fi
  echo Done ${_cmd} for ${_USR}
  _enable_chattr ${_THIS_HM_USER}.ftp &> /dev/null
}

_migrate_init() {
  _USR=/data/disk/${_oct}
  if [ ! -e "${_USR}/tools/le/dehydrated" ] && [ "${_oct}" != "shared" ]; then
    echo
    echo "ERROR: This version of xboa migration tool supports only BOA-3.2.2 or newer"
    echo "ERROR: Please upgrade ${_oct} instance to current BOA head before trying again"
    echo "Bye."
    echo
    exit 1
  fi
  if [ -e "/data/conf/${_USR}_use_proxysql.txt" ]; then
    _SQL_CONNECT=127.0.0.1
    _THIS_DB_PORT=6033
  fi
  rm -f /root/scentral_migration_notice.sh.txt
  if [ "${_oct}" = "xusage" ]; then
    echo "INFO: ${_cmd} for ${_oct} to ${_tgt} start"
    if [ -e "/var/xdrago/log/usage" ]; then
      rsync -aEAXq ${_ieni} -e ssh /var/xdrago/log/usage/* root@${_tgt}:/var/xdrago/log/usage/
      echo "INFO: ${_cmd} for ${_oct} /var/xdrago/log/usage complete"
    fi
    echo "INFO: ${_cmd} for ${_oct} to ${_tgt} complete"
  elif [ "${_oct}" = "shared" ]; then
    echo "INFO: ${_cmd} for ${_oct} to ${_tgt} start"
    if [ -d "/data/all" ] && [ ! -L "/data/all" ]; then
      rsync -aEAXqu ${_ieni} -e ssh /data/all  root@${_tgt}:/data/
      echo "INFO: ${_cmd} for ${_oct} /data/all complete"
    fi
    if [ -d "/data/disk/all" ]; then
      rsync -aEAXqu ${_ieni} -e ssh /data/disk/all  root@${_tgt}:/data/
      echo "INFO: ${_cmd} for ${_oct} /data/disk/all complete"
    fi
    if [ -e "/data/disk/arch" ]; then
      rsync -aEAXqu ${_ieni} -e ssh /data/disk/arch  root@${_tgt}:/data/disk/
      echo "INFO: ${_cmd} for ${_oct} /data/disk/arch complete"
    fi
    if [ -e "/opt/solr4" ]; then
      rsync -aEAXq ${_ieni} -e ssh /opt/solr4 root@${_tgt}:/opt/
      echo "INFO: ${_cmd} for ${_oct} /opt/solr4 complete"
    fi
    if [ -e "/var/solr7/data" ]; then
      rsync -aEAXq ${_ieni} -e ssh /var/solr7/data root@${_tgt}:/var/solr7/
      echo "INFO: ${_cmd} for ${_oct} /var/solr7/data complete"
    fi
    if [ -e "/var/www/static" ]; then
      rsync -aEAXq ${_ieni} -e ssh /var/www/static root@${_tgt}:/var/www/
      echo "INFO: ${_cmd} for ${_oct} /var/www/static complete"
    fi
    if [ -e "/etc/bind" ]; then
      rsync -aEAXq ${_ieni} -e ssh /etc/bind root@${_tgt}:/etc/
      echo "INFO: ${_cmd} for ${_oct} /etc/bind complete"
    fi
    if [ -e "/var/xdrago/log/usage" ]; then
      rsync -aEAXq ${_ieni} -e ssh /var/xdrago/log/usage root@${_tgt}:/var/xdrago/log/
      echo "INFO: ${_cmd} for ${_oct} /var/xdrago/log/usage complete"
    fi
    if [ -e "/data/disk/legacy" ]; then
      echo "INFO: ${_cmd} for ${_oct} /data/disk/legacy start"
      rsync -aEAXq ${_ieni} -e ssh /data/disk/legacy root@${_tgt}:/data/disk/
      echo "INFO: ${_cmd} for ${_oct} /data/disk/legacy complete"
    fi
    echo "INFO: ${_cmd} for ${_oct} to ${_tgt} complete"
  else
    _USR=/data/disk/${_oct}
    if [ -e "${_USR}/log/email.txt" ]; then
      _CHECK_EMAIL=`cat ${_USR}/log/email.txt`
      _CHECK_EMAIL=`echo -n ${_CHECK_EMAIL} | tr -d "\n"`
      _CHECK_EMAIL=${_CHECK_EMAIL//\\\@/\@}
      if [ "${_CHECK_EMAIL}" = "omega8cc@gmail.com" ] \
        || [[ "${_CHECK_EMAIL}" =~ "emaylx@" ]] \
        || [[ "${_CHECK_EMAIL}" =~ "@omega8.cc" ]]; then
        _RESULT_EMAIL=OUR
      else
        _RESULT_EMAIL=OK
      fi
    fi
    if [ "${_oct}" = "arch" ] \
      || [ "${_oct}" = "all" ] \
      || [ "${_oct}" = "lost+found" ] \
      || [ "${_oct}" = "lostfound" ] \
      || [ "${_oct}" = "backups" ] \
      || [ "${_oct}" = "codebases-cleanup" ]; then
      echo "_USR ${_oct} is not eligible for migration: system dir"
      exit 1
    elif [ ! -e "${_USR}/log/cores.txt" ] \
      || [ ! -e "${_USR}/log/option.txt" ] \
      || [ ! -e "${_USR}/log/email.txt" ]; then
      echo "_USR ${_oct} is not eligible for migration: broken"
      exit 1
    elif [ -e "${_USR}/log/CANCELLED" ]; then
      echo "_USR ${_oct} is not eligible for migration: cancelled"
      exit 1
    elif [ -e "${_USR}/log/proxied.pid" ]; then
      echo "_USR ${_oct} is not eligible for migration: already migrated"
      exit 1
    elif [ "${_cmd}" = "create" ] && [ -e "${_USR}/log/exported.pid" ]; then
      echo "_USR ${_oct} is not eligible for migration: already created"
      exit 1
    elif [ "${_cmd}" = "export" ] && [ -e "${_USR}/log/exported.pid" ]; then
      echo "_USR ${_oct} is not eligible for migration: already exported"
      exit 1
    elif [ "${_cmd}" = "transfer" ] && [ -e "${_USR}/log/transferred.pid" ]; then
      echo "_USR ${_oct} is not eligible for migration: already transferred"
      exit 1
    elif [ "${_cmd}" = "import" ] && [ -e "${_USR}/log/imported.pid" ]; then
      echo "_USR ${_oct} is not eligible for migration: already imported"
      exit 1
    elif [ "${_cmd}" = "proxy" ] && [ -e "${_USR}/log/proxied.pid" ]; then
      echo "_USR ${_oct} is not eligible for migration: already proxied"
      exit 1
    elif [ "${_RESULT_EMAIL}" = "OUR" ]; then
      echo "_USR ${_oct} is not eligible for migration: internal only"
      exit 1
    else
      echo "INFO: ${_cmd} for ${_oct} to ${_tgt} ${_dst} start"
      if [ "${_cmd}" = "transfer" ]; then
        if [ ! -z "${_dst}" ]; then
          _DST=/data/disk/${_dst}
        else
          _DST=/data/disk/${_oct}
        fi
        if [ -e "${_USR}" ]; then
          rsync -aEAXqu ${_ieni} -e ssh ${_USR}/distro/*         root@${_tgt}:${_DST}/distro/
          rsync -aEAXqu ${_ieni} -e ssh ${_USR}/src/*            root@${_tgt}:${_DST}/src/
          rsync -aEAXqu ${_ieni} -e ssh ${_USR}/static/*         root@${_tgt}:${_DST}/static/
          #
          rsync -aEAXqu ${_ieni} -e ssh ${_USR}/clients/*        root@${_tgt}:${_DST}/clients/        &> /dev/null
          rsync -aEAXqu ${_ieni} -e ssh ${_USR}/log/*            root@${_tgt}:${_DST}/log/
          rsync -aEAXqu ${_ieni} -e ssh ${_USR}/static/control/* root@${_tgt}:${_DST}/static/control/ &> /dev/null
          #
          rsync -aEAXqu ${_ieni} -e ssh ${_USR}/backups/*        root@${_tgt}:${_DST}/backups/        &> /dev/null
          rsync -aEAXqu ${_ieni} -e ssh ${_USR}/undo/*           root@${_tgt}:${_DST}/undo/           &> /dev/null
          if [ ! -z "${_dst}" ]; then
            rsync -aEAXqu ${_ieni} -e ssh /home/${_oct}.ftp/.ssh  root@${_tgt}:/home/${_dst}.ftp/
          else
            rsync -aEAXqu ${_ieni} -e ssh /home/${_oct}.ftp/.ssh  root@${_tgt}:/home/${_oct}.ftp/
          fi

          rsync -aEAXqu \
            ${_ieni} \
            --exclude=server_ \
            --exclude=hostmaster \
            -e ssh ${_USR}/.drush/*.alias.drushrc.php \
            root@${_tgt}:${_DST}/.drush/

          rsync -aEAXqu \
            ${_ieni} \
            --exclude=host8.biz \
            --exclude=boa.io \
            --exclude=aegir.cc \
            -e ssh ${_USR}/config/server_master/nginx/vhost.d/* \
            root@${_tgt}:${_DST}/config/server_master/nginx/vhost.d/

          rsync -aEAXqu \
            ${_ieni} \
            -e ssh ${_USR}/config/server_master/nginx/pre.d/* \
            root@${_tgt}:${_DST}/config/server_master/nginx/pre.d/ &> /dev/null

          rsync -aEAXqu \
            ${_ieni} \
            -e ssh ${_USR}/config/server_master/nginx/post.d/* \
            root@${_tgt}:${_DST}/config/server_master/nginx/post.d/ &> /dev/null

          rsync -aEAXqu \
            ${_ieni} \
            -e ssh ${_USR}/config/server_master/nginx/subdir.d/* \
            root@${_tgt}:${_DST}/config/server_master/nginx/subdir.d/ &> /dev/null

          rsync -aEAXqu \
            ${_ieni} \
            -e ssh ${_USR}/config/server_master/nginx/platform.d/* \
            root@${_tgt}:${_DST}/config/server_master/nginx/platform.d/ &> /dev/null

          rsync -aEAXqu \
            ${_ieni} \
            -e ssh ${_USR}/config/ssl.d/* \
            root@${_tgt}:${_DST}/config/ssl.d/ &> /dev/null

          rsync -aEAXqu \
            ${_ieni} \
            -e ssh ${_USR}/config/server_master/ssl.d/* \
            root@${_tgt}:${_DST}/config/server_master/ssl.d/ &> /dev/null

          rsync -aEAXqu \
            ${_ieni} \
            -e ssh ${_USR}/tools/le \
            root@${_tgt}:${_DST}/tools/ &> /dev/null

          echo "INFO: ${_cmd} for ${_oct} to ${_tgt} ${_dst} complete"
          touch ${_USR}/log/transferred.pid
        fi
      else
        if [ -e "/root/.${_oct}.octopus.cnf" ]; then
          source /root/.${_oct}.octopus.cnf
        fi
        ### We are using max verbose mode by default
        _migrate_prepare
          ### _NOW=`date +%y%m%d-%H%M`
          ### mkdir -p /var/xdrago/log/migrate
          ### _migrate_prepare >/var/xdrago/log/migrate/migrate-${_oct}-${_cmd}-${_NOW}.log 2>&1
        if [ "${_cmd}" = "proxy" ]; then
          service nginx reload
          _send_notice_migration_complete
          echo COMPLETE > ${_USR}/log/proxied.pid
        fi
      fi
      echo "INFO: ${_cmd} for ${_oct} to ${_tgt} ${_dst} complete"
      exit 0
    fi
  fi
}

_post_mig() {
  if [ -e "/vservers" ]; then
    echo You can not run _post_mig on the parent system
    echo Exit now
    exit 1
  else
    echo Running _post_mig inside vms `hostname`
    if [ -x "/etc/init.d/solr7" ] && [ -e "/etc/default/solr7.in.sh" ]; then
      #kill -9 $(ps aux | grep '[s]olr' | awk '{print $2}') &> /dev/null
      service solr7 restart
    fi
    kill -9 $(ps aux | grep '[j]etty' | awk '{print $2}') &> /dev/null
    rm -rf /tmp/{drush*,pear,jetty*}
    rm -f /var/log/jetty{7,8,9}/*
    if [ -e "/etc/default/jetty9" ] && [ -e "/etc/init.d/jetty9" ]; then
      service jetty9 start
    fi
    if [ -e "/etc/default/jetty8" ] && [ -e "/etc/init.d/jetty8" ]; then
      service jetty8 start
    fi
    if [ -e "/etc/default/jetty7" ] && [ -e "/etc/init.d/jetty7" ]; then
      service jetty7 start
    fi
    service nginx reload
    [ -e "/run/boa_wait.pid" ] && rm -f /run/boa_wait.pid
    if [ ! -e "/var/xdrago/runner.sh" ] && [ -e "/var/xdrago/.runner.sh.off" ]; then
      mv -f /var/xdrago/.runner.sh.off /var/xdrago/runner.sh
    fi
    if [ ! -e "/var/xdrago/daily.sh" ] && [ -e "/var/xdrago/.daily.sh.off" ]; then
      mv -f /var/xdrago/.daily.sh.off /var/xdrago/daily.sh
    fi
    if [ ! -e "/var/xdrago/usage.sh" ] && [ -e "/var/xdrago/.usage.sh.off" ]; then
      mv -f /var/xdrago/.usage.sh.off /var/xdrago/usage.sh
    fi
    if [ ! -e "/var/xdrago/graceful.sh" ] && [ -e "/var/xdrago/.graceful.sh.off" ]; then
      mv -f /var/xdrago/.graceful.sh.off /var/xdrago/graceful.sh
    fi
    if [ ! -e "/var/xdrago/manage_ltd_users.sh" ] && [ -e "/var/xdrago/.manage_ltd_users.sh.off" ]; then
      mv -f /var/xdrago/.manage_ltd_users.sh.off /var/xdrago/manage_ltd_users.sh
    fi
    exit 0
  fi
}

_pre_mig() {
  if [ -e "/vservers" ]; then
    echo You can not run _pre_mig on the parent system
    echo Exit now
    exit 1
  else
    echo Running _pre_mig inside vms `hostname`
    if [ -e "/var/xdrago/runner.sh" ]; then
      mv -f /var/xdrago/runner.sh /var/xdrago/.runner.sh.off
      kill -9 $(ps aux | grep '[r]unner' | awk '{print $2}') &> /dev/null
    fi
    if [ -e "/var/xdrago/daily.sh" ]; then
      mv -f /var/xdrago/daily.sh /var/xdrago/.daily.sh.off
      kill -9 $(ps aux | grep '[d]aily' | awk '{print $2}') &> /dev/null
    fi
    if [ -e "/var/xdrago/usage.sh" ]; then
      mv -f /var/xdrago/usage.sh /var/xdrago/.usage.sh.off
      kill -9 $(ps aux | grep '[w]eekly' | awk '{print $2}') &> /dev/null
    fi
    if [ -e "/var/xdrago/graceful.sh" ]; then
      mv -f /var/xdrago/graceful.sh /var/xdrago/.graceful.sh.off
      kill -9 $(ps aux | grep '[g]raceful' | awk '{print $2}') &> /dev/null
    fi
    if [ -e "/var/xdrago/manage_ltd_users.sh" ]; then
      mv -f /var/xdrago/manage_ltd_users.sh /var/xdrago/.manage_ltd_users.sh.off
      kill -9 $(ps aux | grep '[m]anage_ltd_users' | awk '{print $2}') &> /dev/null
    fi
    if [ `hostname` = "${_hst}" ]; then
      echo Preparing source `hostname` for outgoing migration...
      if [ ! -e "/root/.ssh/id_rsa.pub" ]; then
        echo Create id_rsa.pub...
        ssh-keygen -b 4096 -t rsa -N "" -f ~/.ssh/id_rsa &> /dev/null
      fi
      if [ -e "/root/.ssh/id_rsa.pub" ]; then
        mkdir -p /var/www/nginx-default
        cp -af /root/.ssh/id_rsa.pub /var/www/nginx-default/auth_undefined_keys.txt
      else
        echo Ops.. /root/.ssh/id_rsa.pub does not exist in `hostname`
      fi
    else
      echo Preparing target `hostname` for incoming migration...
      echo Add remote id_rsa.pub to authorized_keys here...
      mkdir -p /root/.ssh
      rm -f /root/.ssh/auth_undefined_keys.txt*
      rm -f /var/www/nginx-default/auth_undefined_keys.txt*
      curl -s -A iCab "http://undefined.${_hst}/auth_undefined_keys.txt" -o /root/.ssh/auth_undefined_keys.txt
      if [ -e "/root/.ssh/auth_undefined_keys.txt" ]; then
        cat /root/.ssh/auth_undefined_keys.txt >> /root/.ssh/authorized_keys
        chmod 600 /root/.ssh/authorized_keys
      else
        echo Ops.. /root/.ssh/auth_undefined_keys.txt does not exist in `hostname`
      fi
    fi
  fi
  echo All done!
}

_sub_ssl_gen() {
  IFS=$'\12'
  for p in `cat /root/.ssl.proxy.cnf`;do
    domain_name=`echo $p | cut -d' ' -f1 | awk '{ print $1}'`
    target_ip=`echo $p | cut -d' ' -f2 | awk '{ print $1}'`
    oct_uid=`echo $p | cut -d' ' -f3 | awk '{ print $1}'`
    oct_mail=`echo $p | cut -d' ' -f4 | awk '{ print $1}'`
    dedicated_ip=`echo $p | cut -d' ' -f5 | awk '{ print $1}'`
    echo domain_name.${domain_name} target_ip.${target_ip} oct_uid.${oct_uid} oct_mail.${oct_mail} dedicated_ip.${dedicated_ip}
    if [ ! -z "${domain_name}" ] \
      && [ ! -z "${target_ip}" ] \
      && [ ! -z "${oct_uid}" ] \
      && [ ! -z "${oct_mail}" ] \
      && [ ! -z "${dedicated_ip}" ]; then
      oct_mail=`echo $oct_mail | sed "s/\@/\\\@/g"`;
      if [ "${target_ip}" = "${dedicated_ip}" ]; then
        dedicated_ip="*"
        if [ -e "/data/disk/${oct_uid}/log/extra_domain.txt" ]; then
          hmFrontExtra=$(cat /data/disk/${oct_uid}/log/extra_domain.txt 2>&1)
          hmFrontExtra=$(echo -n ${hmFrontExtra} | tr -d "\n" 2>&1)
        fi
        if [ ! -z "${hmFrontExtra}" ]; then
          dedicated_sn="${domain_name} ${hmFrontExtra} www.${domain_name}"
        else
          dedicated_sn="${domain_name} www.${domain_name}"
        fi
        single=YES
      else
        dedicated_sn="_"
        single=NO
      fi
      ###
      Pln="/var/aegir/config/server_master/nginx/pre.d/z_${domain_name}_pln_proxy.conf"
      Ssl="/var/aegir/config/server_master/nginx/pre.d/z_${domain_name}_ssl_proxy.conf"
      ###
      if [ "${single}" = "YES" ]; then
        rm -f ${Pln}
      else
        cp -af /var/xdrago/conf/pln_proxy.conf     ${Pln}
        sed -i "s/domain_name/${domain_name}/g"    ${Pln}
        wait
        sed -i "s/target_ip/${target_ip}/g"        ${Pln}
        wait
        sed -i "s/oct_uid/${oct_uid}/g"            ${Pln}
        wait
        sed -i "s/oct_mail/${oct_mail}/g"          ${Pln}
        wait
        sed -i "s/dedicated_ip/${dedicated_ip}/g"  ${Pln}
        wait
        sed -i "s/dedicated_sn/${dedicated_sn}/g"  ${Pln}
        wait
        echo OK created ${Pln}
      fi
      ###
      cp -af /var/xdrago/conf/ssl_proxy.conf       ${Ssl}
      sed -i "s/domain_name/${domain_name}/g"      ${Ssl}
      wait
      sed -i "s/target_ip/${target_ip}/g"          ${Ssl}
      wait
      sed -i "s/oct_uid/${oct_uid}/g"              ${Ssl}
      wait
      sed -i "s/oct_mail/${oct_mail}/g"            ${Ssl}
      wait
      sed -i "s/dedicated_ip/${dedicated_ip}/g"    ${Ssl}
      wait
      sed -i "s/dedicated_sn/${dedicated_sn}/g"    ${Ssl}
      wait
      ###
      if [ -e "${Ssl}" ]; then
        sslFile="/etc/ssl/private/${domain_name}.dhp"
        if [ ! -e "${sslFile}" ]; then
          echo "We will generate .dhp file now, please wait..."
          openssl dhparam -out ${sslFile} 2048 &> /dev/null
        else
          _PFS_TEST=$(grep "DH PARAMETERS" ${sslFile} 2>&1)
          if [[ ! "${_PFS_TEST}" =~ "DH PARAMETERS" ]]; then
            echo "We will generate .dhp file now, please wait..."
            openssl dhparam -out ${sslFile} 2048 &> /dev/null
          fi
        fi
      fi
      ###
      echo OK created ${Ssl}
      service nginx reload
    else
      echo some variables missing in the record: $p
    fi
  done
}

_ssl_gen() {
  if [ ! -e "/root/.ssl.proxy.cnf" ]; then
    echo "please create /root/.ssl.proxy.cnf first"
    exit 1
  elif [ ! -e "/var/xdrago/conf/pln_proxy.conf" ]; then
    echo "file /var/xdrago/conf/pln_proxy.conf does not exist"
    exit 1
  elif [ ! -e "/var/xdrago/conf/ssl_proxy.conf" ]; then
    echo "file /var/xdrago/conf/ssl_proxy.conf does not exist"
    exit 1
  elif [ ! -e "/var/aegir/config/server_master/nginx/pre.d" ]; then
    echo "vms ${_vms} aegir master not ready"
    exit 1
  else
    [ -e "/root/.ssl.proxy.cnf" ] && _sub_ssl_gen
  fi
}

_check_root() {
  if [ `whoami` = "root" ]; then
    ionice -c2 -n7 -p $$
    chmod a+w /dev/null
    if [ ! -e "/dev/fd" ]; then
      if [ -e "/proc/self/fd" ]; then
        rm -rf /dev/fd
        ln -s /proc/self/fd /dev/fd
      fi
    fi
    if [ -e "/root/.barracuda.cnf" ]; then
      source /root/.barracuda.cnf
      _ADM_EMAIL=${_MY_EMAIL//\\\@/\@}
      _BCC_EMAIL=${_MY_EMAIL//\\\@/\@}
      if [ "${_THIS_DB_HOST}" = "localhost" ] \
        || [ "${_THIS_DB_HOST}" = "FQDN" ]; then
        _SQL_CONNECT=localhost
      elif [ "${_THIS_DB_HOST}" = "127.0.0.1" ] \
        || [ "${_THIS_DB_HOST}" = "PROXYSQL" ]; then
        _SQL_CONNECT=127.0.0.1
      else
        _SQL_CONNECT="${_THIS_DB_HOST}"
      fi
      if [ "${_THIS_DB_HOST}" = "${_MY_OWNIP}" ]; then
        _SQL_CONNECT=localhost
      fi
    fi
    _SQL_PSWD=$(cat /root/.my.pass.txt 2>&1)
    _SQL_PSWD=$(echo -n ${_SQL_PSWD} | tr -d "\n" 2>&1)
  else
    echo "ERROR: This script should be run as a root user"
    exit 1
  fi
  _DF_TEST=$(df -kTh / -l \
    | grep '/' \
    | sed 's/\%//g' \
    | awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "${_DF_TEST}" ] && [ "${_DF_TEST}" -gt "90" ]; then
    echo "ERROR: Your disk space is almost full !!! ${_DF_TEST}/100"
    echo "ERROR: We can not proceed until it is below 90/100"
    exit 1
  fi
}

case "$1" in
  export)   _cmd="$1"
            _oct="$2"
            _tgt="$3"
            _dst="$4"
            _check_root
            _migrate_init
  ;;
  create)   _cmd="$1"
            _oct="$2"
            _tgt="$3"
            _dst="$4"
            _check_root
            _migrate_init
  ;;
  import)   _cmd="$1"
            _oct="$2"
            _tgt="$3"
            _dst="$4"
            _fix="fix"
            _check_root
            _migrate_init
  ;;
  transfer) _cmd="$1"
            _oct="$2"
            _tgt="$3"
            _dst="$4"
            _check_root
            _migrate_init
  ;;
  proxy)    _cmd="$1"
            _oct="$2"
            _tgt="$3"
            _dst="$4"
            _check_root
            _migrate_init
  ;;
  pre-mig)  _cmd="$1"
            _hst="$2"
            _check_root
            _pre_mig
  ;;
  post-mig) _cmd="$1"
            _hst="$2"
            _check_root
            _post_mig
  ;;
  ssl-gen)  _cmd="$1"
            _vms="$2"
            _check_root
            _ssl_gen
  ;;
  *)        echo
            echo "Usage: xboa {pre-mig} {fqdn} (source+target vms)"
            echo "Usage: xboa {export|create|transfer|proxy} {o1|shared} {target-ip} {o2}"
            echo "Usage: xboa {import} {o1} {target-ip} (target vms)"
            echo "Usage: xboa {post-mig} {fqdn} (source+target vms)"
            echo
            echo "Usage: xboa {ssl-gen}"
            echo
            exit 1
  ;;
esac

exit 0
