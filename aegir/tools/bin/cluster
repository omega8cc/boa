#!/bin/bash

HOME=/root
SHELL=/bin/bash
PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin

export PATH=${PATH}
export SHELL=${SHELL}
export HOME=${HOME}

_DB_SERIES=5.7
_CSF_VRN=14.21
_PROXYSQL_VRN="1.3.5-debian8_amd64"
_UTIL_VRN="0.30.216-pre3126"
_VNSTAT_VRN=2.7
_APT_XTR="-y"
dstUpArg="-fuy --allow-unauthenticated -q --config-file /opt/apt/apt.conf.noi.dist"
nrmUpArg="-fuy --allow-unauthenticated -q --config-file /opt/apt/apt.conf.noi.nrml"
_INSTALL_DIST="/usr/bin/apt-get ${dstUpArg} install"
_INSTALL_NRML="/usr/bin/apt-get ${nrmUpArg} install"
_INITINS="/usr/bin/apt-get -y --allow-unauthenticated install"
aptYesUnth="-y --allow-unauthenticated"
_OS_DIST=$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)
_OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
aptLiSys="/etc/apt/sources.list"
tRee=pro
export tRee="${tRee}"
if [ -e "/var/aegir/drush" ]; then
  _DPKG_CNF="confold"
else
  _DPKG_CNF="confnew"
fi
_INSTALL_DIST="/usr/bin/apt-get ${dstUpArg} install"
_INSTALL_NRML="/usr/bin/apt-get ${nrmUpArg} install"
_INSTAPP="/usr/bin/aptitude -f -y -q \
  --allow-untrusted \
  -o Dpkg::Options::=--force-confmiss \
  -o Dpkg::Options::=--force-confdef \
  -o Dpkg::Options::=--force-${_DPKG_CNF} install"
if [ ! -e "/var/aegir/drush" ]; then
  _INSTAPP="${_INSTALL_DIST}"
fi

_NOSTRICT="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

###
### Avoid too many questions
###
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi

_TODAY=$(date +%y%m%d 2>&1)
_TODAY=${_TODAY//[^0-9]/}
_X_VERSION="BOA-5.4.0-${tRee}"
_X_SE="540proT02"
#
barCnf="/root/.barracuda.cnf"
crlGet="-L --max-redirs 3 -k -s --retry 3 --retry-delay 5 -A iCab"
aptYesUnth="-y --allow-unauthenticated"
optBin="/opt/local/bin"
usrBin="/usr/local/bin"
pthLog="/var/xdrago/log"
if [ ! -e "${pthLog}" ] && [ -e "/var/xdrago_wait/log" ]; then
  pthLog="/var/xdrago_wait/log"
fi
tBn="tools/bin"
#

###-------------SYSTEM-----------------###

clean_pid_exit() {
  echo "REASON ${e} on $(date 2>&1)" >> /root/.cluster.exit.exceptions.log
  rm -f /run/cluster_run.pid
  service cron start
  exit 1
}

os_detection_minimal() {
  _APT_UPDATE="apt-get update"
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  _OS_LIST="daedalus chimaera beowulf buster bullseye bookworm"
  for e in ${_OS_LIST}; do
    if [ "${e}" = "${_OS_CODE}" ]; then
      _APT_UPDATE="apt-get update --allow-releaseinfo-change"
    fi
  done
}

check_mysql_version() {
  _DBS_TEST=$(which mysql 2>&1)
  if [ ! -z "${_DBS_TEST}" ]; then
    _DB_SERVER_TEST=$(mysql -V 2>&1)
  fi
  if [[ "${_DB_SERVER_TEST}" =~ "Ver 8.4." ]]; then
    _DB_V=8.4
  elif [[ "${_DB_SERVER_TEST}" =~ "Ver 8.3." ]]; then
    _DB_V=8.3
  elif [[ "${_DB_SERVER_TEST}" =~ "Ver 8.0." ]]; then
    _DB_V=8.0
  elif [[ "${_DB_SERVER_TEST}" =~ "Distrib 5.7." ]]; then
    _DB_V=5.7
  fi
}

apt_clean_update() {
  #apt-get clean -qq 2> /dev/null
  #rm -rf /var/lib/apt/lists/* &> /dev/null
  ${_APT_UPDATE} -qq 2> /dev/null
}

check_root() {
  if [ `whoami` = "root" ]; then
    chmod a+w /dev/null
    if [ ! -e "/dev/fd" ]; then
      if [ -e "/proc/self/fd" ]; then
        rm -rf /dev/fd
        ln -s /proc/self/fd /dev/fd
      fi
    fi
    [ -e "/var/lib/man-db/auto-update" ] && rm -f /var/lib/man-db/auto-update
    aptYesUnth="-y --allow-unauthenticated"
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
    fi
    _LSB_TEST=$(which lsb_release 2> /dev/null)
    if [ ! -x "${_LSB_TEST}" ]; then
      apt_clean_update
      apt-get install lsb-release ${aptYesUnth}
    fi
    _LSB_TEST=$(which lsb_release 2> /dev/null)
    if [ -x "${_LSB_TEST}" ]; then
      if [ "${_OS_DIST}" = "Devuan" ] || [ "${_OS_DIST}" = "Debian" ]; then
        _SUPPORTED_OS=YES
      else
        echo "ERROR: Not supported OS detected: ${_OS_DIST}/${_OS_CODE}"
        exit 1
      fi
      echo
      if [ "${_OS_CODE}" = "stretch" ] || [ "${_OS_CODE}" = "jessie" ]; then
        _APT_MIRROR="archive.debian.org/debian"
        _APT_REPSRC="${_OS_CODE}-backports"
        _SEC_MIRROR="archive.debian.org/debian-security"
        _SEC_REPSRC="${_OS_CODE}/updates"
      elif [ "${_OS_CODE}" = "buster" ]; then
        _APT_MIRROR="${_MIRROR}/debian"
        _APT_REPSRC="${_OS_CODE}-updates"
        _SEC_MIRROR="security.debian.org"
        _SEC_REPSRC="${_OS_CODE}/updates"
      elif [ "${_OS_CODE}" = "bullseye" ]; then
        _APT_MIRROR="${_MIRROR}/debian"
        _APT_REPSRC="${_OS_CODE}-updates"
        _SEC_MIRROR="security.debian.org/debian-security"
        _SEC_REPSRC="${_OS_CODE}-security"
      elif [ "${_OS_CODE}" = "bookworm" ]; then
        _APT_MIRROR="${_MIRROR}/debian"
        _APT_REPSRC="${_OS_CODE}-updates"
        _SEC_MIRROR="security.debian.org/debian-security"
        _SEC_REPSRC="${_OS_CODE}-security"
      fi
      echo "## DEBIAN MAIN REPOSITORIES" > ${aptLiSys}
      echo "deb http://${_APT_MIRROR} ${_OS_CODE} main contrib non-free" >> ${aptLiSys}
      echo "deb-src http://${_APT_MIRROR} ${_OS_CODE} main contrib non-free" >> ${aptLiSys}
      echo "" >> ${aptLiSys}
      echo "## MAJOR BUG FIX UPDATES produced after the final release" >> ${aptLiSys}
      echo "deb http://${_APT_MIRROR} ${_APT_REPSRC} main contrib non-free" >> ${aptLiSys}
      echo "deb-src http://${_APT_MIRROR} ${_APT_REPSRC} main contrib non-free" >> ${aptLiSys}
      echo "" >> ${aptLiSys}
      echo "## DEBIAN SECURITY UPDATES" >> ${aptLiSys}
      echo "deb http://${_SEC_MIRROR} ${_SEC_REPSRC} main contrib non-free" | fmt -su -w 2500 >> ${aptLiSys}
      echo "deb-src http://${_SEC_MIRROR} ${_SEC_REPSRC} main contrib non-free" | fmt -su -w 2500 >> ${aptLiSys}
      echo
      apt_clean_update
    fi
    if [ "${_OS_DIST}" = "Devuan" ] || [ "${_OS_DIST}" = "Debian" ]; then
      _SUPPORTED_OS=YES
    else
      echo "ERROR: Not supported OS detected: ${_OS_DIST}/${_OS_CODE}"
      exit 1
    fi
    if [ "${_OS_CODE}" = "jessie" ]; then
      _BENG_SERIES="4.9"
      _BNG_VERSION="4.9.202-vs2.3.9.9"
    elif [ "${_OS_CODE}" = "stretch" ]; then
      _BENG_SERIES="4.9"
      _BNG_VERSION="4.9.202-vs2.3.9.9"
    elif [ "${_OS_CODE}" = "buster" ]; then
      _BENG_SERIES="4.9"
      _BNG_VERSION="4.9.202-vs2.3.9.9"
    elif [ "${_OS_CODE}" = "bullseye" ]; then
      _BENG_SERIES="4.9"
      _BNG_VERSION="4.9.202-vs2.3.9.9"
    elif [ "${_OS_CODE}" = "bookworm" ]; then
      _BENG_SERIES="4.9"
      _BNG_VERSION="4.9.202-vs2.3.9.9"
    else
      echo "ERROR: Not supported OS detected: ${_OS_DIST}/${_OS_CODE}"
      exit 1
    fi
  else
    echo "ERROR: This script should be run as a root user"
    exit 1
  fi
}

check_no_systemd() {
  if [ -e "/lib/systemd/systemd" ]; then
    echo "ERROR: This script can not be used with systemd"
    echo "ERROR: Please run 'autoinit' first"
    clean_pid_exit check_no_systemd_a_cluster
  fi
}

check_ifnames() {
  _SYS_IFNAMES=$(grep GRUB_CMDLINE_LINUX= /etc/default/grub | grep "net.ifnames=0" 2>&1)
  if [ -e "/etc/default/grub" ] && [[ ! "${_SYS_IFNAMES}" =~ "net.ifnames=0" ]]; then
    echo
    echo "ERROR: BOA requires the classic network interface naming convention."
    echo "ERROR: Typically it should be eth0 and not ens3 systemd convention."
    echo
    echo "RDOCS: Please study recommended docs before introducing any changes!"
    echo
    echo "RDOCS:   https://bit.ly/boa-network-config"
    echo
    echo "HINTS: You can check your active network interfaces with command:"
    echo "HINTS:   ip addr show"
    echo "HINTS: to make sure you are in fact using supported naming convention."
    echo "HINTS: You may see names like eth0, eth1, eth2 -- they are supported."
    echo
    echo "HINTS: Add these two required parameters to GRUB_CMDLINE_LINUX variable:"
    echo "HINTS:   net.ifnames=0 biosdevname=0"
    echo "HINTS: in your /etc/default/grub configuration and then activate with"
    echo "HINTS:   grub-mkconfig -o /boot/grub/grub.cfg"
    echo "HINTS: Once this is done, reboot your system and run this installer again."
    echo
    echo "Bye"
    echo
    clean_pid_exit check_ifnames_a
  fi
}

check_root_direct() {
  _U_TEST=DENY
  [ "${SUDO_USER}" ] && _U_TEST_SDO=${SUDO_USER} || _U_TEST_SDO=`whoami`
  _U_TEST_WHO=$(who am i | awk '{print $1}' 2>&1)
  _U_TEST_LNE=$(logname 2>&1)
  if [ "${_U_TEST_SDO}" = "root" ] || [ "${_U_TEST_LNE}" = "root" ]; then
    if [ -z "${_U_TEST_WHO}" ]; then
      _U_TEST=ALLOW
      ### normal for root scripts running from cron
    else
      if [ "${_U_TEST_WHO}" = "root" ]; then
        _U_TEST=ALLOW
      fi
    fi
  fi
  if [ "${_U_TEST}" = "DENY" ]; then
    echo
    echo "ERROR: This script must be run as root directly,"
    echo "ERROR: without sudo/su switch from regular system user"
    echo "ERROR: Please add and test your SSH (RSA) keys for root account"
    echo "ERROR: with direct access before trying again"
    echo
    echo "HINT:  You can always restrict access later, or"
    echo "       allow only SSH (RSA) keys for root with directive"
    echo "         PermitRootLogin prohibit-password"
    echo "       in the /etc/ssh/sshd_config file"
    echo "Bye"
    clean_pid_exit check_root_direct_a
  fi
  check_ifnames
}

check_root_keys_pwd() {
  _S_TEST=$(grep "root:\*:" /etc/shadow 2>&1)
  _R_TEST=CHECK
  if [ -e "/root/.ssh/authorized_keys" ]; then
    _R_TEST=$(grep "ssh-rsa" /root/.ssh/authorized_keys 2>&1)
  fi
  if [[ ! "${_S_TEST}" =~ "root:" ]] \
    && [[ ! "${_R_TEST}" =~ "ssh-rsa" ]]; then
    echo
    echo "ERROR: Cluster requires working SSH (RSA) keys for system root present"
    echo "ERROR: Please add and test your SSH (RSA) keys for root account"
    echo "ERROR: before trying again"
    echo
    echo "HINTS: Run this command on your local PC machine:"
    echo "HINTS:   ssh-keygen -b 4096 -t rsa -N '' -f ~/.ssh/id_rsa"
    echo "HINTS: Then copy the ~/.ssh/id_rsa.pub file from your PC"
    echo "HINTS: to ~/.ssh/authorized_keys file on the server"
    echo "HINTS: Make sure the key is not split into more than 1 line"
    echo "HINTS: Remember to run: chmod 600 ~/.ssh/authorized_keys"
    echo
    echo "Bye"
    echo
    clean_pid_exit check_root_keys_pwd_a
  fi
}

system_check_clean() {
  if [ -e "/etc/nginx" ] \
    || [ -e "/data/disk/all" ] \
    || [ -e "/etc/apache2" ] \
    || [ -e "/etc/mysql" ] \
    || [ -e "/var/lib/mysql" ]; then
    echo "ERROR: Cluster requires minimal, supported OS, with no services installed"
    echo "ERROR: The only acceptable exceptions are: sshd and mail servers"
    echo "ERROR: This script must be run on a bare metal server main OS level"
    echo "Bye"
    clean_pid_exit system_check_clean_a
  fi
}

#
# Fix locales.
locales_check_fix() {
  ${_INITINS} locales &> /dev/null
  if [ -e "/etc/ssh/sshd_config" ]; then
    _SSH_LC_TEST=$(grep "^AcceptEnv LANG LC_" /etc/ssh/sshd_config 2>&1)
    if [[ "${_SSH_LC_TEST}" =~ "AcceptEnv LANG LC_" ]]; then
      _DO_NOTHING=YES
    else
      sed -i "s/.*AcceptEnv.*//g" /etc/ssh/sshd_config
      wait
      echo "AcceptEnv LANG LC_*" >> /etc/ssh/sshd_config
    fi
  fi
  _LOC_TEST=$(locale 2>&1)
  if [[ "${_LOC_TEST}" =~ LANG=.*UTF-8 ]]; then
    _LOCALE_TEST=OK
  fi
  if [ -n "${STY+x}" ]; then
    _LOCALE_TEST=OK
  fi
  if [[ "${_LOC_TEST}" =~ "Cannot" ]]; then
    _LOCALE_TEST=BROKEN
  fi
  if [ "${_LOCALE_TEST}" = "BROKEN" ]; then
    echo "WARNING!"
    cat <<EOF

  Locales on this system are broken or not installed
  and/or not configured correctly yet. This is a known
  issue on some systems/hosts which either don't configure
  locales at all or don't use UTF-8 compatible locales
  during initial OS setup.

  We will fix this problem for you now by enforcing en_US.UTF-8
  locale settings on the fly during install, and as system
  defaults in /etc/default/locale for future sessions. This
  overrides any locale settings passed by your SSH client.

  You should log out when this installer will finish all its tasks
  and display last line with "BYE!" and then log in again
  to see the result.

  We will continue in 5 seconds...

EOF
    sleep 5
    _LOCALE_GEN_TEST=$(grep -v "^#" /etc/locale.gen 2>&1)
    if [[ ! "${_LOCALE_GEN_TEST}" =~ "en_US.UTF-8 UTF-8" ]]; then
      echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
    fi
    sed -i "/^$/d" /etc/locale.gen
    locale-gen &> /dev/null
    locale-gen en_US.UTF-8 &> /dev/null
    # Explicitly enforce all locale settings
    update-locale \
      LANG=en_US.UTF-8 \
      LC_CTYPE=en_US.UTF-8 \
      LC_COLLATE=POSIX \
      LC_NUMERIC=POSIX \
      LC_TIME=en_US.UTF-8 \
      LC_MONETARY=en_US.UTF-8 \
      LC_MESSAGES=en_US.UTF-8 \
      LC_PAPER=en_US.UTF-8 \
      LC_NAME=en_US.UTF-8 \
      LC_ADDRESS=en_US.UTF-8 \
      LC_TELEPHONE=en_US.UTF-8 \
      LC_MEASUREMENT=en_US.UTF-8 \
      LC_IDENTIFICATION=en_US.UTF-8 \
      LC_ALL= &> /dev/null
    # Define all locale settings on the fly to prevent unnecessary
    # warnings during installation of packages.
    export LANG=en_US.UTF-8
    export LC_CTYPE=en_US.UTF-8
    export LC_COLLATE=POSIX
    export LC_NUMERIC=POSIX
    export LC_TIME=en_US.UTF-8
    export LC_MONETARY=en_US.UTF-8
    export LC_MESSAGES=en_US.UTF-8
    export LC_PAPER=en_US.UTF-8
    export LC_NAME=en_US.UTF-8
    export LC_ADDRESS=en_US.UTF-8
    export LC_TELEPHONE=en_US.UTF-8
    export LC_MEASUREMENT=en_US.UTF-8
    export LC_IDENTIFICATION=en_US.UTF-8
    export LC_ALL=
  else
    _LOCALE_GEN_TEST=$(grep -v "^#" /etc/locale.gen 2>&1)
    if [[ ! "${_LOCALE_GEN_TEST}" =~ "en_US.UTF-8 UTF-8" ]]; then
      echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
    fi
    sed -i "/^$/d" /etc/locale.gen
    locale-gen &> /dev/null
    locale-gen en_US.UTF-8 &> /dev/null
    # Explicitly enforce locale settings required for consistency
    update-locale \
      LANG=en_US.UTF-8 \
      LC_CTYPE=en_US.UTF-8 \
      LC_COLLATE=POSIX \
      LC_NUMERIC=POSIX \
      LC_ALL= &> /dev/null
    # Define locale settings required for consistency also on the fly
    if [ "${_STATUS}" != "INIT" ]; then
      # On initial install it usually causes a warning:
      # setlocale: LC_CTYPE: cannot change locale (en_US.UTF-8):
      # No such file or directory
      export LC_CTYPE=en_US.UTF-8
    fi
    export LC_COLLATE=POSIX
    export LC_NUMERIC=POSIX
    export LC_ALL=
  fi
  _LOCALES_BASHRC_TEST=$(grep LC_COLLATE /root/.bashrc 2>&1)
  if [[ ! "${_LOCALES_BASHRC_TEST}" =~ "LC_COLLATE" ]]; then
    printf "\n" >> /root/.bashrc
    echo "export LANG=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_CTYPE=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_COLLATE=POSIX" >> /root/.bashrc
    echo "export LC_NUMERIC=POSIX" >> /root/.bashrc
    echo "export LC_TIME=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_MONETARY=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_MESSAGES=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_PAPER=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_NAME=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_ADDRESS=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_TELEPHONE=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_MEASUREMENT=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_IDENTIFICATION=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_ALL=" >> /root/.bashrc
    printf "\n" >> /root/.bashrc
  fi
}

check_all() {
  check_root
  check_root_direct
  check_root_keys_pwd
  check_no_systemd
  os_detection_minimal
  system_check_clean
  locales_check_fix
}

check_config_cluster() {
  if [ -e "/root/.cluster.cnf" ]; then
    source /root/.cluster.cnf
  fi

  _CLUSTER_PREFIX="${_CLUSTER_PREFIX//[^a-z0-9]/}"
  _CLUSTER_PREFIX="$(echo -n ${_CLUSTER_PREFIX} | tr A-Z a-z 2>&1)"
  _CLUSTER_SUFFIX="${_CLUSTER_SUFFIX//[^a-z0-9-.]/}"
  _CLUSTER_SUFFIX="$(echo -n ${_CLUSTER_SUFFIX} | tr A-Z a-z 2>&1)"
  _WEB_FQDN="${_WEB_FQDN//[^a-zA-Z0-9-.]/}"
  _WEB_FQDN="$(echo -n ${_WEB_FQDN} | tr A-Z a-z 2>&1)"
  _WEB_NODE_IP="${_WEB_NODE_IP//[^0-9.]/}"
  _DB_NODE_IP[0]="${_DB_NODE_IP[0]//[^0-9.]/}"
  _DB_NODE_IP[1]="${_DB_NODE_IP[1]//[^0-9.]/}"
  _DB_NODE_IP[2]="${_DB_NODE_IP[2]//[^0-9.]/}"

  if [ -z "${_CLUSTER_PREFIX}" ]; then
    _CLUSTER_PREFIX="c1r"
  fi

  if [ -z "${_CLUSTER_SUFFIX}" ]; then
    _CLUSTER_SUFFIX="example.com"
  fi

  if [ -z "${_CLUSTER_OS}" ]; then
    _CLUSTER_OS="jessie"
  fi

  if [ -z "${_CLUSTER_XCHECK}" ]; then
    _CLUSTER_XCHECK="YES"
  fi

  if [ -z "${_CLUSTER_EMAIL}" ] \
     || [ -z "${_CLUSTER_PREFIX}" ] \
     || [ -z "${_CLUSTER_SUFFIX}" ] \
     || [ -z "${_WEB_FQDN}" ] \
     || [ -z "${_WEB_NODE_IP}" ] \
     || [ -z "${_DB_NODE_IP[0]}" ] \
     || [ -z "${_DB_NODE_IP[1]}" ] \
     || [ -z "${_DB_NODE_IP[2]}" ]; then
    echo "

    CONFIGURATION REQUIRED!

    Add listed below required lines to your /root/.cluster.cnf file.
    Required lines are marked with [R] and optional with [O]:

       #
      _CLUSTER_EMAIL=     ### [R] Technical contact email
       #
       # Public IP and hostname with working DNS for the main web node
       #
      _WEB_NODE_IP=       ### [R] Public IP address assigned to the machine
      _WEB_FQDN=          ### [R] Valid FQDN pointing to WEB_NODE_IP
       #
       # An odd number of DB nodes in the array: 3, 5, 7 etc. numbered from 0
       #
      _DB_NODE_IP[0]=     ### [R] Private or Public IP address to use
      _DB_NODE_IP[1]=     ### [R] Private or Public IP address to use
      _DB_NODE_IP[2]=     ### [R] Private or Public IP address to use
       #
      _CLUSTER_PREFIX=c1r ### [O] For Linux VServer guests short names
      _CLUSTER_SUFFIX=    ### [O] For DB nodes FQDN hostnames: example.com
      _CLUSTER_OS=jessie  ### [O] Debian version: jessie
       #
      _CLUSTER_XCHECK=YES ### [O] Standard galera_check script if NO
       #

"
    exit 1
  fi
}

find_fast_mirror_early() {
  isNetc=$(which netcat 2>&1)
  if [ ! -x "${isNetc}" ] || [ -z "${isNetc}" ]; then
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
    fi
    apt_clean_update
    apt-get install netcat ${aptYesUnth} 2> /dev/null
    apt-get install netcat-traditional ${aptYesUnth} 2> /dev/null
    wait
  fi
  ffMirr=$(which ffmirror 2>&1)
  if [ -x "${ffMirr}" ]; then
    ffList="/var/backups/boa-mirrors-2024-01.txt"
    mkdir -p /var/backups
    if [ ! -e "${ffList}" ]; then
      echo "de.files.aegir.cc"  > ${ffList}
      echo "ny.files.aegir.cc" >> ${ffList}
      echo "sg.files.aegir.cc" >> ${ffList}
    fi
    if [ -e "${ffList}" ]; then
      _BROKEN_FFMIRR_TEST=$(grep "stuff" ${ffMirr} 2>&1)
      if [[ "${_BROKEN_FFMIRR_TEST}" =~ "stuff" ]]; then
        _CHECK_MIRROR=$(bash ${ffMirr} < ${ffList} 2>&1)
        _USE_MIR="${_CHECK_MIRROR}"
        [[ "${_USE_MIR}" =~ "printf" ]] && _USE_MIR="files.aegir.cc"
      else
        _USE_MIR="files.aegir.cc"
      fi
    else
      _USE_MIR="files.aegir.cc"
    fi
  else
    _USE_MIR="files.aegir.cc"
  fi
  urlDev="http://${_USE_MIR}/dev"
  urlHmr="http://${_USE_MIR}/versions/${tRee}/boa/aegir"
}
find_fast_mirror_early

if_firewall_update() {
  if [ -e "/etc/csf" ]; then
    echo "Running Firewall Update on `hostname`..."
    _NOW=`date +%y%m%d-%H%M`
    _WFC="/var/backups/wfc/${_NOW}"
    mkdir -p ${_WFC}
    cp -af /etc/sysctl.conf  ${_WFC}/sysctl.conf-pre
    cp -af /opt/water.sh     ${_WFC}/water.sh-pre
    cp -af /opt/fire.sh      ${_WFC}/fire.sh-pre
    cp -af /etc/csf/csf.conf ${_WFC}/csf.conf-pre
    cd ${_WFC}
    curl ${crlGet} "${urlHmr}/conf/var/sysctl.conf"      -o sysctl.conf
    curl ${crlGet} "${urlHmr}/tools/host/host-water.sh"  -o host-water.sh
    curl ${crlGet} "${urlHmr}/tools/host/host-fire.sh"   -o host-fire.sh
    curl ${crlGet} "http://${_USE_MIR}/cluster/csf.conf" -o csf.conf
    cp -af ${_WFC}/sysctl.conf   /etc/sysctl.conf
    cp -af ${_WFC}/host-water.sh /opt/water.sh
    cp -af ${_WFC}/host-fire.sh  /opt/fire.sh
    cp -af ${_WFC}/csf.conf      /etc/csf/csf.conf
    chmod 644 /etc/sysctl.conf
    chmod 700 /opt/water.sh
    chmod 700 /opt/fire.sh
    chmod 600 /etc/csf/csf.conf
    sed -i "s/.*fire.sh.*//gi"  /etc/crontab
    wait
    sed -i "s/.*water.sh.*//gi" /etc/crontab
    wait
    sed -i "s/.*csf.error.*//gi" /etc/crontab
    wait
    sed -i "s/.*vservers.*//gi" /etc/crontab
    wait
    if [ -e "/opt/fire.sh" ] && [ -e "/opt/water.sh" ]; then
      echo "*  *    * * *   root    test -e /etc/csf/csf.error && ( rm -f /etc/csf/csf.error && service lfd restart && csf -q && echo WTF \`date\` >> /var/log/csf_wtf.log )" >> /etc/crontab
      echo "*  *    * * *   root    bash /opt/fire.sh >/dev/null 2>&1" >> /etc/crontab
      echo "05 5    * * *   root    bash /opt/water.sh >/dev/null 2>&1" >> /etc/crontab
      echo "30 *    * * *   root    rm -f /vservers/*/var/xdrago/monitor/ssh.log >/dev/null 2>&1" >> /etc/crontab
      echo "30 *    * * *   root    rm -f /vservers/*/var/xdrago/monitor/web.log >/dev/null 2>&1" >> /etc/crontab
      echo "30 *    * * *   root    rm -f /vservers/*/var/xdrago/monitor/ftp.log >/dev/null 2>&1" >> /etc/crontab
      sed -i "/^$/d" /etc/crontab
    fi
    echo kernel.vshelper = /sbin/vshelper >> /etc/sysctl.conf
    if [ -e "/etc/security/limits.conf" ]; then
      _IF_NF=$(grep '2097152' /etc/security/limits.conf 2>&1)
      if [ ! -z "${_IF_NF}" ]; then
        sed -i "s/.*2097152.*//g" /etc/security/limits.conf
        wait
      fi
      _IF_NF=$(grep '524288' /etc/security/limits.conf)
      if [ -z "${_IF_NF}" ]; then
        echo "*         hard    nofile      524288"  >> /etc/security/limits.conf
        echo "*         soft    nofile      524288"  >> /etc/security/limits.conf
        echo "root      hard    nofile      1048576" >> /etc/security/limits.conf
        echo "root      soft    nofile      1048576" >> /etc/security/limits.conf
      fi
      _IF_NF=$(grep '65556' /etc/security/limits.conf 2>&1)
      if [ -z "${_IF_NF}" ]; then
        echo "*         hard    nproc       65556"   >> /etc/security/limits.conf
        echo "*         soft    nproc       65556"   >> /etc/security/limits.conf
      fi
    fi
    sysctl -p /etc/sysctl.conf
    cd
    service lfd stop
    wait
    kill -9 $(ps aux | grep '[C]onfigServer' | awk '{print $2}') &> /dev/null
    killall sleep &> /dev/null
    rm -f /etc/csf/csf.error
    csf -q
    service lfd start
    wait
    ### Linux kernel TCP SACK CVEs mitigation
    ### CVE-2019-11477 SACK Panic
    ### CVE-2019-11478 SACK Slowness
    ### CVE-2019-11479 Excess Resource Consumption Due to Low MSS Values
    if [ -x "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
      _SACK_TEST=$(ip6tables --list | grep tcpmss 2>&1)
      if [[ ! "${_SACK_TEST}" =~ "tcpmss" ]]; then
        sysctl net.ipv4.tcp_mtu_probing=0 &> /dev/null
        iptables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
        ip6tables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
      fi
    fi
  fi
}

install_proxysql() {

  if [ -z "${_ROOT_SQL_PASWD}" ]; then
    vidn="${_CLUSTER_PREFIX}db0"
    if [ -e "/vservers/${vidn}/root/.my.cluster_root_pwd.txt" ]; then
      _ROOT_SQL_PASWD=$(cat /vservers/${vidn}/root/.my.cluster_root_pwd.txt 2>&1)
      _ROOT_SQL_PASWD=$(echo -n ${_ROOT_SQL_PASWD} | tr -d "\n" 2>&1)
      _E_ROOT_SQL_PASWD="${_ROOT_SQL_PASWD//\//\\\/}"
    fi
  fi

  _PROXYSQL_PASSWORD="$(openssl rand -base64 64 2>&1)"
  _MONITOR_PASSWORD="$(openssl rand -base64 64 2>&1)"
  _CLUSTER_APP_PASSWORD="$(openssl rand -base64 64 2>&1)"

  _E_PROXYSQL_PASSWORD="${_PROXYSQL_PASSWORD//\//\\\/}"
  _E_MONITOR_PASSWORD="${_MONITOR_PASSWORD//\//\\\/}"
  _E_CLUSTER_APP_PASSWORD="${_CLUSTER_APP_PASSWORD//\//\\\/}"

  pxyCtx="mysql -uadmin -p${_PROXYSQL_PASSWORD} -h127.0.0.1 -P6032"
  pXcnf="/vservers/${idn}/etc/proxysql-admin.cnf"

  echo "Installing ProxySQL on the web cluster node..."
  if [ ! -z "${_E_PROXYSQL_PASSWORD}" ] && [ ! -z "${_E_ROOT_SQL_PASWD}" ]; then

    if [ "${cmd}" = "in-pxy" ] \
      && [ -e "/vservers/${idn}/usr/bin/proxysql" ] \
      && [ -e "/vservers/${idn}/var/lib/proxysql" ]; then
      _ATMIS=`date +%y%m%d-%H%M%S`
      _XPSQL="/vservers/${idn}/var/backups/xpySQL/${_ATMIS}"
      mkdir -p ${_XPSQL}
      cp -af /vservers/${idn}/var/lib/proxysql/* ${_XPSQL}/
      vserver ${idn} exec service proxysql stop
      vserver ${idn} exec apt-get clean
      vserver ${idn} exec ${_APT_UPDATE}
      vserver ${idn} exec apt-get remove proxysql -y -qq
      rm -rf /vservers/${idn}/var/lib/proxysql
      rm -rf /vservers/${idn}/var/log/proxysql
      rm -f ${pXcnf}
      rm -f /vservers/${idn}/etc/proxysql.cnf
      rm -f /vservers/${idn}/etc/apt/sources.list.d/proxysql.list
      for IP in "${_DB_NODE_IP[@]}"; do
        ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"DROP USER 'monitor'@'${IP}';\""
        ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"DROP USER 'proxysql_user'@'${IP}';\""
      done
      ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"DROP USER 'monitor'@'${_WEB_NODE_IP}';\""
      ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"DROP USER 'proxysql_user'@'${_WEB_NODE_IP}';\""
      ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"DROP USER 'monitor'@'%';\""
      ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"DROP USER 'proxysql_user'@'%';\""

      _S_N=${_WEB_NODE_IP}
      _S_T=${_S_N#*.*}
      _S_Q=${_S_N%%${_S_T}}

      ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"DROP USER 'monitor'@'${_S_Q}%';\""
      ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"DROP USER 'proxysql_user'@'${_S_Q}%';\""
    fi

    echo "${_ROOT_SQL_PASWD}" > /vservers/${idn}/root/.my.cluster_root_pwd.txt
    echo "${_PROXYSQL_PASSWORD}" > /vservers/${idn}/root/.my.proxysql_adm_pwd.txt
    echo "${_DB_NODE_IP[1]}" > /vservers/${idn}/root/.my.cluster_write_node.txt
    echo "<?php" > /vservers/${idn}/opt/tools/drush/proxysql_adm_pwd.inc
    echo "\$prxy_adm_paswd = \"${_PROXYSQL_PASSWORD}\";" >> /vservers/${idn}/opt/tools/drush/proxysql_adm_pwd.inc
    echo "\$writer_node_ip = \"${_DB_NODE_IP[1]}\";"     >> /vservers/${idn}/opt/tools/drush/proxysql_adm_pwd.inc
    echo "ProxySQL" > /vservers/${idn}/data/conf/clstr.cnf
    mkdir -p /vservers/${idn}/opt/tmp
    mkdir -p /vservers/${idn}/opt/apt
    echo '
APT::Get::Assume-Yes "true";
APT::Get::Show-Upgraded "true";
APT::Get::Install-Recommends "false";
APT::Get::Install-Suggests "false";
APT::Quiet "true";
DPkg::Options {"--force-confdef";"--force-confmiss";"--force-confold"};
DPkg::Pre-Install-Pkgs {"/usr/sbin/dpkg-preconfigure --apt";};
Dir::Etc::SourceList "/etc/apt/sources.list";
' > /vservers/${idn}/opt/apt/apt.conf.noi.nrml
    nrmUpArg="-fuy --allow-unauthenticated -q --config-file /opt/apt/apt.conf.noi.nrml"
    vserver ${idn} exec apt-get clean
    vserver ${idn} exec ${_APT_UPDATE} -qq
    vserver ${idn} exec ${_INSTAPP} sysbench
    vserver ${idn} exec ${_INSTAPP} debconf-utils
    vserver ${idn} exec ${_INSTAPP} proxysql
    vserver ${idn} exec apt-get install --only-upgrade ${nrmUpArg} proxysql
    vserver ${idn} exec mkdir -p /var/log/proxysql
    vserver ${idn} exec chown -R proxysql:proxysql /var/log/proxysql
    vserver ${idn} exec chmod 700 /var/log/proxysql
    vserver ${idn} exec usermod -aG users proxysql

    echo "Pausing ProxySQL..."
    vserver ${idn} exec service proxysql stop
    wait

    sed -i "s/admin:admin/admin:${_E_PROXYSQL_PASSWORD}/g" /vservers/${idn}/etc/proxysql.cnf
    wait
    sed -i "s/localhost/127.0.0.1/g" /vservers/${idn}/etc/proxysql.cnf

    sed -i "s/PROXYSQL_PASSWORD=.*/PROXYSQL_PASSWORD=\"${_E_PROXYSQL_PASSWORD}\"/g" ${pXcnf}
    wait
    sed -i "s/PROXYSQL_HOSTNAME=.*/PROXYSQL_HOSTNAME=\"127.0.0.1\"/g" ${pXcnf}
    wait

    sed -i "s/MONITOR_PASSWORD=.*/MONITOR_PASSWORD=\"${_E_MONITOR_PASSWORD}\"/g" ${pXcnf}
    wait

    sed -i "s/CLUSTER_APP_PASSWORD=.*/CLUSTER_APP_PASSWORD=\"${_E_CLUSTER_APP_PASSWORD}\"/g" ${pXcnf}
    wait

    sed -i "s/CLUSTER_USERNAME=.*/CLUSTER_USERNAME=\"root\"/g" ${pXcnf}
    wait
    sed -i "s/CLUSTER_PASSWORD=.*/CLUSTER_PASSWORD=\"${_E_ROOT_SQL_PASWD}\"/g" ${pXcnf}
    wait
    sed -i "s/CLUSTER_HOSTNAME=.*/CLUSTER_HOSTNAME=\"${_DB_NODE_IP[1]}\"/g" ${pXcnf}
    wait

    if [ "${_CLUSTER_XCHECK}" = "YES" ]; then
      sed -i "s/WRITE_HOSTGROUP_ID=.*/WRITE_HOSTGROUP_ID=\"500\"/g" ${pXcnf}
      wait
      sed -i "s/READ_HOSTGROUP_ID=.*/READ_HOSTGROUP_ID=\"501\"/g" ${pXcnf}
      wait
    fi

    sed -i "s/MODE=.*/MODE=\"loadbal\"/g" ${pXcnf}
    wait
    sleep 1

    chmod 640 /vservers/${idn}/etc/proxysql.cnf
    chmod 640 ${pXcnf}

    echo "Starting ProxySQL..."
    vserver ${idn} exec service proxysql initial
    wait

    chmod 640 /vservers/${idn}/etc/proxysql.cnf
    chmod 640 ${pXcnf}

    echo "Running default auto-configuration of ProxySQL..."
    pxyCmd="proxysql-admin --config-file=/etc/proxysql-admin.cnf --mode=loadbal --enable"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCmd}"
    sleep 10

    echo "Adding root user to mysql_users in ProxySQL..."
    pxyCmd="INSERT INTO mysql_users (username,password,default_hostgroup) VALUES ('root','${_ROOT_SQL_PASWD}','10');"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
    pxyCmd="LOAD MYSQL USERS TO RUNTIME;"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
    pxyCmd="SAVE MYSQL USERS FROM RUNTIME;"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
    pxyCmd="SAVE MYSQL USERS TO DISK;"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""

    echo "Adding root user to mysql_query_rules in ProxySQL..."
    pxyCmd="INSERT INTO mysql_query_rules (username,destination_hostgroup,active) VALUES ('root',10,1);"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
    pxyCmd="INSERT INTO mysql_query_rules (username,destination_hostgroup,active) VALUES ('root',11,1);"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
    pxyCmd="LOAD MYSQL QUERY RULES TO RUNTIME;"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
    pxyCmd="SAVE MYSQL QUERY RULES TO DISK;"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""

    sleep 1

    if [ "${_CLUSTER_XCHECK}" != "YES" ]; then
      for IP in "${_DB_NODE_IP[@]}"; do
        pxyCmd="INSERT INTO mysql_servers (hostname,hostgroup_id,port,weight,comment) VALUES ('${IP}',11,3306,1000,'READWRITE');"
          ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      done
      pxyCmd="LOAD MYSQL SERVERS TO RUNTIME;"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      pxyCmd="SAVE MYSQL SERVERS TO DISK;"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
    fi

    if [ "${_CLUSTER_XCHECK}" = "YES" ]; then
      echo "Adding monitor user to ProxySQL..."
      pxyCmd="INSERT INTO mysql_users (username,password) VALUES ('monitor','${_MONITOR_PASSWORD}');"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      sleep 1
      pxyCmd="UPDATE global_variables SET variable_value='monitor' WHERE variable_name='mysql-monitor_username';"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      sleep 1
      pxyCmd="UPDATE global_variables SET variable_value='${_MONITOR_PASSWORD}' WHERE variable_name='mysql-monitor_password';"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      sleep 1
      pxyCmd="UPDATE global_variables SET variable_value=268435456 WHERE variable_name='mysql-max_allowed_packet';"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      sleep 1

      echo "Load ProxySQL variables to runtime and save to disk..."
      pxyCmd="LOAD MYSQL VARIABLES TO RUNTIME;"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      sleep 1
      pxyCmd="SAVE MYSQL VARIABLES TO DISK;"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      sleep 1

      echo "Adding grants for ProxySQL monitor user on Percona Cluster..."
      for IP in "${_DB_NODE_IP[@]}"; do
        pxyCmd="CREATE USER IF NOT EXISTS 'monitor'@'${IP}';"
          ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
        pxyCmd="GRANT USAGE ON *.* TO 'monitor'@'${IP}';"
          ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
        pxyCmd="ALTER USER 'monitor'@'${IP}' IDENTIFIED BY '${_MONITOR_PASSWORD}';"
          ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
      done
      pxyCmd="CREATE USER IF NOT EXISTS 'monitor'@'${_WEB_NODE_IP}';"
        ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
      pxyCmd="GRANT USAGE ON *.* TO 'monitor'@'${_WEB_NODE_IP}';"
        ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
      pxyCmd="ALTER USER 'monitor'@'${_WEB_NODE_IP}' IDENTIFIED BY '${_MONITOR_PASSWORD}';"
        ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""

      echo "Adding proxysql_user to ProxySQL..."
      pxyCmd="INSERT INTO mysql_users (username,password) VALUES ('proxysql_user','${_CLUSTER_APP_PASSWORD}');"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      sleep 1

      echo "Adding grants for ProxySQL proxysql_user on Percona Cluster..."
      for IP in "${_DB_NODE_IP[@]}"; do
        pxyCmd="CREATE USER IF NOT EXISTS 'proxysql_user'@'${IP}';"
          ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
        pxyCmd="GRANT USAGE ON *.* TO 'proxysql_user'@'${IP}';"
          ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
        pxyCmd="ALTER USER 'proxysql_user'@'${IP}' IDENTIFIED BY '${_CLUSTER_APP_PASSWORD}';"
          ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
      done
      pxyCmd="CREATE USER IF NOT EXISTS 'proxysql_user'@'${_WEB_NODE_IP}';"
        ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
      pxyCmd="GRANT USAGE ON *.* TO 'proxysql_user'@'${_WEB_NODE_IP}';"
        ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
      pxyCmd="ALTER USER 'proxysql_user'@'${_WEB_NODE_IP}' IDENTIFIED BY '${_CLUSTER_APP_PASSWORD}';"
        ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""

      echo "Load ProxySQL users to runtime and save to disk..."
      pxyCmd="LOAD MYSQL USERS TO RUNTIME;"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      sleep 1
      pxyCmd="SAVE MYSQL USERS TO DISK;"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      sleep 1
    fi

    if [ "${_CLUSTER_XCHECK}" = "YES" ]; then
      echo "Adding mysql_servers in ProxySQL..."
      pxyCmd="DELETE FROM mysql_replication_hostgroups where writer_hostgroup=500;"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      pxyCmd="DELETE FROM mysql_servers where hostgroup_id in (500,501);"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      cNt="100"
      for IP in "${_DB_NODE_IP[@]}"; do
        pxyCmd="INSERT INTO mysql_servers (hostname,hostgroup_id,port,weight) VALUES ('${IP}',500,3306,${cNt});"
          ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
        cNt=$(( 10000 * cNt ))
      done
      cNt="1000000000"
      for IP in "${_DB_NODE_IP[@]}"; do
        cNt=$(( cNt / 100 ))
        pxyCmd="INSERT INTO mysql_servers (hostname,hostgroup_id,port,weight) VALUES ('${IP}',501,3306,${cNt});"
          ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      done
      pxyCmd="LOAD MYSQL SERVERS TO RUNTIME;"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      pxyCmd="SAVE MYSQL SERVERS TO DISK;"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
    fi

    echo "Checking runtime_scheduler entries in ProxySQL..."
    pxyCmd="SELECT * FROM runtime_scheduler\\G"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""

    echo "Checking mysql_servers status in ProxySQL..."
    sleep 10
    pxyCmd="SELECT hostgroup_id,hostname,port,status,weight FROM mysql_servers;"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""

    isPxy=$(vserver ${idn} exec which proxysql 2>&1)
    echo "Relative isPxy is ${isPxy}"
    echo "Absolute isPxy is /vservers/${idn}${isPxy}"

    if [ -x "/vservers/${idn}${isPxy}" ] \
      && [ -e "/vservers/${idn}/etc/proxysql.cnf" ] \
      && [ -e "${pXcnf}" ]; then
      echo "INFO: Updating ProxySQL Galera Checker..."
      pGc="/vservers/${idn}/usr/bin/proxysql_galera_checker"
      if [ -e "${pGc}" ]; then
        rm -f ${pGc}
      fi
      tURL="${urlHmr}/${tBn}/proxysql_galera_checker"
      echo PGC download URL is ${tURL}
      curl -I ${tURL}
      curl ${crlGet} "${tURL}" -o ${pGc}
      if [ ! -e "${pGc}" ]; then
        curl ${crlGet} "${tURL}" -o ${pGc}
      else
        _PAV_TEST=$(grep PROXYSQL_ADMIN_VERSION ${pGc} 2>&1)
        if [[ ! "${_PAV_TEST}" =~ "PROXYSQL_ADMIN_VERSION" ]]; then
          rm -f ${pGc}
          curl ${crlGet} "${tURL}" -o ${pGc}
        fi
      fi
      chmod 755 ${pGc}
      echo loadbal > /vservers/${idn}/var/lib/proxysql/mode
      echo loadbal > /vservers/${idn}/var/lib/proxysql/c1r_galera_mode
      echo loadbal > /vservers/${idn}/var/lib/proxysql/--mode=singlewrite_mode
      echo loadbal > /vservers/${idn}/var/lib/proxysql/--mode=loadbal_mode
      echo 0 > /vservers/${idn}/var/lib/proxysql/reload
      echo 0 > /vservers/${idn}/var/lib/proxysql/c1r_galera_reload
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "chown proxysql:proxysql /var/lib/proxysql/*reload"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "chown proxysql:proxysql /var/lib/proxysql/*mode*"
      rm -f /vservers/${idn}/var/lib/proxysql/pxc_test_proxysql_galera_check.log
      pxyCmd="proxysql_galera_checker --log=/var/lib/proxysql/pxc_test_proxysql_galera_check.log --debug"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCmd}"
      cat /vservers/${idn}/var/lib/proxysql/pxc_test_proxysql_galera_check.log
      echo "INFO: Restarting ProxySQL server..."
      vserver ${idn} exec service proxysql restart
      pxyCmd="SELECT * FROM runtime_scheduler\\G"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
      pxyCmd="SELECT * FROM mysql_servers;"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""
    else
      echo "OOPS: ProxySQL will not work!"
    fi
  else
    echo "Can't install ProxySQL because _E_PROXYSQL_PASSWORD or _E_ROOT_SQL_PASWD is empty"
  fi

  if [ "${_CLUSTER_XCHECK}" = "YES" ]; then
    if [ -e "/vservers/${idn}/data/all" ] \
      && [ -e "/vservers/${idn}/var/lib/proxysql" ]; then
      echo "Installing galera_check for ProxySQL..."
      curl -s -A iCab "http://${_USE_MIR}/cluster/galera_check.pl" \
        -o /vservers/${idn}/var/lib/proxysql/galera_check.pl
      vserver ${idn} exec chmod 755 /var/lib/proxysql/galera_check.pl
      vserver ${idn} exec chown proxysql:proxysql /var/lib/proxysql/galera_check.pl
      if [ ! -e "/vservers/${idn}/var/lib/proxysql/galera_check.pl" ]; then
        echo "ERROR: galera_check for ProxySQL not available!"
      fi
    fi

    if [ -e "/vservers/${idn}/var/lib/proxysql/galera_check.pl" ]; then
      echo "Adding custom runtime_scheduler entry in ProxySQL..."
      rplSchdrA="DELETE FROM scheduler where id=10;"
      # rplSchdrB="DELETE FROM scheduler where id=11;"
      rplSchdrC="INSERT INTO scheduler (id,active,interval_ms,filename,arg1) VALUES (10,1,2000,'/var/lib/proxysql/galera_check.pl','-u=admin -p=${_PROXYSQL_PASSWORD} -h=127.0.0.1 -H=10:W,11:R -P=6032 --execution_time=1 --retry_down=2 --retry_up=1 --main_segment=1 --debug=0 --active_failover --log=/var/log/proxysql/galera_check.log');"
      rplSchdrD="LOAD SCHEDULER TO RUNTIME;"
      rplSchdrE="SAVE SCHEDULER TO DISK;"
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${rplSchdrA}\""
        # ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${rplSchdrB}\""
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${rplSchdrC}\""
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${rplSchdrD}\""
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${rplSchdrE}\""
      echo "Checking modified runtime_scheduler in ProxySQL..."
        ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"SELECT * FROM runtime_scheduler\\G\""
    fi

    echo "Checking mysql_servers status in ProxySQL..."
    sleep 10
    pxyCmd="SELECT hostgroup_id,hostname,port,status,weight FROM mysql_servers;"
      ssh ${_NOSTRICT} root@${_WEB_NODE_IP} "${pxyCtx} -e \"${pxyCmd}\""

  fi
}

install_vps() {

  if [ ! -d "/vservers/" ]; then
    echo
    echo "Please run 'in-host', 'reboot' and 'up-host' before 'in-vps'"
    echo "Bye"
    echo
    exit 1
  fi

  echo "Installing vps ${idn}..."

  incl="sysvinit-core,sysvinit-utils,ssh,lsb-release,dnsutils,netcat,curl,wget,aptitude,locales,screen,python3"
  excl="systemd,systemd-sysv,libsystemd0,udev,makedev,fuse"

  if [ "${fce}" = "force" ]; then
    locMode="--force -m debootstrap"
  else
    locMode="-m debootstrap"
  fi

  eth=$(ifconfig 2>&1 \
    | tr -d "\n" \
    | cut -d" " -f1 \
    | awk '{ print $1}' \
    | sed "s/[\,':]//g" 2>&1)

  vserver ${idn} build -n ${idn} ${locMode} --i-know-its-there \
    --hostname ${hst} \
    --interface ${eth}:${vip}/32 \
    -- -d ${osx} -- --arch=amd64 --include=${incl} \
    --exclude=${excl};

  echo "Starting vps ${idn}..."
  vserver-autostart ${idn}
  vserver ${idn} start

  echo "en_US.UTF-8 UTF-8" >> /vservers/${idn}/etc/locale.gen
  sed -i "/^$/d" /vservers/${idn}/etc/locale.gen
  vserver ${idn} exec locale-gen en_US.UTF-8
  vserver ${idn} exec locale

  echo "Syncing timezone for vps ${idn}..."
  cp -af /etc/timezone /vservers/${idn}/etc/
  vserver ${idn} exec dpkg-reconfigure -f noninteractive tzdata

  echo "Syncing resolv.conf for vps ${idn}..."
  rm -f /vservers/${idn}/etc/resolv.conf
  cp -af /etc/resolv.conf /vservers/${idn}/etc/
  vserver ${idn} exec dig aegirproject.org

  if [ "${ver}" != "galera" ]; then
    echo "Installing BOA ${ver} in vps ${idn}..."
    rm -f BOA.sh.txt*
    wget -q -U iCab http://${_USE_MIR}/versions/${tRee}/boa/BOA.sh.txt
    mv -f BOA.sh.txt /vservers/${idn}/root/
    vserver ${idn} exec bash /root/BOA.sh.txt
    vserver ${idn} exec /opt/local/bin/boa in-${ver} public ${hst} ${eml} o8 mini
  else
    _REMOVE_LINKS="buagent \
                   checkroot.sh \
                   fancontrol \
                   halt \
                   hwclock.sh \
                   hwclockfirst.sh \
                   ifupdown \
                   ifupdown-clean \
                   kerneloops \
                   klogd \
                   mountall-bootclean.sh \
                   mountall.sh \
                   mountdevsubfs.sh \
                   mountkernfs.sh \
                   mountnfs-bootclean.sh \
                   mountnfs.sh \
                   mountoverflowtmp \
                   mountvirtfs \
                   mtab.sh \
                   networking \
                   procps \
                   reboot \
                   sendsigs \
                   setserial \
                   svscan \
                   sysstat \
                   umountfs \
                   umountnfs.sh \
                   umountroot \
                   urandom \
                   vnstat"
    for link in ${_REMOVE_LINKS}; do
      if [ -e "/vservers/${idn}/etc/init.d/${link}" ]; then
        vserver ${idn} exec update-rc.d -f ${link} remove
        mv -f /etc/init.d/${link} /var/backups/init.d.${link}
      fi
    done
    for s in cron dbus ssh; do
      if [ -e "/etc/init.d/${s}" ]; then
        sed -rn -e 's/^(# Default-Stop:).*$/\1 0 1 6/' -e '/^### BEGIN INIT INFO/,/^### END INIT INFO/p' /etc/init.d/${s} > /etc/insserv/overrides/${s}
      fi
    done
    /sbin/insserv -v -d &> /dev/null
  fi

  echo "Stopping vps ${idn}..."
  vserver ${idn} stop

  echo "Adding immutable flag to ${idn} vps config..."
  echo "CAP_LINUX_IMMUTABLE" >  /usr/etc/vservers/${idn}/bcapabilities
  echo "Starting vps ${idn}..."
  vserver ${idn} start
  echo
  echo "Testing vservers status..."
  vserver-stat
  echo

  echo "en_US.UTF-8 UTF-8" >> /vservers/${idn}/etc/locale.gen
  sed -i "/^$/d" /vservers/${idn}/etc/locale.gen
  vserver ${idn} exec locale-gen en_US.UTF-8
  vserver ${idn} exec locale

  if [ -d "/vservers/${idn}/root" ] \
    && [ -e "/root/.ssh/id_rsa.pub" ] \
    && [ ! -e "/vservers/${idn}/root/.ssh/id_rsa" ]; then
    vserver ${idn} exec mkdir -p ~/.ssh
    vserver ${idn} exec ssh-keygen -b 4096 -t rsa -N "" -f ~/.ssh/id_rsa
    echo "Host *" >> /vservers/${idn}/root/.ssh/config
    echo "   StrictHostKeyChecking no" >> /vservers/${idn}/root/.ssh/config
    echo "   UserKnownHostsFile=/dev/null" >> /vservers/${idn}/root/.ssh/config
    cat /root/.ssh/id_rsa.pub >> /vservers/${idn}/root/.ssh/authorized_keys
    vserver ${idn} exec chmod 600 ~/.ssh/authorized_keys
    vserver ${idn} exec chmod 700 ~/.ssh/
  fi

  if [ -x "/vservers/${idn}/usr/bin/gpg2" ]; then
    _GPG=gpg2
  else
    _GPG=gpg
  fi

  if [ "${ver}" = "galera" ]; then
    echo "Running post-install Galera VPS upgrade..."
    if [ -x "/vservers/${idn}/lib/systemd/systemd" ]; then
      echo "Removing systemd on ${osx}..."
      if [ "${osx}" = "jessie" ] \
        || [ "${osx}" = "stretch" ] \
        || [ "${osx}" = "buster" ] \
        || [ "${osx}" = "bullseye" ] \
        || [ "${osx}" = "bookworm" ]; then
        vserver ${idn} exec ${_INSTAPP} sysvinit-core
        vserver ${idn} exec ${_INSTAPP} sysvinit-utils
        if [ -e "/vservers/${idn}/usr/share/sysvinit/inittab" ]; then
          cp -af /vservers/${idn}/usr/share/sysvinit/inittab /vservers/${idn}/etc/inittab
        fi
        if [ ! -e "/vservers/${idn}/etc/apt/preferences.d/offsystemd" ]; then
          rm -f /vservers/${idn}/etc/apt/preferences.d/systemd
          echo -e 'Package: systemd\nPin: release *\nPin-Priority: -1' > /vservers/${idn}/etc/apt/preferences.d/offsystemd
          echo -e '\n\nPackage: *systemd*\nPin: release *\nPin-Priority: -1' >> /vservers/${idn}/etc/apt/preferences.d/offsystemd
        fi
        vserver ${idn} exec ${_INSTAPP} sysvinit-core
        vserver ${idn} exec ${_INSTAPP} sysvinit-utils
        rm -f /vservers/${idn}/etc/apt/sources.list.d/nosystemd.list
        rm -f /vservers/${idn}/etc/apt/preferences.d/nosystemd
      fi
    fi
  else
    echo "Running post-install Barracuda upgrade..."
    sleep 8
    if [ -z "${_ROOT_SQL_PASWD}" ]; then
      vidn="${_CLUSTER_PREFIX}db0"
      if [ -e "/vservers/${vidn}/root/.my.cluster_root_pwd.txt" ]; then
        _ROOT_SQL_PASWD=$(cat /vservers/${vidn}/root/.my.cluster_root_pwd.txt 2>&1)
        _ROOT_SQL_PASWD=$(echo -n ${_ROOT_SQL_PASWD} | tr -d "\n" 2>&1)
        _E_ROOT_SQL_PASWD="${_ROOT_SQL_PASWD//\//\\\/}"
      fi
    fi
    if [ ! -z "${_ROOT_SQL_PASWD}" ]; then
      echo "${_ROOT_SQL_PASWD}" > /vservers/${idn}/root/.my.cluster_root_pwd.txt
    fi
    vserver ${idn} exec /opt/local/bin/barracuda up-${ver}
    echo
  fi

  if [ "${cmd}" = "in-all" ] || [ "${cmd}" = "in-web" ]; then
    if [ "${ver}" != "galera" ]; then
      install_proxysql
    fi
  fi

  echo
  echo "The ${idn} VPS installation is complete!"
  echo
}

install_octopus() {
  check_config_cluster
  idn="${_CLUSTER_PREFIX}web"
  if [ -e "/vservers/${idn}/data/all" ] \
    && [[ "${idn}" =~ "web" ]]; then
    vserver ${idn} exec /opt/local/bin/boa in-oct ${email} ${user} ${mode} ${copt} ${csub} ${ccor}
    exit 0
  else
    echo
    echo "Please install the cluster before trying to add this Octopus instance"
    echo "Bye"
    echo
    exit 1
  fi
}

re_install_pxy() {
  check_config_cluster
  idn="${idn}"
  vip="${vip}"
  fce="${fce}"
  if [ -e "/vservers/${idn}/usr/bin/mysql" ] \
    && [ "${vip}" = "${_WEB_NODE_IP}" ] \
    && [ "${fce}" = "force-reinstall" ]; then
    install_proxysql
  fi
}

install_web_node() {
  check_config_cluster
  idn="${_CLUSTER_PREFIX}web"
  hst="${_WEB_FQDN}"
  vip="${_WEB_NODE_IP}"
  osx="${_CLUSTER_OS}"
  if [ "${cmd}" = "in-all" ]; then
    ver="${xer}"
  fi
  eml="${_CLUSTER_EMAIL}"
  if [ ! -e "/vservers/${idn}/" ] \
    && [[ "${idn}" =~ "web" ]]; then
    install_vps
  fi
}

upgrade_web_node() {
  check_config_cluster
  idn="${_CLUSTER_PREFIX}web"
  vserver ${idn} exec /opt/local/bin/barracuda up-${ver} system
}

default_my_cnf_copy() {

  _CPU_INFO=$(grep -c processor /proc/cpuinfo 2>&1)
  _CPU_INFO=${_CPU_INFO//[^0-9]/}
  _NPROC_TEST=$(which nproc 2>&1)
  if [ -z "${_NPROC_TEST}" ]; then
    _CPU_NR="${_CPU_INFO}"
  else
    _CPU_NR=$(nproc 2>&1)
  fi
  _CPU_NR=${_CPU_NR//[^0-9]/}
  if [ ! -z "${_CPU_NR}" ] && [ ! -z "${_CPU_INFO}" ] \
    && [ "${_CPU_NR}" -gt "${_CPU_INFO}" ] && [ "${_CPU_INFO}" -gt "0" ]; then
    _CPU_NR="${_CPU_INFO}"
  fi
  if [ -z "${_CPU_NR}" ] || [ "${_CPU_NR}" -lt "1" ]; then
    _CPU_NR=1
  fi
  _CPU_MX=$(( _CPU_NR * 2 ))
  if [ "${_CPU_MX}" -lt "64" ]; then
    _CPU_MX=64
  fi
  _CPU_FC=$(( _CPU_MX * 5 ))

  ssh ${_NOSTRICT} root@${IP} "echo '
[mysqld]

###
### Galera configuration template
### /etc/mysql/conf.d/galera.cnf
###

# Data directory
#datadir=/var/lib/mysql

# Temp directory
#tmpdir=/tmp

# MySQL User
#user=mysql

### Mandatory for Galera
#
binlog_format=ROW
#default_storage_engine=InnoDB
innodb_autoinc_lock_mode=2

### Recommended for Galera
#
innodb_flush_log_at_trx_commit=0
binlog_row_image=minimal
wsrep_slave_threads=${_CPU_MX}
wsrep_log_conflicts=ON
pxc_strict_mode=PERMISSIVE
performance_schema=OFF

### Optional Memory Settings for Galera
#
# gcs.recv_q_hard_limit=64G
# gcs.recv_q_soft_limit=32G
# gcs.max_throttle=0.25
# gcs.fc_limit=${_CPU_FC}
# gcs.fc_factor=0.8

### Galera Provider Configuration
#
wsrep_provider=/usr/lib/galera3/libgalera_smm.so

### Galera Cluster Configuration
#
wsrep_cluster_name=\"'${_CLUSTER_NAME}'\"
wsrep_cluster_address=\"'${_CLUSTER_STRING}',...?pc.wait_prim=no\"

### Galera Synchronization Congifuration
#
wsrep_sst_method=rsync
wsrep_sst_auth=sstuser:'${_MAINT_USER_PWD}'

### Galera extra tuning
#
wsrep_debug=OFF
wsrep_retry_autocommit=8
wsrep_sync_wait=7

### Galera Node Configuration
#
wsrep_node_address=\"'${IP}'\"
wsrep_node_name=\"'${IP}'\"

### Optional MyISAM Support in Galera
#
# wsrep_replicate_myisam=1

' > /etc/mysql/conf.d/galera.cnf"

  	ssh ${_NOSTRICT} root@${IP} "echo '
[client]
port                    = 3306
socket                  = /run/mysqld/mysqld.sock
default-character-set   = utf8mb4

[mysqld]
user                    = mysql
pid-file                = /run/mysqld/mysqld.pid
socket                  = /run/mysqld/mysqld.sock
port                    = 3306
basedir                 = /usr
datadir                 = /var/lib/mysql
tmpdir                  = /tmp
#default_storage_engine  = InnoDB
lc_messages_dir         = /usr/share/mysql
lc_messages             = en_US
character_set_server    = utf8mb4
collation_server        = utf8mb4_unicode_ci
transaction-isolation   = READ-COMMITTED
transaction-read-only   = OFF
skip-external-locking
skip-name-resolve
performance_schema      = OFF
connect_timeout         = 60
join_buffer_size        = 4M
key_buffer_size         = 1024M
max_allowed_packet      = 256M
max_connect_errors      = 300
max_connections         = 300
max_user_connections    = 150
myisam_sort_buffer_size = 256K
read_buffer_size        = 8M
read_rnd_buffer_size    = 8M
sort_buffer_size        = 256K
bulk_insert_buffer_size = 256K
table_open_cache        = 2048
table_definition_cache  = 512
thread_stack            = 256K
thread_cache_size       = 128
wait_timeout            = 3600
tmp_table_size          = 1024M
max_heap_table_size     = 1024M
low_priority_updates    = 1
concurrent_insert       = 2
userstat                = 1
#max_tmp_tables          = 16384
server-id               = '${inc}'
#myisam-recover-options  = BACKUP
#myisam_recover          = BACKUP
sync_binlog             = 0
open_files_limit        = 294912
innodb_autoinc_lock_mode= 2
group_concat_max_len    = 10000
#expire_logs_days        = 1
#max_binlog_size         = 100M
#binlog_row_image        = minimal
#binlog_format           = ROW
#slow_query_log          = 1
#long_query_time         = 10
#slow_query_log_file     = /var/log/mysql/sql-slow-query.log
#log_queries_not_using_indexes
#innodb-defragment       = 1

# * InnoDB
sql_mode                = NO_ENGINE_SUBSTITUTION
innodb_buffer_pool_instances = 8
innodb_page_cleaners    = 8
innodb_lru_scan_depth   = 1024
#innodb_redo_log_capacity = 1024M
#innodb_log_file_size    = 1024M
innodb_buffer_pool_size = 2048M
innodb_log_buffer_size  = 256M
innodb_file_per_table   = 1
#innodb_use_native_aio   = 1
innodb_open_files       = 196608
innodb_io_capacity      = 1000
#innodb_flush_method     = O_DSYNC
innodb_flush_log_at_trx_commit = 0
innodb_thread_concurrency = 0
innodb_lock_wait_timeout = 300
innodb_buffer_pool_dump_at_shutdown = 1
innodb_buffer_pool_load_at_startup = 1
#innodb_buffer_pool_dump_pct = 100
#innodb_buffer_pool_dump_now = ON
innodb_stats_on_metadata = OFF
innodb_adaptive_hash_index = 0
innodb_default_row_format = dynamic
innodb_print_all_deadlocks = ON
innodb_doublewrite = 0
#innodb_checksum_algorithm=crc32
innodb_flush_log_at_timeout = 5
#innodb_force_recovery = 3
#innodb_temp_data_file_path = ibtmp1:12M:autoextend:max:900M

[mysqld_safe]
socket                  = /run/mysqld/mysqld.sock
nice                    = 0
open_files_limit        = 294912
syslog

[mysqldump]
quick
max_allowed_packet      = 256M
quote-names

[mysql]
default-character-set   = utf8mb4
no-auto-rehash

[myisamchk]
key_buffer              = 1M
sort_buffer_size        = 256K
read_buffer             = 4M
write_buffer            = 4M

[isamchk]
key_buffer              = 1M
sort_buffer_size        = 256K
read_buffer             = 4M
write_buffer            = 4M

[mysqlhotcopy]
interactive-timeout

!includedir /etc/mysql/conf.d/
' > /etc/mysql/my.cnf"
}

install_db_cluster() {
  check_config_cluster

  if [ "${_OS_CODE}" = "daedalus" ]; then
    _SQL_OS_CODE=bookworm
  elif [ "${_OS_CODE}" = "chimaera" ]; then
    _SQL_OS_CODE=bullseye
  elif [ "${_OS_CODE}" = "beowulf" ]; then
    _SQL_OS_CODE=buster
  else
    _SQL_OS_CODE="${_OS_CODE}"
  fi

  if [ -x "/vservers/${idn}/usr/bin/gpg2" ]; then
    _GPG=gpg2
  else
    _GPG=gpg
  fi

  _CLUSTER_NAME="${_CLUSTER_PREFIX}_galera"
  _MAINT_USER_PWD="$(openssl rand -base64 64 2>&1)"
  _ROOT_SQL_PASWD="$(openssl rand -base64 64 2>&1)"
  _E_MAINT_USER_PWD="${_MAINT_USER_PWD//\//\\\/}"
  _E_ROOT_SQL_PASWD="${_ROOT_SQL_PASWD//\//\\\/}"
  _CLUSTER_STRING="gcomm://"$(IFS=, ; echo "${_DB_NODE_IP[*]}")
  inc="0"

  percList="/etc/apt/sources.list.d/percona-release.list"
  _DB_SRC="repo.percona.com"
  percNodot="${_DB_SERIES//./}"
  percRepo="${_DB_SRC}/ps-${percNodot}/apt"
  percTools="${_DB_SRC}/tools/apt"

  for IP in "${_DB_NODE_IP[@]}"; do
    echo "${IP} # Cluster Galera Node" >> /etc/csf/csf.allow
    echo "${IP} # Cluster Galera Node" >> /etc/csf/csf.ignore
  done
  if [ ! -z "${_WEB_NODE_IP}" ]; then
    echo "${_WEB_NODE_IP} # Web Cluster Node" >> /etc/csf/csf.allow
    echo "${_WEB_NODE_IP} # Web Cluster Node" >> /etc/csf/csf.ignore
  fi
  service lfd stop
  wait
  kill -9 $(ps aux | grep '[C]onfigServer' | awk '{print $2}') &> /dev/null
  killall sleep &> /dev/null
  rm -f /etc/csf/csf.error
  csf -q
  service lfd start
  wait
  ### Linux kernel TCP SACK CVEs mitigation
  ### CVE-2019-11477 SACK Panic
  ### CVE-2019-11478 SACK Slowness
  ### CVE-2019-11479 Excess Resource Consumption Due to Low MSS Values
  if [ -x "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
    _SACK_TEST=$(ip6tables --list | grep tcpmss 2>&1)
    if [[ ! "${_SACK_TEST}" =~ "tcpmss" ]]; then
      sysctl net.ipv4.tcp_mtu_probing=0 &> /dev/null
      iptables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
      ip6tables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
    fi
  fi

  for IP in "${_DB_NODE_IP[@]}"; do
  	echo "Installing DB cluster node on ${IP} ..."
    idn="${_CLUSTER_PREFIX}db${inc}"
    hst="${_CLUSTER_PREFIX}db${inc}.${_CLUSTER_SUFFIX}"
    vip="${IP}"
    osx="${_CLUSTER_OS}"
    ver="galera"
    eml="${_CLUSTER_EMAIL}"
    if [ ! -e "/vservers/${idn}/" ] \
      && [ ! -z "${idn}" ]; then
      install_vps
      echo "Installing Percona Cluster on VPS ${idn}..."
    fi
    if [ ! -e "/vservers/${idn}/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/vservers/${idn}/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /vservers/${idn}/etc/apt/apt.conf.d/00sandboxoff
    fi
    inc=$((inc+1))
    echo "${_MAINT_USER_PWD}" > /vservers/${idn}/root/.my.cluster_maint_pwd.txt
    echo "${_ROOT_SQL_PASWD}" > /vservers/${idn}/root/.my.cluster_root_pwd.txt
  	vserver ${idn} exec ${_APT_UPDATE} -qq
    vserver ${idn} exec ${_INSTAPP} debian-keyring
    vserver ${idn} exec ${_INSTAPP} debian-archive-keyring
  	vserver ${idn} exec apt-get upgrade -y -qq
  	vserver ${idn} exec ${_INSTAPP} software-properties-common dirmngr
    rm -f /vservers/${idn}/etc/apt/sources.list.d/mariadb*
    rm -f /vservers/${idn}/etc/apt/sources.list.d/ourdelta*
    rm -f /vservers/${idn}/etc/apt/sources.list.d/percona*
    rm -f /vservers/${idn}/etc/apt/sources.list.d/xtrabackup*
    _PERCONA_KEYS_SIG="8507EFA5"
    if [ ! -e "/vservers/${idn}/etc/apt/keyrings/percona.gpg" ]; then
      if [ ! -e "/vservers/${idn}/etc/apt/keyrings" ]; then
        mkdir -m 0755 -p /vservers/${idn}/etc/apt/keyrings
      fi
      if [ -e "/vservers/${idn}/etc/apt/trusted.gpg.d/percona.gpg" ] \
        || [ -e "/vservers/${idn}/etc/apt/trusted.gpg.d/percona-keyring.gpg~" ]; then
        rm -f /vservers/${idn}/etc/apt/trusted.gpg.d/percona*
      fi
      vserver ${idn} exec apt-key del ${_PERCONA_KEYS_SIG} &> /dev/null
      if [ ! -e "/vservers/${idn}/etc/apt/keyrings/percona.gpg" ]; then
        curl -fsSL ${urlDev}/percona-key.gpg | ${_GPG} --dearmor -o /vservers/${idn}/etc/apt/keyrings/percona.gpg
      fi
      chmod 644 /vservers/${idn}/etc/apt/keyrings/percona.gpg
    fi
    echo "## Percona Cluster APT Repository" > /vservers/${idn}${percList}
    if [ -e "/vservers/${idn}/etc/apt/keyrings/percona.gpg" ]; then
      echo "deb [signed-by=/etc/apt/keyrings/percona.gpg] http://${percRepo} ${_SQL_OS_CODE} main" >> /vservers/${idn}${percList}
      echo "deb-src [signed-by=/etc/apt/keyrings/percona.gpg] http://${percRepo} ${_SQL_OS_CODE} main" >> /vservers/${idn}${percList}
    else
      echo "deb http://${percRepo} ${_SQL_OS_CODE} main" >> /vservers/${idn}${percList}
      echo "deb-src http://${percRepo} ${_SQL_OS_CODE} main" >> /vservers/${idn}${percList}
    fi
    chmod 644 /vservers/${idn}${percList}
    echo -e 'Package: *\nPin: release o=Percona Development Team\nPin-Priority: 1001' > /vservers/${idn}/etc/apt/preferences.d/00percona.pref
  	vserver ${idn} exec ${_APT_UPDATE} -qq
  	vserver ${idn} exec ${_INSTAPP} percona-xtradb-cluster-57
  	##vserver ${idn} exec ${_INSTAPP} percona-xtrabackup-24
    echo "[client]" > /vservers/${idn}/root/.my.cnf
    echo "user=root" >> /vservers/${idn}/root/.my.cnf
    echo "password=${_ROOT_SQL_PASWD}" >> /vservers/${idn}/root/.my.cnf
    vserver ${idn} exec chmod 0600 /root/.my.cnf
    echo "db=mysql" > /vservers/${idn}/root/.mytop
    vserver ${idn} exec chmod 0600 /root/.mytop
    vserver ${idn} exec update-rc.d -f mysql remove

    ##echo "Running mysql_secure_installation procedure on ${IP} DB node..."
    ##vserver ${idn} exec mysqladmin -u root flush-hosts"
    ##vserver ${idn} exec mysql -u root -e "DELETE FROM mysql.user WHERE User='';"
    ##vserver ${idn} exec mysql -u root -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
    ##vserver ${idn} exec mysql -u root -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';"
    ##vserver ${idn} exec mysql -u root -e "UPDATE mysql.user SET Password=PASSWORD('${_ROOT_SQL_PASWD}') WHERE User='root';"
    ##vserver ${idn} exec mysql -u root -e "UPDATE mysql.user SET Password=PASSWORD('${_MAINT_USER_PWD}') WHERE User='debian-sys-maint';"
    ##if [ -e "/vservers/${idn}/etc/mysql/debian.cnf" ]; then
    ##  sed -i "s/^password =.*/password = ${_MAINT_USER_PWD}/g" /vservers/${idn}/etc/mysql/debian.cnf
    ##fi
    ##vserver ${idn} exec mysql -u root -e "FLUSH PRIVILEGES;"

  	ssh ${_NOSTRICT} root@${IP} "echo '
[client]
host     = localhost
user     = debian-sys-maint
password = '${_MAINT_USER_PWD}'
socket   = /run/mysqld/mysqld.sock
[mysql_upgrade]
host     = localhost
user     = debian-sys-maint
password = '${_MAINT_USER_PWD}'
socket   = /run/mysqld/mysqld.sock
basedir  = /usr
' > /etc/mysql/debian.cnf"

    default_my_cnf_copy

    ssh ${_NOSTRICT} root@${IP} "service mysql stop"

  done

  echo "Waiting ~5 minutes for ${_DB_NODE_IP[1]} DB node bootstrap-pxc..."
  ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "service mysql stop"
  sleep 25
  ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mv -f /var/lib/mysql/ib_logfile0 /var/backups/old-ib_logfile0"
  ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mv -f /var/lib/mysql/ib_logfile1 /var/backups/old-ib_logfile1"
  sleep 25
  ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "service mysql bootstrap-pxc"
  sleep 180

  echo "Adding grants for Galera sstuser on Percona Cluster..."
  check_mysql_version
  for IP in "${_DB_NODE_IP[@]}"; do
    pxyCmd="CREATE USER IF NOT EXISTS 'root'@'${IP}';"
      ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
    pxyCmd="GRANT ALL ON *.* TO 'root'@'${IP}' WITH GRANT OPTION;"
      ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
    if [ "${_DB_V}" = "5.7" ]; then
      pxyCmd="ALTER USER 'root'@'${IP}' IDENTIFIED WITH mysql_native_password BY '${_ROOT_SQL_PASWD}';"
    else
      pxyCmd="ALTER USER 'root'@'${IP}' IDENTIFIED WITH caching_sha2_password BY '${_ROOT_SQL_PASWD}';"
    fi
      ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
    pxyCmd="CREATE USER IF NOT EXISTS 'sstuser'@'${IP}';"
      ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
    pxyCmd="GRANT RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO 'sstuser'@'${IP}';"
      ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
    pxyCmd="ALTER USER 'sstuser'@'${IP}' IDENTIFIED BY '${_MAINT_USER_PWD}';"
      ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  done
  pxyCmd="CREATE USER IF NOT EXISTS 'sstuser'@'localhost';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="CREATE USER IF NOT EXISTS 'sstuser'@'127.0.0.1';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="GRANT RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO 'sstuser'@'localhost';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="GRANT RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO 'sstuser'@'127.0.0.1';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="ALTER USER 'sstuser'@'localhost' IDENTIFIED BY '${_MAINT_USER_PWD}';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="ALTER USER 'sstuser'@'127.0.0.1' IDENTIFIED BY '${_MAINT_USER_PWD}';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""

  echo "Adding grants for legacy debian-sys-maint on Percona Cluster..."
  pxyCmd="CREATE USER IF NOT EXISTS 'debian-sys-maint'@'localhost';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="CREATE USER IF NOT EXISTS 'debian-sys-maint'@'127.0.0.1';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="GRANT ALL ON *.* TO 'debian-sys-maint'@'localhost';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="GRANT ALL ON *.* TO 'debian-sys-maint'@'127.0.0.1';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="ALTER USER 'debian-sys-maint'@'localhost' IDENTIFIED BY '${_MAINT_USER_PWD}';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="ALTER USER 'debian-sys-maint'@'127.0.0.1' IDENTIFIED BY '${_MAINT_USER_PWD}';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""

  echo "Syncing grants for root on Percona Cluster..."
  pxyCmd="CREATE USER IF NOT EXISTS 'root'@'localhost';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="CREATE USER IF NOT EXISTS 'root'@'127.0.0.1';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="CREATE USER IF NOT EXISTS 'root'@'${_WEB_NODE_IP}';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="GRANT ALL ON *.* TO 'root'@'localhost' WITH GRANT OPTION;"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="GRANT ALL ON *.* TO 'root'@'127.0.0.1' WITH GRANT OPTION;"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  pxyCmd="GRANT ALL ON *.* TO 'root'@'${_WEB_NODE_IP}' WITH GRANT OPTION;"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  if [ "${_DB_V}" = "5.7" ]; then
    pxyCmd="ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${_ROOT_SQL_PASWD}';"
  else
    pxyCmd="ALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY '${_ROOT_SQL_PASWD}';"
  fi
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  if [ "${_DB_V}" = "5.7" ]; then
    pxyCmd="ALTER USER 'root'@'127.0.0.1' IDENTIFIED WITH mysql_native_password BY '${_ROOT_SQL_PASWD}';"
  else
    pxyCmd="ALTER USER 'root'@'127.0.0.1' IDENTIFIED WITH caching_sha2_password BY '${_ROOT_SQL_PASWD}';"
  fi
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""
  if [ "${_DB_V}" = "5.7" ]; then
    pxyCmd="ALTER USER 'root'@'${_WEB_NODE_IP}' IDENTIFIED WITH mysql_native_password BY '${_ROOT_SQL_PASWD}';"
  else
    pxyCmd="ALTER USER 'root'@'${_WEB_NODE_IP}' IDENTIFIED WITH caching_sha2_password BY '${_ROOT_SQL_PASWD}';"
  fi
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""

  pxyCmd="SHOW STATUS LIKE 'wsrep_%';"
    ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"${pxyCmd}\""

  for IP in "${_DB_NODE_IP[@]}"; do
    if [ "${IP}" != "${_DB_NODE_IP[1]}" ]; then
      echo "Waiting ~5 minutes for ${IP} DB node restart..."
      ssh ${_NOSTRICT} root@${IP} "service mysql stop"
      sleep 25
      ssh ${_NOSTRICT} root@${IP} "mv -f /var/lib/mysql/ib_logfile0 /var/backups/old-ib_logfile0"
      ssh ${_NOSTRICT} root@${IP} "mv -f /var/lib/mysql/ib_logfile1 /var/backups/old-ib_logfile1"
      sleep 25
      ssh ${_NOSTRICT} root@${IP} "service mysql start"
      sleep 180
      ssh ${_NOSTRICT} root@${IP} "mysql -u root -e \"SHOW STATUS LIKE 'wsrep%';\""
    fi
  done
  echo "All DB nodes restarted!"

}

upgrade_db_cluster() {
  check_config_cluster

  _CLUSTER_NAME="${_CLUSTER_PREFIX}_galera"
  _CLUSTER_STRING="gcomm://"$(IFS=, ; echo "${_DB_NODE_IP[*]}")
  inc="0"

  for IP in "${_DB_NODE_IP[@]}"; do
    idn="${_CLUSTER_PREFIX}db${inc}"
    hst="${_CLUSTER_PREFIX}db${inc}.${_CLUSTER_SUFFIX}"
    vip="${IP}"
    osx="${_CLUSTER_OS}"
    ver="galera"
    eml="${_CLUSTER_EMAIL}"
    inc=$((inc+1))
    _MAINT_USER_PWD=`cat /vservers/${idn}/root/.my.cluster_maint_pwd.txt`
    _ROOT_SQL_PASWD=`cat /vservers/${idn}/root/.my.cluster_root_pwd.txt`

    echo "Upgrading DB cluster node on ${idn}/${IP}..."

    if [ ! -e "/vservers/${idn}/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/vservers/${idn}/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /vservers/${idn}/etc/apt/apt.conf.d/00sandboxoff
    fi

    if [ -e "/vservers/${idn}${optBin}/boa" ]; then
      rm -f /vservers/${idn}${optBin}/boa
    fi
    mkdir -p /vservers/${idn}/${optBin}
    curl ${crlGet} "${urlHmr}/${tBn}/boa" -o /vservers/${idn}${optBin}/boa
    ssh ${_NOSTRICT} root@${IP} "chmod 700 ${optBin}/boa"

    if [ -e "/vservers/${idn}${optBin}/mycnfup" ]; then
      rm -f /vservers/${idn}${optBin}/mycnfup
    fi
    mkdir -p /vservers/${idn}/${optBin}
    curl ${crlGet} "${urlHmr}/${tBn}/mycnfup" -o /vservers/${idn}${optBin}/mycnfup
    ssh ${_NOSTRICT} root@${IP} "chmod 700 ${optBin}/mycnfup"
    if [ -e "/vservers/${idn}${optBin}/mycnfup" ]; then
      echo "Running mycnfup check on ${idn}/${IP}..."
      ssh ${_NOSTRICT} root@${IP} "bash ${optBin}/mycnfup check"
    fi

    if [ -x "/vservers/${idn}/usr/bin/gpg2" ]; then
      _GPG=gpg2
    else
      _GPG=gpg
    fi
    _PERCONA_KEYS_SIG="8507EFA5"

    echo "INFO: Retrieving ${_PERCONA_KEYS_SIG} key on ${idn}/${IP}..."
    if [ ! -e "/vservers/${idn}/etc/apt/keyrings/percona.gpg" ]; then
      if [ ! -e "/vservers/${idn}/etc/apt/keyrings" ]; then
        mkdir -m 0755 -p /vservers/${idn}/etc/apt/keyrings
      fi
      if [ -e "/vservers/${idn}/etc/apt/trusted.gpg.d/percona.gpg" ] \
        || [ -e "/vservers/${idn}/etc/apt/trusted.gpg.d/percona-keyring.gpg~" ]; then
        rm -f /vservers/${idn}/etc/apt/trusted.gpg.d/percona*
      fi
      vserver ${idn} exec apt-key del ${_PERCONA_KEYS_SIG} &> /dev/null
      if [ ! -e "/vservers/${idn}/etc/apt/keyrings/percona.gpg" ]; then
        curl -fsSL ${urlDev}/percona-key.gpg | ${_GPG} --dearmor -o /vservers/${idn}/etc/apt/keyrings/percona.gpg
      fi
      chmod 644 /vservers/${idn}/etc/apt/keyrings/percona.gpg
    fi
  	vserver ${idn} exec ${_APT_UPDATE} -qq
  	vserver ${idn} exec ${_INSTAPP} bc
  	vserver ${idn} exec apt-get upgrade ${_APT_XTR}
  	vserver ${idn} exec apt-get dist-upgrade ${_APT_XTR}
  	vserver ${idn} exec rm -f /var/lib/man-db/auto-update
  	vserver ${idn} exec apt-get install lsb-release
  	vserver ${idn} exec dpkg --configure --force-all -a
  	vserver ${idn} exec update-rc.d -f mysql remove

  	default_my_cnf_copy

    if [ -e "/vservers/${idn}${optBin}/mycnfup" ]; then
      echo "Running mycnfup tune on ${idn}/${IP}..."
      ssh ${_NOSTRICT} root@${IP} "bash ${optBin}/mycnfup tune"
      wait
    fi
    echo "Running mysql_upgrade on ${idn}/${IP} to update tables if needed"
    ssh ${_NOSTRICT} root@${IP} "mysql_upgrade"
    wait
    echo "Checking wsrep status on ${idn}/${IP}"
    sleep 3
    ssh ${_NOSTRICT} root@${IP} "mysql -u root -e \"SHOW STATUS LIKE 'wsrep%';\""
    wait
    echo "Waiting 60 seconds after ${idn}/${IP} upgrade..."
    sleep 60
    echo "Upgrade for ${idn}/${IP} completed!"
  done

  echo "All DB nodes updated!"
}

install_host() {

  _CUSTOM_DNS_TEST=$(grep 8.8.8.8 /etc/resolv.conf 2>&1)
  if [[ ! "${_CUSTOM_DNS_TEST}" =~ "8.8.8.8" ]]; then
    echo "Fixing resolver..."
    cp -af /etc/resolv.conf /etc/resolv.conf.prev
    echo "nameserver 127.0.0.1" > /etc/resolv.conf
    echo "nameserver 1.1.1.1" >> /etc/resolv.conf
    echo "nameserver 1.0.0.1" >> /etc/resolv.conf
    echo "nameserver 8.8.8.8" >> /etc/resolv.conf
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf
    cat /etc/resolv.conf.prev >> /etc/resolv.conf
    cat /etc/resolv.conf
    echo
  fi

  ${_INSTAPP} wget

  echo "Configuring /etc/apt/sources.list"

  cat /etc/apt/sources.list
  echo
  if [ "${_OS_CODE}" = "stretch" ] || [ "${_OS_CODE}" = "jessie" ]; then
    _APT_MIRROR="archive.debian.org/debian"
    _APT_REPSRC="${_OS_CODE}-backports"
    _SEC_MIRROR="archive.debian.org/debian-security"
    _SEC_REPSRC="${_OS_CODE}/updates"
  elif [ "${_OS_CODE}" = "buster" ]; then
    _APT_MIRROR="${_MIRROR}/debian"
    _APT_REPSRC="${_OS_CODE}-updates"
    _SEC_MIRROR="security.debian.org"
    _SEC_REPSRC="${_OS_CODE}/updates"
  elif [ "${_OS_CODE}" = "bullseye" ]; then
    _APT_MIRROR="${_MIRROR}/debian"
    _APT_REPSRC="${_OS_CODE}-updates"
    _SEC_MIRROR="security.debian.org/debian-security"
    _SEC_REPSRC="${_OS_CODE}-security"
  elif [ "${_OS_CODE}" = "bookworm" ]; then
    _APT_MIRROR="${_MIRROR}/debian"
    _APT_REPSRC="${_OS_CODE}-updates"
    _SEC_MIRROR="security.debian.org/debian-security"
    _SEC_REPSRC="${_OS_CODE}-security"
  fi
  echo "## DEBIAN MAIN REPOSITORIES" > ${aptLiSys}
  echo "deb http://${_APT_MIRROR} ${_OS_CODE} main contrib non-free" >> ${aptLiSys}
  echo "deb-src http://${_APT_MIRROR} ${_OS_CODE} main contrib non-free" >> ${aptLiSys}
  echo "" >> ${aptLiSys}
  echo "## MAJOR BUG FIX UPDATES produced after the final release" >> ${aptLiSys}
  echo "deb http://${_APT_MIRROR} ${_APT_REPSRC} main contrib non-free" >> ${aptLiSys}
  echo "deb-src http://${_APT_MIRROR} ${_APT_REPSRC} main contrib non-free" >> ${aptLiSys}
  echo "" >> ${aptLiSys}
  echo "## DEBIAN SECURITY UPDATES" >> ${aptLiSys}
  echo "deb http://${_SEC_MIRROR} ${_SEC_REPSRC} main contrib non-free" | fmt -su -w 2500 >> ${aptLiSys}
  echo "deb-src http://${_SEC_MIRROR} ${_SEC_REPSRC} main contrib non-free" | fmt -su -w 2500 >> ${aptLiSys}
  echo
  cat /etc/apt/sources.list

  echo "Installing basic tools..."
  apt_clean_update
  apt-get upgrade ${nrmUpArg}
  ${_INSTAPP} locales
  ${_INSTAPP} lsb-release
  ${_INSTAPP} dnsutils
  ${_INSTAPP} netcat
  ${_INSTAPP} curl
  ${_INSTAPP} wget
  ${_INSTAPP} libwww-perl
  ${_INSTAPP} mc
  ${_INSTAPP} screen
  ${_INSTAPP} hdparm
  ${_INSTAPP} iotop
  ${_INSTAPP} ntpdate
  ${_INSTAPP} parted
  ${_INSTAPP} build-essential
  ${_INSTAPP} iptables
  ${_INSTAPP} ipset

  if [ -x "/sbin/ipset" ] && [ ! -e "/usr/sbin/ipset" ]; then
    ln -s /sbin/ipset /usr/sbin/ipset
  fi
  if [ -x "/usr/sbin/ipset" ] && [ ! -e "/sbin/ipset" ]; then
    ln -s /usr/sbin/ipset /sbin/ipset
  fi

  echo "Setting hostname to ${hst}"
  echo ${hst} > /etc/hostname
  hostname -b ${hst}

  echo "Installing csf/lfd..."
  cd /var/opt
  wget -q -U iCab http://${_USE_MIR}/dev/src/csf-${_CSF_VRN}.tgz
  tar -xzf csf-${_CSF_VRN}.tgz
  cd csf
  sh install.sh
  cd /etc/csf
  mv -f csf.conf csf.conf-pre
  wget -q -U iCab http://${_USE_MIR}/cluster/csf.conf
  chmod 600 /etc/csf/csf.conf
  sed -i "s/^Port.*/Port 24/g" /etc/ssh/sshd_config
  echo "UseDNS no" >> /etc/ssh/sshd_config
  /etc/init.d/ssh restart
  chmod 700 /root
  cd /
  chmod 711 bin boot data dev emul etc home lib media mnt opt sbin selinux srv sys usr var

  echo "Updating init scripts..."
  update-rc.d cron defaults
  update-rc.d lfd defaults
  update-rc.d csf defaults
  invoke-rc.d cron restart
  invoke-rc.d lfd start
  invoke-rc.d csf start
  rm -rf /var/opt/csf*

  if_firewall_update

  echo "Improving sshd configuration..."
  sed -i "s/^PermitRootLogin.*/PermitRootLogin prohibit-password/g" /etc/ssh/sshd_config
  sed -i "s/^IgnoreUserKnownHosts.*//g" /etc/ssh/sshd_config
  sed -i "s/^PasswordAuthentication.*//g" /etc/ssh/sshd_config
  sed -i "s/^UseDNS.*//g" /etc/ssh/sshd_config
  sed -i "s/^ClientAliveInterval.*//g" /etc/ssh/sshd_config
  sed -i "s/^ClientAliveCountMax.*//g" /etc/ssh/sshd_config
  echo "IgnoreUserKnownHosts no" >> /etc/ssh/sshd_config
  if [ -e "/root/.ssh.auth.keys.only.cnf" ]; then
    echo "PasswordAuthentication no" >> /etc/ssh/sshd_config
  else
    echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config
  fi
  echo "UseDNS no" >> /etc/ssh/sshd_config
  echo "ClientAliveInterval 300" >> /etc/ssh/sshd_config
  echo "ClientAliveCountMax 10000" >> /etc/ssh/sshd_config
  echo "TCPKeepAlive yes" >> /etc/ssh/sshd_config

  echo "Restarting sshd..."
  service ssh restart

  echo "Checking if sshd listens on expected port..."
  _TEST_SSHD=$(netstat -l -n | grep 24 2>&1)
  if [[ ! "${_TEST_SSHD}" =~ "24" ]]; then
    echo "Ouch! sshd apparently doesn't listen on port 24!"
  else
    echo "OK, sshd listens on port 24"
    echo "Please remember to use this new sshd port after reboot!"
  fi

  if [ ! -e "/root/.ssh/id_rsa.pub" ]; then
    echo "Generating SSH (RSA) keys for root..."
    ssh-keygen -b 4096 -t rsa -N "" -f ~/.ssh/id_rsa
    echo
    cat /root/.ssh/id_rsa.pub
    echo
  fi

  if [ -x "/usr/bin/gpg2" ]; then
    _GPG=gpg2
  else
    _GPG=gpg
  fi

  if [ ! -e "/boot/vmlinuz-${_BNG_VERSION}-beng" ]; then
    echo "Installing beng vserver kernel..."
    echo "deb http://repo.psand.net/ ${_OS_CODE} main" > /etc/apt/sources.list.d/vserver.list
    cd /var/backups
    _KEYS_SERVER_TEST=FALSE
    until [[ "${_KEYS_SERVER_TEST}" =~ "GnuPG" ]]; do
      rm -f pubkey.txt*
      wget -q -U iCab http://repo.psand.net/pubkey.txt
      _KEYS_SERVER_TEST=$(grep GnuPG pubkey.txt 2>&1)
      sleep 2
      if [ `ps aux | grep -v "grep" | grep --count "dirmngr"` -gt "5" ]; then
        kill -9 $(ps aux | grep '[d]irmngr' | awk '{print $2}') &> /dev/null
        echo "$(date 2>&1) Too many dirmngr processes killed" >> \
          /var/xdrago/log/dirmngr-count.kill.log
      fi
    done
    cat pubkey.txt | ${_GPG} --import &> /dev/null
    rm -f pubkey.txt*
    apt_clean_update
    ${_INSTAPP} build-essential
    ${_INSTAPP} linux-headers-vserver-${_BENG_SERIES}-beng
    ${_INSTAPP} linux-image-vserver-${_BENG_SERIES}-beng
    ${_INSTAPP} linux-source-vserver-${_BENG_SERIES}-beng
    ls -la /boot
  fi

  if [ -x "/lib/systemd/systemd" ]; then
    echo "Installing sysvinit-core in ${_OS_DIST}/${_OS_CODE}..."
    if [ "${osx}" = "jessie" ] \
      || [ "${osx}" = "stretch" ] \
      || [ "${osx}" = "buster" ] \
      || [ "${osx}" = "bullseye" ] \
      || [ "${osx}" = "bookworm" ]; then
      apt_clean_update
      echo "sysvinit-core install" | dpkg --set-selections
      echo "sysvinit-utils install" | dpkg --set-selections
      ${_INSTAPP} sysvinit-core
      ${_INSTAPP} sysvinit-utils
      if [ -e "/usr/share/sysvinit/inittab" ]; then
        cp -af /usr/share/sysvinit/inittab /etc/inittab
      fi
      if [ ! -e "/etc/apt/preferences.d/offsystemd" ]; then
        rm -f /etc/apt/sources.list.d/nosystemd.list
        rm -f /etc/apt/preferences.d/nosystemd
        rm -f /etc/apt/preferences.d/systemd
        echo -e 'Package: systemd\nPin: release *\nPin-Priority: -1' > /etc/apt/preferences.d/offsystemd
        echo -e '\n\nPackage: *systemd*\nPin: release *\nPin-Priority: -1' >> /etc/apt/preferences.d/offsystemd
        apt_clean_update
      fi
      echo "sysvinit-core hold" | dpkg --set-selections &> /dev/null
      echo "sysvinit-utils hold" | dpkg --set-selections &> /dev/null
    fi
    echo
    echo "NOTE: Please reboot and then run 'cluster up-host'"
    echo "NOTE: once cluster script completes initial installation"
    echo "NOTE: to cleanly remove not used systemd packages!"
    echo
    sleep 8
  fi

  _TEST_FSTAB=$(grep "defaults,errors=remount-ro,noatime,nodiratime" /etc/fstab 2>&1)
  if [[ ! "${_TEST_FSTAB}" =~ "noatime,nodiratime" ]]; then
    echo "Updating fstab..."
    sed -i "s/errors=remount-ro/defaults,errors=remount-ro,noatime,nodiratime/g" /etc/fstab
    echo
    cat /etc/fstab
  fi

  cat <<EOF

  Please reboot this machine now!
  Remember to use port 24 for SSH connections to the host system.
  Then run 'cluster up-host' to complete this host installation procedures.

EOF
  exit 0
}

upgrade_host() {

  if [ "${mod}" = "upgrade" ]; then
    thisMode="UPGRADE"
  else
    thisMode="UPDATE"
  fi

  if [ -x "/lib/systemd/systemd" ]; then
    echo "Removing systemd in ${_OS_DIST}/${_OS_CODE}..."
    apt_clean_update
    echo "sysvinit-core install" | dpkg --set-selections
    echo "sysvinit-utils install" | dpkg --set-selections
    if [ "${osx}" = "jessie" ] \
      || [ "${osx}" = "stretch" ] \
      || [ "${osx}" = "buster" ] \
      || [ "${osx}" = "bullseye" ] \
      || [ "${osx}" = "bookworm" ]; then
      ${_INSTAPP} sysvinit-core
      ${_INSTAPP} sysvinit-utils
      if [ -e "/usr/share/sysvinit/inittab" ]; then
        cp -af /usr/share/sysvinit/inittab /etc/inittab
      fi
      if [ ! -e "/etc/apt/preferences.d/offsystemd" ]; then
        rm -f /etc/apt/sources.list.d/nosystemd.list
        rm -f /etc/apt/preferences.d/nosystemd
        rm -f /etc/apt/preferences.d/systemd
        echo -e 'Package: systemd\nPin: release *\nPin-Priority: -1' > /etc/apt/preferences.d/offsystemd
        echo -e '\n\nPackage: *systemd*\nPin: release *\nPin-Priority: -1' >> /etc/apt/preferences.d/offsystemd
        apt_clean_update
      fi
    fi
    apt-get remove systemd -y --purge --auto-remove --allow-remove-essential -qq 2> /dev/null
    apt-get remove libnss-systemd -y --purge --auto-remove --allow-remove-essential -qq 2> /dev/null
    apt-get remove systemd-sysv -y --purge --auto-remove --allow-remove-essential -qq 2> /dev/null
    apt-get autoremove --purge -y -qq 2> /dev/null
    apt-get autoclean -y -qq 2> /dev/null
    echo "sysvinit-core hold" | dpkg --set-selections &> /dev/null
    echo "sysvinit-utils hold" | dpkg --set-selections &> /dev/null
  fi

  if [ "${thisMode}" = "UPGRADE" ]; then
    echo "Installing vserver tools dependencies..."
    apt_clean_update
    ${_INSTAPP} vlan
    ${_INSTAPP} e2fslibs-dev
    ${_INSTAPP} libnss3-dev
    ${_INSTAPP} libvserver0-dev
    ${_INSTAPP} libvserver0
    ${_INSTAPP} debootstrap
    if [ -e "/etc/cron.daily/mlocate" ]; then
      mv -f /etc/cron.daily/mlocate /var/backups/
    fi

    echo "Installing otherwise uninstalled stuff..."
    ${_INSTAPP} irqbalance
    ${_INSTAPP} libuuid-perl
    ${_INSTAPP} linux-base
    echo "OPTIONS=\"--hintpolicy=ignore\"" >> /etc/default/irqbalance
    service irqbalance stop
    service irqbalance start

    echo "Installing vserver tools..."
    apt-get remove util-vserver -y --purge --auto-remove -qq
    apt-get autoremove -y
    cd /var/opt
    rm -rf util-vserver*
    wget -q -U iCab http://${_USE_MIR}/dev/src/util-vserver-${_UTIL_VRN}.tar.gz
    tar -xzf util-vserver-${_UTIL_VRN}.tar.gz
    cd util-vserver-${_UTIL_VRN}
    bash ./configure --prefix=/usr
    make --quiet
    make --quiet install
    make --quiet install-distribution
    cd
    vserver --version

    chmod 755 /vservers
    setattr --barrier /vservers
    echo "kernel.vshelper = /sbin/vshelper" >> /etc/sysctl.conf
  fi

  cd
  cp -af /etc/sysctl.conf /etc/sysctl.conf.thrd.three
  wget -q -U iCab http://${_USE_MIR}/versions/${tRee}/boa/aegir/conf/sysctl.conf
  cp -af sysctl.conf /etc/sysctl.conf
  echo "kernel.vshelper = /sbin/vshelper" >> /etc/sysctl.conf
  rm -f sysctl.conf*
  sysctl -p
  swapoff -a
  swapon -a

  if [ "${thisMode}" = "UPGRADE" ]; then
    echo "Installing vserver initd scripts..."
    cp -af /usr/etc/init.d/vservers-default /etc/init.d/
    cp -af /usr/etc/init.d/vprocunhide /etc/init.d/
    cp -af /usr/etc/init.d/util-vserver /etc/init.d/
    update-rc.d util-vserver defaults
    update-rc.d vprocunhide defaults
    update-rc.d vservers-default defaults
    service vprocunhide start
    service util-vserver start
    service vservers-default start

    echo "Updating vserver defaults..."
    echo "none  /proc     proc    defaults        0 0" >/usr/share/util-vserver/defaults/fstab
    echo "none  /dev/pts  devpts  gid=5,mode=620  0 0" >>/usr/share/util-vserver/defaults/fstab

    if [ ! -e "/usr/etc/vservers/.defaults/apps/vunify/hash/root" ]; then
      mkdir -p /usr/etc/vservers/.defaults/apps/vunify/hash /vservers/.hash
      ln -s /vservers/.hash /usr/etc/vservers/.defaults/apps/vunify/hash/root
    fi
  fi

  echo "Installing vnstat..."
  cd /var/opt
  rm -rf vnstat*
  wget -q -U iCab http://${_USE_MIR}/dev/src/vnstat-${_VNSTAT_VRN}.tar.gz
  tar -xzf vnstat-${_VNSTAT_VRN}.tar.gz
  cd vnstat-${_VNSTAT_VRN}
  bash ./configure --prefix=/usr
  make --quiet
  make --quiet install
  for INF in `vnstat --iflist \
    | sed "s/Available interfaces//g; s/(1000 Mbit)//g; s/(100 Mbit)//g; s/ lo//g;" \
    | cut -d: -f2` ;do vnstat -i ${IP}NF;done
  cp -af /var/opt/vnstat-${_VNSTAT_VRN}/examples/init.d/debian/vnstat /etc/init.d/vnstat
  chmod 755 /etc/init.d/vnstat
  update-rc.d vnstat defaults
  if [ -e "/usr/etc/vnstat.conf" ]; then
    sed -i "s/^MaxBandwidth.*/MaxBandwidth 1000/g" /usr/etc/vnstat.conf
  fi
  if [ -e "/etc/vnstat.conf" ]; then
    sed -i "s/^MaxBandwidth.*/MaxBandwidth 1000/g" /etc/vnstat.conf
  fi
  service vnstat start
  killall vnstatd
  service vnstat restart

  if [ ! -e "/usr/local/sbin/vserver-autostart" ] \
    || [ "${thisMode}" = "UPGRADE" ]; then
    echo "Installing vserver-autostart..."
    rm -f /usr/local/sbin/vserver-autostart
    cd /usr/local/sbin/
    wget -q -U iCab http://${_USE_MIR}/cluster/vserver-autostart
    if [ -e "/usr/local/sbin/vserver-autostart" ]; then
      cd;chmod u+x /usr/local/sbin/vserver-autostart
    else
      echo "ERROR: /usr/local/sbin/vserver-autostart not available!"
    fi
  fi

  chmod 755 /vservers

  if [ "${thisMode}" = "UPGRADE" ]; then
    echo "Installing Postfix locally..."
    ${_INSTAPP} postfix
    lSmtp="localhost:25      inet  n       -       -       -       -       smtpd"
    sed -i "s/^smtp.*inet.*n.*smtpd/${lSmtp}/g" /etc/postfix/master.cf
    apt-get remove exim -y --purge --auto-remove -qq
    apt-get autoremove -y
    service postfix restart
  fi

  echo "Updating packages on this system..."
  apt_clean_update
  apt-get install aptitude ${_APT_XTR} \
    && aptitude full-upgrade -f -y -q \
      -o Dpkg::Options::=--force-confmiss \
      -o Dpkg::Options::=--force-confdef \
      -o Dpkg::Options::=--force-confnew \
    && apt-get dist-upgrade ${_APT_XTR}

  if_firewall_update

  echo
  echo "That's all. Enjoy!"
  echo
  exit 0
}

check_vsd() {
  _VSD_TEST=$(grep "cluster" /etc/init.d/vservers-default 2>&1)
  if [ -z "${_VSD_TEST}" ]; then
    echo "##" >> /etc/init.d/vservers-default
    echo "sleep 30" >> /etc/init.d/vservers-default
    echo "exec \"/usr/local/bin/cluster re-dbs\"" >> /etc/init.d/vservers-default
    echo "##" >> /etc/init.d/vservers-default
  fi
}

check_heads() {
  check_config_cluster
  check_vsd
  idn="${_CLUSTER_PREFIX}web"
  for i in `dir -d /vservers/*` ; do
    _THIS_VM=`echo $i | cut -d'/' -f3 | awk '{ print $1}'`
    _VS_NAME=`echo ${_THIS_VM} | cut -d'/' -f3 | awk '{ print $1}'`
    if [ -e "${i}${optBin}/boa" ]; then
      rm -f ${i}${optBin}/boa
    fi
    mkdir -p ${i}${optBin}
    curl ${crlGet} "${urlHmr}/${tBn}/boa" -o ${i}${optBin}/boa
    chmod 700 ${i}${optBin}/boa
    ls -la ${i}${optBin}/boa
    if [[ ${_THIS_VM} =~ v168q ]]; then
      echo Check Skipped for $i
    else
      if [ -e "/usr/run/vservers/${_THIS_VM}" ] \
        && [ -e "${i}/run/crond.pid" ]; then
        _VS_HOSTNAME=`vserver ${_VS_NAME} exec hostname 2>&1`
        _VS_OS=`vserver ${_VS_NAME} exec lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1`
        echo "The ${_VS_HOSTNAME} ${_VS_NAME} VM is running ${_VS_OS}"
        vserver ${_VS_NAME} exec ${optBin}/boa info ${mod} ${ext}
      fi
    fi
  done
}

restart_db_cluster() {
  check_config_cluster

  inc="0"
  for IP in "${_DB_NODE_IP[@]}"; do
    idn="${_CLUSTER_PREFIX}db${inc}"
    vserver ${idn} exec update-rc.d -f mysql remove
    if [ -e "/vservers/${idn}${optBin}/mycnfup" ]; then
      echo "Running mycnfup stop on ${idn}/${IP}..."
      ssh ${_NOSTRICT} root@${IP} "bash ${optBin}/mycnfup stop"
    else
      mkdir -p /vservers/${idn}/${optBin}
      curl ${crlGet} "${urlHmr}/${tBn}/mycnfup" -o /vservers/${idn}${optBin}/mycnfup
      ssh ${_NOSTRICT} root@${IP} "chmod 700 ${optBin}/mycnfup"
      echo "Running mycnfup stop on ${idn}/${IP}..."
      ssh ${_NOSTRICT} root@${IP} "bash ${optBin}/mycnfup stop"
    fi
    if [ "${IP}" = "${_DB_NODE_IP[1]}" ]; then
      sed -i "s/^safe_to_bootstrap.*/safe_to_bootstrap: 1/g"  /vservers/${idn}/var/lib/mysql/grastate.dat
    fi
    inc=$((inc+1))
    echo
    echo "Testing ${idn} status..."
    vserver-stat | grep ${idn}
    echo
  done

  echo "Waiting for ${_DB_NODE_IP[1]} DB node bootstrap-pxc..."
  echo "Running mycnfup init on ${_DB_NODE_IP[1]}..."
  ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "bash ${optBin}/mycnfup init"
  ssh ${_NOSTRICT} root@${_DB_NODE_IP[1]} "mysql -u root -e \"SHOW STATUS LIKE 'wsrep%';\""

  for IP in "${_DB_NODE_IP[@]}"; do
    if [ "${IP}" != "${_DB_NODE_IP[1]}" ]; then
	  echo "Running mycnfup start on ${IP}..."
      ssh ${_NOSTRICT} root@${IP} "bash ${optBin}/mycnfup start"
      ssh ${_NOSTRICT} root@${IP} "mysql -u root -e \"SHOW STATUS LIKE 'wsrep%';\""
    fi
  done
  echo "All DB nodes started in cluster mode!"
}

case "$1" in
  re-dbs)  cmd="$1"
           hst="$2"
           check_all
           restart_db_cluster
  ;;
  in-host) cmd="$1"
           hst="$2"
           check_all
           install_host
  ;;
  up-host) cmd="$1"
           mod="$2"
           check_all
           upgrade_host
  ;;
  in-vps)  cmd="$1"
           idn="$2"
           hst="$3"
           vip="$4"
           osx="$5"
           ver="$6"
           eml="$7"
           fce="$8"
           check_all
           install_vps
  ;;
  in-all)  cmd="$1"
           ver="$2"
           xer="$2"
           check_all
           install_db_cluster
           install_web_node
  ;;
  in-dbs)  cmd="$1"
           ver="$2"
           xer="$2"
           check_all
           install_db_cluster
  ;;
  in-web)  cmd="$1"
           ver="$2"
           xer="$2"
           check_all
           install_web_node
  ;;
  up-dbs)  cmd="$1"
           ver="$2"
           check_all
           upgrade_db_cluster
  ;;
  up-web)  cmd="$1"
           ver="$2"
           check_all
           upgrade_web_node
  ;;
  up-all)  cmd="$1"
           ver="$2"
           check_all
           upgrade_db_cluster
           upgrade_web_node
  ;;
  in-oct)  cmd="$1"
           email="$2"
           user="$3"
           mode="$4"
           copt="$5"
           csub="$6"
           ccor="$7"
           check_all
           install_octopus
  ;;
  in-pxy)  cmd="$1"
           idn="$2"
           vip="$3"
           fce="$4"
           check_all
           re_install_pxy
  ;;
  check)   cmd="$1"
           mod="$2"
           ext="$3"
           check_all
           check_heads
  ;;
  *)       echo
           echo "Usage: cluster {in-host} {fqdn}"
           echo "Usage: cluster {up-host} {update|upgrade}"
           echo "Usage: cluster {in-vps} {id} {fqdn} {ip} {os} {stable|head|galera} {email} {force}"
           echo "Usage: cluster {in-all} {stable|head}"
           echo "Usage: cluster {in-dbs} {stable|head}"
           echo "Usage: cluster {in-web} {stable|head}"
           echo "Usage: cluster {up-dbs} {stable|head}"
           echo "Usage: cluster {up-web} {stable|head}"
           echo "Usage: cluster {up-all} {stable|head}"
           echo "Usage: cluster {in-oct} {email} {o2} {mini|max|none} {stable|head}"
           echo "Usage: cluster {in-pxy} {id} {ip} force-reinstall"
           echo "Usage: cluster {check} {more|report} {backups|octopus}"
           echo
           exit 1
  ;;
esac

exit 0
