#!/bin/bash

export HOME=/root
export SHELL=/bin/bash
export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin

# Function to check if the script is run as root
_check_root() {
  if [ "$(whoami)" != "root" ]; then
    echo "ERROR: This script should be run as a root user"
    exit 1
  fi
}
_check_root

# Exit if the pause tasks maintenance config file exists
if [ -e "/root/.pause_tasks_maint.cnf" ]; then
  exit 0
fi

_maxEtime="300"
_cmndsList="apt-get apt"

# Function to kill long-running commands
_licence_to_kill() {
  if [[ "${1}" =~ "apt-get" ]]; then
    _killCmnd="apt-get update"
    _maxEtime="99"
  elif [[ "${1}" =~ "apt" ]]; then
    _killCmnd="apt update"
    _maxEtime="99"
  fi
  _aptTms=$(ps -eo uid,pid,etimes,cmd | grep -v "grep" | grep "${_killCmnd}" | egrep ' ([0-9]+-)?([0-9]{1}:?){3}' | awk '{print $3}')
  _aptPid=$(ps -eo uid,pid,etimes,cmd | grep -v "grep" | grep "${_killCmnd}" | egrep ' ([0-9]+-)?([0-9]{1}:?){3}' | awk '{print $2}')
  if [ ! -z "${_aptTms}" ] && [ "${_aptTms}" -gt "${_maxEtime}" ]; then
    echo "REASON _aptTms for ${_killCmnd} was ${_aptTms} on $(date 2>&1)" >> /root/.proc.forced.kill.exceptions.log
    kill -9 ${_aptPid}
  fi
}

# Remove auto-update file if it exists
[ -e "/var/lib/man-db/auto-update" ] && rm -f /var/lib/man-db/auto-update

# Loop through the commands list
for _frozenCmnd in ${_cmndsList}; do
  _licence_to_kill ${_frozenCmnd} # Fixed: pass the correct variable
done

exit 0
