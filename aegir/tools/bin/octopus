#!/bin/bash

export HOME=/root
export SHELL=/bin/bash
export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin

_TODAY=$(date +%y%m%d 2>&1)
export _TODAY=${_TODAY//[^0-9]/}

_NOW=$(date +%y%m%d-%H%M%S 2>&1)
export _NOW=${_NOW//[^0-9-]/}

_barCnf="/root/.barracuda.cnf"
_barName="BARRACUDA.sh.txt"
_bldPth="/opt/tmp/boa"
_crlGet="-L --max-redirs 3 -k -s --retry 3 --retry-delay 5 -A iCab"
_aptYesUnth="-y --allow-unauthenticated"
_filIncB="barracuda.sh.cnf"
_filIncO="octopus.sh.cnf"
_gCb="git clone --branch"
_octName="OCTOPUS.sh.txt"
_pthIncB="lib/settings/${_filIncB}"
_pthIncO="lib/settings/${_filIncO}"
_rgUrl="https://raw.githubusercontent.com/omega8cc/boa"
_vBs="/var/backups"

_CHECK_HOST=$(uname -n 2>&1)
_LOG_DIR="${_vBs}/reports/up/$(basename "$0")/${_TODAY}"
_VMFAMILY=XEN
_VM_TEST=$(uname -a 2>&1)
if [[ "${_VM_TEST}" =~ "-beng" ]]; then
  _VMFAMILY="VS"
fi

###
### Avoid too many questions
###
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi

_clean_pid_exit() {
  echo "REASON ${e} on $(date 2>&1)" >> /root/.octopus.exit.exceptions.log
  [ -e "/run/boa_wait.pid" ] && rm -f /run/boa_wait.pid
  [ -e "/run/boa_run.pid" ] && rm -f /run/boa_run.pid
  [ -e "/tmp/aegir_backup_mode.txt" ] && rm -f /tmp/aegir_backup_mode.txt
  service cron start &> /dev/null
  exit 1
}

_os_detection_minimal() {
  _APT_UPDATE="apt-get update"
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  _OS_LIST="daedalus chimaera beowulf buster bullseye bookworm"
  for e in ${_OS_LIST}; do
    if [ "${e}" = "${_OS_CODE}" ]; then
      _APT_UPDATE="apt-get update --allow-releaseinfo-change"
    fi
  done
}

_apt_clean_update() {
  #apt-get clean -qq 2> /dev/null
  #rm -rf /var/lib/apt/lists/* &> /dev/null
  ${_APT_UPDATE} -qq 2> /dev/null
}

_if_hosted_sys() {
  if [ -e "/root/.host8.cnf" ] \
    || [[ "${_CHECK_HOST}" =~ ".aegir.cc"($) ]]; then
    _hostedSys=YES
  else
    _hostedSys=NO
  fi
}

_check_sql_running() {
  while [ -z "${_IS_MYSQLD_RUNNING}" ] \
    || [ ! -e "/run/mysqld/mysqld.sock" ]; do
    _IS_MYSQLD_RUNNING=$(ps aux | grep '[m]ysqld' | awk '{print $2}' 2>&1)
    echo "INFO: Waiting for MySQLD availability..."
    sleep 3
  done
}

_check_sql_access() {
  if [ -e "/root/.my.pass.txt" ] && [ -e "/root/.my.cnf" ]; then
    _SQL_PSWD=$(cat /root/.my.pass.txt 2>&1)
    _SQL_PSWD=$(echo -n ${_SQL_PSWD} | tr -d "\n" 2>&1)
    _IS_SYNC_SQL_PSWD=$(grep "${_SQL_PSWD}" /root/.my.cnf 2>&1)
  else
    echo "ALERT: /root/.my.cnf or /root/.my.pass.txt not found."
    echo "ALERT: Please fix this before trying again, giving up."
    echo "Bye"
    echo " "
    _clean_pid_exit _check_sql_access_a
  fi
  if [ -z "${_IS_SYNC_SQL_PSWD}" ] \
    || [[ ! "${_IS_SYNC_SQL_PSWD}" =~ "password=${_SQL_PSWD}" ]]; then
    echo "ALERT: SQL password is out of sync between"
    echo "ALERT: /root/.my.cnf and /root/.my.pass.txt"
    echo "ALERT: Please fix this before trying again, giving up."
    echo "Bye"
    echo " "
    _clean_pid_exit _check_sql_access_b
  else
    _IS_MYSQLD_RUNNING=$(ps aux | grep '[m]ysqld' | awk '{print $2}' 2>&1)
    if [ -z "${_IS_MYSQLD_RUNNING}" ]; then
      echo "ALERT: SQL server on this system is not running at all."
      echo "ALERT: Please fix this before trying again, giving up."
      echo "Bye"
      echo " "
      _clean_pid_exit _check_sql_access_c
    else
      _MYSQL_CONN_TEST=$(mysql -u root -e "status" 2>&1)
      if [ -z "${_MYSQL_CONN_TEST}" ] \
        || [[ "${_MYSQL_CONN_TEST}" =~ "Access denied" ]]; then
        echo "ALERT: SQL password in /root/.my.cnf does not work."
        echo "ALERT: Please fix this before trying again, giving up."
        echo "Bye"
        echo " "
        _clean_pid_exit _check_sql_access_d
      fi
    fi
  fi
}

_fix_dns_settings() {
  mkdir -p ${_vBs}
  rm -f ${_vBs}/resolv.conf.tmp
  if [ -e "/etc/resolv.conf" ]; then
    if [ -L "/etc/resolv.conf" ]; then
      _rslvT=`readlink -n /etc/resolv.conf`
      if [ ! -e "${_rslvT}" ]; then
        rm -f /etc/resolv.conf
      fi
    fi
    if [ -e "/etc/resolv.conf" ]; then
      cp -a /etc/resolv.conf ${_vBs}/resolv.conf.tmp
    fi
  fi
  if [ ! -e "${_vBs}/resolv.conf.tmp" ]; then
    echo "nameserver 127.0.0.1" > ${_vBs}/resolv.conf.tmp
    echo "nameserver 1.1.1.1" >> ${_vBs}/resolv.conf.tmp
    echo "nameserver 1.0.0.1" >> ${_vBs}/resolv.conf.tmp
    echo "nameserver 8.8.8.8" >> ${_vBs}/resolv.conf.tmp
    echo "nameserver 8.8.4.4" >> ${_vBs}/resolv.conf.tmp
  fi
  if [ ! -e "${_vBs}/resolv.conf.vanilla" ] \
    && [ -e "${_vBs}/resolv.conf.tmp" ]; then
    if [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${_vBs}/resolv.conf.tmp /etc/resolv.conf
      cp -a ${_vBs}/resolv.conf.tmp ${_vBs}/resolv.conf.vanilla
    fi
  fi
  sed -i "/^$/d" ${_vBs}/resolv.conf.vanilla &> /dev/null
  if [ -e "${_vBs}/resolv.conf.vanilla" ]; then
    if [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${_vBs}/resolv.conf.vanilla /etc/resolv.conf
    fi
  else
    if [ -e "${_vBs}/resolv.conf.tmp" ] \
      && [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${_vBs}/resolv.conf.tmp /etc/resolv.conf
    fi
  fi
}

_check_dns_settings() {
  if [ -e "/root/.use.default.nameservers.cnf" ]; then
    _USE_DEFAULT_DNS=YES
  fi
  if [ -e "/root/.use.local.nameservers.cnf" ]; then
    _USE_PROVIDER_DNS=YES
  else
    _REMOTE_DNS_TEST=$(host files.aegir.cc 1.1.1.1 -w 10 2>&1)
  fi
  if [[ "${_REMOTE_DNS_TEST}" =~ "no servers could be reached" ]] \
    || [[ "${_REMOTE_DNS_TEST}" =~ "Host files.aegir.cc not found" ]] \
    || [ "${_USE_DEFAULT_DNS}" = "YES" ] \
    || [ "${_USE_PROVIDER_DNS}" = "YES" ]; then
    if [ "${_USE_DEFAULT_DNS}" = "YES" ] \
      || [ "${_USE_PROVIDER_DNS}" = "YES" ] \
      || [ ! -e "${_vBs}/resolv.conf.vanilla" ]; then
      _fix_dns_settings
      if [ -e "/etc/init.d/postfix" ]; then
        service postfix restart &> /dev/null
      fi
    fi
  fi
}

_send_report() {
  if [ -e "${_barCnf}" ]; then
    source ${_barCnf}
    _if_hosted_sys
    if [ "${_hostedSys}" = "YES" ]; then
      _MY_EMAIL="$(basename "$0")@omega8.cc"
    fi
    if [ ! -z "${_MY_EMAIL}" ]; then
      _repSub="Successful Octopus upgrade for ${_octUsr}"
      _repSub="REPORT: ${_repSub} on ${_CHECK_HOST}"
      _repSub=$(echo -n ${_repSub} | fmt -su -w 2500 2>&1)
      cat ${_UP_LOG} | s-nail -s "${_repSub} at ${_NOW}" ${_MY_EMAIL}
      echo "${_repSub} sent to ${_MY_EMAIL}"
    fi
  fi
}

_send_alert() {
  if [ -e "${_barCnf}" ]; then
    source ${_barCnf}
    _if_hosted_sys
    if [ "${_hostedSys}" = "YES" ]; then
      _MY_EMAIL="$(basename "$0")@omega8.cc"
    fi
    if [ ! -z "${_MY_EMAIL}" ]; then
      _repSub="ALERT: Failed Octopus upgrade for ${_octUsr} on ${_CHECK_HOST}"
      _repSub=$(echo -n ${_repSub} | fmt -su -w 2500 2>&1)
      cat ${_UP_LOG} | s-nail -s "${_repSub} at ${_NOW}" ${_MY_EMAIL}
      echo "${_repSub} sent to ${_MY_EMAIL}"
    fi
  fi
}

_check_report() {
  _SEND_ALERT=NO
  _RESULT_ALRT=$(grep "ALRT" ${_UP_LOG} 2>&1)
  _RESULT_FATAL=$(grep "FATAL ERROR" ${_UP_LOG} 2>&1)
  _RESULT_ALREADY=$(grep "This Aegir Instance is already up" ${_UP_LOG} 2>&1)
  _RESULT_BYE=$(grep "BYE" ${_UP_LOG} 2>&1)
  if [[ "${_RESULT_ALRT}" =~ "ALRT" ]] \
    || [[ "${_RESULT_ALRT}" =~ "binary file matches" ]]; then
    _SEND_ALERT=YES
  fi
  if [[ "${_RESULT_FATAL}" =~ "FATAL ERROR" ]] \
    || [[ "${_RESULT_FATAL}" =~ "binary file matches" ]]; then
    _SEND_ALERT=YES
  fi
  if [[ "${_RESULT_ALREADY}" =~ "This Aegir Instance is already up" ]] \
    || [[ "${_RESULT_ALREADY}" =~ "binary file matches" ]]; then
    _SEND_ALERT=NO
  fi
  if [[ "${_RESULT_BYE}" =~ "BYE" ]] \
    || [[ "${_RESULT_BYE}" =~ "binary file matches" ]]; then
    _SEND_ALERT=NO
  else
    _SEND_ALERT=YES
  fi
  if [ "${_SEND_ALERT}" = "YES" ]; then
    _send_alert
  else
    _send_report
  fi
}

_php_cli_local_ini_update() {
  _U_HD="${_usEr}/.drush"
  _U_TP="${_usEr}/.tmp"
  _U_II="${_U_HD}/php.ini"
  chattr -i -R ${_U_HD}/ &> /dev/null
  if [ ! -e "${_U_II}" ] \
    || [ ! -d "${_U_TP}" ]; then
    mkdir -p ${_U_TP}
    touch ${_U_TP}
    find ${_U_TP}/ -mtime +0 -exec rm -rf {} \; &> /dev/null
    mkdir -p ${_U_HD}
    chown ${_USER}:${_usrGroup} ${_U_TP}
    chown ${_USER}:${_usrGroup} ${_U_HD}
    chmod 755 ${_U_TP}
    chmod 755 ${_U_HD}
    chattr -i ${_U_II} &> /dev/null
    rm -f ${_U_HD}/.ctrl.php*
    rm -f ${_U_II}
    cp -af /opt/php74/lib/php.ini ${_U_II}
    if [ -e "${_U_II}" ]; then
      _INI="open_basedir = \".: \
        /data/all:           \
        /data/conf:          \
        /data/disk/all:      \
        /opt/php74:          \
        /dev/urandom:        \
        /opt/tmp/make_local: \
        /opt/tools/drush:    \
        ${_usEr}:             \
        /usr/local/bin:      \
        /usr/bin\""
      _INI=$(echo "${_INI}" | sed "s/ //g" 2>&1)
      _INI=$(echo "${_INI}" | sed "s/open_basedir=/open_basedir = /g" 2>&1)
      _INI=${_INI//\//\\\/}
      _QTP=${_U_TP//\//\\\/}
      sed -i "s/.*open_basedir =.*/${_INI}/g"                           ${_U_II}
      wait
      sed -i "s/.*error_reporting =.*/error_reporting = 1/g"            ${_U_II}
      wait
      sed -i "s/.*session.save_path.*/session.save_path = ${_QTP}/g"    ${_U_II}
      wait
      sed -i "s/.*soap.wsdl_cache.*/soap.wsdl_cache_dir = ${_QTP}/g"    ${_U_II}
      wait
      sed -i "s/.*sys_temp_dir =.*/sys_temp_dir = ${_QTP}/g"            ${_U_II}
      wait
      sed -i "s/.*upload_tmp_dir =.*/upload_tmp_dir = ${_QTP}/g"        ${_U_II}
    fi
  fi
}

_php_cli_drush_update() {
  _usrGroup=users
  _DRUSH_FILE="${_usEr}/tools/drush/drush.php"
  if [ -x "/opt/php74/bin/php" ]; then
    sed -i "s/^#\!\/.*/#\!\/opt\/php74\/bin\/php/g" ${_DRUSH_FILE} &> /dev/null
    _T_CLI=/opt/php74/bin
  fi
  if [ -x "${_T_CLI}/php" ]; then
    #_DRUSH_HOSTING_TASKS_CMD="/usr/bin/drush @hostmaster hosting-tasks --force"
    _DRUSH_HOSTING_DISPATCH_CMD="${_T_CLI}/php ${_usEr}/tools/drush/drush.php @hostmaster hosting-dispatch"
    if [ -e "${_usEr}/aegir.sh" ]; then
      rm -f ${_usEr}/aegir.sh
    fi
    touch ${_usEr}/aegir.sh
    echo -e \
      "#!/bin/bash\n\nPATH=.:${_T_CLI}:/usr/sbin:/usr/bin:/sbin:/bin\n \
       \n${_DRUSH_HOSTING_DISPATCH_CMD} \
       \ntouch ${_usEr}/${_USER}-task.done" \
      | fmt -su -w 2500 | tee -a ${_usEr}/aegir.sh >/dev/null 2>&1
    chown ${_USER}:${_usrGroup} ${_usEr}/aegir.sh &> /dev/null
    chmod 0700 ${_usEr}/aegir.sh &> /dev/null
  fi
}

_up_mode() {
  if [ "${_mCmd}" = "aegir" ]; then
    sed -i "s/^_HM_ONLY=NO/_HM_ONLY=YES/g"                   ${_octCnf}
    wait
    sed -i "s/^_HM_ONLY=NO/_HM_ONLY=YES/g"                   ${_vBs}/${_tocIncO}
    wait
    sed -i "s/^_PLATFORMS_ONLY=YES/_PLATFORMS_ONLY=NO/g"     ${_octCnf}
    wait
    sed -i "s/^_PLATFORMS_ONLY=YES/_PLATFORMS_ONLY=NO/g"     ${_vBs}/${_tocIncO}
    wait
    bash  ${_vBs}/${_tocName}
    touch ${_usEr}/log/up-${_TODAY}
  elif [ "${_mCmd}" = "platforms" ]; then
    sed -i "s/^_PLATFORMS_ONLY=NO/_PLATFORMS_ONLY=YES/g"     ${_octCnf}
    wait
    sed -i "s/^_PLATFORMS_ONLY=NO/_PLATFORMS_ONLY=YES/g"     ${_vBs}/${_tocIncO}
    wait
    sed -i "s/^_HM_ONLY=YES/_HM_ONLY=NO/g"                   ${_octCnf}
    wait
    sed -i "s/^_HM_ONLY=YES/_HM_ONLY=NO/g"                   ${_vBs}/${_tocIncO}
    wait
    bash  ${_vBs}/${_tocName}
    touch ${_usEr}/log/up-${_TODAY}
  elif [ "${_mCmd}" = "both" ] || [ "${_mCmd}" = "force" ]; then
    sed -i "s/^_HM_ONLY=YES/_HM_ONLY=NO/g"                   ${_octCnf}
    wait
    sed -i "s/^_HM_ONLY=YES/_HM_ONLY=NO/g"                   ${_vBs}/${_tocIncO}
    wait
    sed -i "s/^_PLATFORMS_ONLY=YES/_PLATFORMS_ONLY=NO/g"     ${_octCnf}
    wait
    sed -i "s/^_PLATFORMS_ONLY=YES/_PLATFORMS_ONLY=NO/g"     ${_vBs}/${_tocIncO}
    wait
    bash  ${_vBs}/${_tocName}
    touch ${_usEr}/log/up-${_TODAY}
  else
    sed -i "s/^_HM_ONLY=YES/_HM_ONLY=NO/g"                   ${_octCnf}
    wait
    sed -i "s/^_HM_ONLY=YES/_HM_ONLY=NO/g"                   ${_vBs}/${_tocIncO}
    wait
    sed -i "s/^_PLATFORMS_ONLY=YES/_PLATFORMS_ONLY=NO/g"     ${_octCnf}
    wait
    sed -i "s/^_PLATFORMS_ONLY=YES/_PLATFORMS_ONLY=NO/g"     ${_vBs}/${_tocIncO}
    wait
    bash  ${_vBs}/${_tocName}
    touch ${_usEr}/log/up-${_TODAY}
  fi
}

_satellite_check_strict_php_cli() {
  _PHP_CLI=$(grep "/opt/php" ${_usEr}/tools/drush/drush.php 2>&1)
  if [ "${_OS_CODE}" != "stretch" ] && [ "${_OS_CODE}" != "jessie" ]; then
    if [[ ! "${_PHP_CLI}" =~ php8[1-3] ]] && [[ ! "${_PHP_CLI}" =~ php74 ]]; then
      echo
      echo "NOTE: This Aegir version requires at least PHP 7.4 during upgrade."
      echo "NOTE: It will be reconfigured on the fly now, but you can change it"
      echo "NOTE: later for hosted sites management in ~/static/control/cli.info"
      echo
      _php_cli_drush_update
      _php_cli_local_ini_update
      for _version in 81 82 83 74; do
        if [ -x "/opt/php${_version}/bin/php" ]; then
          if [ "${_version}" = "74" ]; then
            _useCli="7.4"
          else
            _useCli="8.${_version:1}"
          fi
          break
        fi
      done
      if [ -n "${_useCli}" ]; then
        echo ${_useCli} > ${_usEr}/log/cli.txt
        echo ${_useCli} > ${_usEr}/static/control/cli.info
        chown -R ${_octUsr}.ftp:users ${_usEr}/static/control
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=${_useCli}/g" \
          /root/.${_octUsr}.octopus.cnf &> /dev/null
        echo "INFO: Your PHP-CLI has been switched to ${_useCli}"
        echo
      fi
    fi
  fi
}

_satellite_downgrade_protection() {
  _usEr="/data/disk/${_sCnd}"
  _octUsr="${_sCnd}"
  if [ -e "${_usEr}/log/octopus_log.txt" ] \
    && [ "${_cmNd}" = "up-lts" ]; then
    _SERIES_TEST=$(cat ${_usEr}/log/octopus_log.txt 2>&1)
    if [[ "${_SERIES_TEST}" =~ "Octopus ${_rLsn}-pro" ]]; then
      echo
      echo "ERROR: Your Octopus has been already upgraded to ${_rLsn}-pro"
      echo "You can not downgrade back to previous/older/lts BOA version"
      echo "Please use 'octopus up-pro ${_octUsr} force' to upgrade"
      echo "Bye"
      echo
      _clean_pid_exit _satellite_downgrade_protection_a
    elif [[ "${_SERIES_TEST}" =~ "Octopus ${_rLsn}-dev" ]]; then
      echo
      echo "ERROR: Your Octopus has been already upgraded to ${_rLsn}-dev"
      echo "You can not downgrade back to previous/older/lts BOA version"
      echo "Please use 'octopus up-dev ${_octUsr} force' to upgrade"
      echo "Bye"
      echo
      _clean_pid_exit _satellite_downgrade_protection_b
    fi
  fi
  if [ -e "${_usEr}/log/octopus_log.txt" ] \
    && [ "${_cmNd}" != "up-dev" ] \
    && [ "${_cmNd}" != "up-pro" ] \
    && [ "${_cmNd}" != "up-lts" ] \
    && [ "${_cmNd}" != "info" ] \
    && [ "${_cmNd}" != "help" ]; then
    _SERIES_TEST=$(cat ${_usEr}/log/octopus_log.txt 2>&1)
    _BOA_SERIES_TEST=$(cat /var/log/barracuda_log.txt 2>&1)
    if [[ "${_SERIES_TEST}" =~ "Octopus ${_rLsn}" ]] \
      || [[ "${_BOA_SERIES_TEST}" =~ "Barracuda ${_rLsn}" ]]; then
      echo
      echo "ERROR: Your system has been already upgraded to ${_rLsn}"
      echo "You can not downgrade back to previous/older BOA version"
      echo "Please use 'octopus up-lts/pro/dev ${_octUsr} force' to upgrade"
      echo "Display all supported commands with: $(basename "$0") help"
      echo "Bye"
      echo
      _clean_pid_exit _satellite_downgrade_protection_c
    fi
  fi
}

_satellite_check_supported_php_cli() {
  if [ "${_cmNd}" = "up-${_tRee}" ]; then
    _fMdy=
    _SERIES_TEST=
    _PHP_FPM_LEGACY_FREE=
    _PHP_CLI_LEGACY_FREE=
    _mCmd="${_oMcm}"
    if [ -e "${_usEr}/log/octopus_log.txt" ]; then
      _SERIES_TEST=$(cat ${_usEr}/log/octopus_log.txt 2>&1)
      if [[ "${_SERIES_TEST}" =~ "BOA-5." ]] \
        || [[ "${_SERIES_TEST}" =~ "BOA-4." ]]; then
        if [ -e "${_usEr}/static/control/cli.info" ]; then
          _T_CLI_VRN=$(cat ${_usEr}/static/control/cli.info 2>&1)
          _T_CLI_VRN=${_T_CLI_VRN//[^0-9.]/}
          _T_CLI_VRN=$(echo -n ${_T_CLI_VRN} | tr -d "\n" 2>&1)
          if [ "${_T_CLI_VRN}" = "8.3" ] \
            || [ "${_T_CLI_VRN}" = "8.2" ] \
            || [ "${_T_CLI_VRN}" = "8.1" ] \
            || [ "${_T_CLI_VRN}" = "7.4" ]; then
            _PHP_CLI_LEGACY_FREE=YES
          else
            _PHP_CLI_LEGACY_FREE=NO
          fi
        else
          _PHP_CLI_LEGACY_FREE=YES
        fi
        for _version in 81 82 83 74; do
          if [ -x "/opt/php${_version}/bin/php" ]; then
            if [ "${_version}" = "74" ]; then
              _useCli="7.4"
            else
              _useCli="8.${_version:1}"
            fi
            break
          fi
        done
        if [ "${_PHP_CLI_LEGACY_FREE}" = "NO" ]; then
          if [ -n "${_useCli}" ]; then
            echo ${_useCli} > ${_usEr}/static/control/cli.info
          fi
        fi
        chown -R ${_octUsr}.ftp:users ${_usEr}/static/control
      fi
      if [[ "${_SERIES_TEST}" =~ "${_rlsE}" ]]; then
        if [ "${_oMcm}" != "force" ]; then
          _mCmd=
          _fMdy=force
          if [ ! -e "/root/.silent-octopus-upgrade.cnf" ]; then
            echo
            echo "This Aegir Instance ${_octUsr} is already up to date!"
            echo "If you wish to run/force the upgrade again,"
            echo "please use the forced upgrade mode, as shown below"
            echo
            echo "Usage: $(basename "$0") ${_oRcm} ${_sCnd} force"
            echo
          fi
        fi
      fi
    fi
  fi
  _SERIES_TEST=
}

_up_one() {
  if [ -e "${_vBs}/${_octName}" ]; then
    if [ "${_cmNd}" = "up-dev" ] \
      || [ "${_cmNd}" = "up-pro" ] \
      || [ "${_cmNd}" = "up-lts" ]; then

      _satellite_check_supported_php_cli
      _satellite_check_strict_php_cli

      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${_bRnh}/g"      ${_vBs}/${_tocIncO}
      wait
      sed -i "s/^_AEGIR_VERSION.*/_AEGIR_VERSION=${_tRee}/g" ${_vBs}/${_tocIncO}
      wait
      sed -i "s/^_AEGIR_XTS_VRN.*/_AEGIR_XTS_VRN=${_tRee}/g" ${_vBs}/${_tocIncO}
      wait
      sed -i "s/^_X_VERSION=.*/_X_VERSION=${_rlsE}/g"        ${_vBs}/${_tocIncO}
      wait
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${_bRnh}/g"      ${_vBs}/${_tocIncO}
      wait
      sed -i "s/^_AUTOPILOT=NO/_AUTOPILOT=YES/g"             ${_vBs}/${_tocIncO}
      wait
      sed -i "s/^_DNS_SETUP_TEST=YES/_DNS_SETUP_TEST=NO/g"   ${_vBs}/${_tocIncO}
      wait
      sed -i "s/^_USER=o1/_USER=${_octUsr}/g"                  ${_vBs}/${_tocName}
      wait
      sed -i "s/^_STRONG_PASSW.*/_STRONG_PASSWORDS=YES/g"    ${_vBs}/${_tocIncO}
      wait
      sed -i "s/^_PLATFORMS_LIST.*/_PLATFORMS_LIST=none/g"   ${_vBs}/${_tocIncO}
      wait
      sed -i "s/^_PLATFORMS_LIST=.*/_PLATFORMS_LIST=none/g"           ${_octCnf}
      wait
      sed -i "s/^_AUTOPILOT=NO/_AUTOPILOT=YES/g"                      ${_octCnf}
      wait
      sed -i "s/^_DNS_SETUP_TEST=YES/_DNS_SETUP_TEST=NO/g"            ${_octCnf}
      wait
      sed -i "s/^_STRONG_PASSW.*/_STRONG_PASSWORDS=YES/g"             ${_octCnf}
      wait
    fi

    if [ -e "${_vBs}/${_tocName}" ]; then
      if [ -e "${_usEr}/.drush/sys/provision/http" ]; then
        _IS_OLD=$(find ${_usEr}/.drush/sys/provision/ \
          -maxdepth 1 -mindepth 1 -mtime +0 -type d | grep example)
      elif [ -e "${_usEr}/.drush/provision" ]; then
        _IS_OLD=$(find ${_usEr}/.drush/provision/ \
          -maxdepth 1 -mindepth 1 -mtime +0 -type d | grep example)
      fi
      if [ -e "${_usEr}/.drush/.ctrl.${_tRee}.${_xSrl}.pid" ]; then
        _IS_OLD=
      else
        _IS_OLD=OLD
      fi
      if [ -z "${_IS_OLD}" ] \
        && [ -z "${_mCmd}" ] \
        && [ -e "${_usEr}/.drush/sys/provision/http" ]; then
        if [ -z "${_fMdy}" ]; then
          echo
          echo "This Aegir Instance is already up to date!"
          echo "If you wish to run/force the upgrade again,"
          echo "please specify desired upgrade mode:"
          echo "aegir, platforms or both - as shown below"
          echo
          echo "Usage: $(basename "$0") ${_cmNd} ${_sCnd} {aegir|platforms|both}"
          echo
        fi
      else
        if [ -e "${_usEr}/.drush/sys/provision/http" ]; then
          _up_mode
        elif [ -e "${_usEr}/.drush/provision" ]; then
          _up_mode
        else
          echo "${_usEr}/.drush/sys/provision does not exist!"
          rm -rf ${_usEr}/.drush/{sys,xts,usr}
          rm -rf ${_usEr}/.drush/{provision,drush_make}
          mkdir -p ${_usEr}/.drush/{sys,xts,usr}
          ${_gCb} ${_bRnh} ${_gitHub}/provision.git \
            ${_usEr}/.drush/sys/provision &> /dev/null
          chown -R ${_octUsr}:users ${_usEr}/.drush/sys
          _up_mode
        fi
      fi
    else
      echo "${_vBs}/${_tocName} installer not available - try again"
      _clean_pid_exit _up_one_a
    fi
  fi
}

_count_cpu() {
  _CPU_INFO=$(grep -c processor /proc/cpuinfo 2>&1)
  _CPU_INFO=${_CPU_INFO//[^0-9]/}
  _NPROC_TEST=$(which nproc 2>&1)
  if [ -z "${_NPROC_TEST}" ]; then
    _CPU_NR="${_CPU_INFO}"
  else
    _CPU_NR=$(nproc 2>&1)
  fi
  _CPU_NR=${_CPU_NR//[^0-9]/}
  if [ ! -z "${_CPU_NR}" ] \
    && [ ! -z "${_CPU_INFO}" ] \
    && [ "${_CPU_NR}" -gt "${_CPU_INFO}" ] \
    && [ "${_CPU_INFO}" -gt "0" ]; then
    _CPU_NR="${_CPU_INFO}"
  fi
  if [ -z "${_CPU_NR}" ] || [ "${_CPU_NR}" -lt "1" ]; then
    _CPU_NR=1
  fi
}

_load_control() {
  [ -e "/root/.barracuda.cnf" ] && source /root/.barracuda.cnf
  export _CPU_MAX_RATIO=${_CPU_MAX_RATIO//[^0-9]/}
  : "${_CPU_MAX_RATIO:=2.5}"
  _O_LOAD=$(awk '{print $1*100}' /proc/loadavg 2>&1)
  _O_LOAD=$(( _O_LOAD / _CPU_NR ))
  _O_LOAD_MAX=$(( 100 * _CPU_MAX_RATIO ))
}

_up_action_all() {
  for _usEr in `find /data/disk/ -maxdepth 1 -mindepth 1 | sort`; do
    _count_cpu
    _load_control
    if [ -d "${_usEr}/config/server_master/nginx/vhost.d" ] \
      && [ -e "${_usEr}/log/cores.txt" ] \
      && [ ! -e "${_usEr}/log/CANCELLED" ]; then
      if [ "${_O_LOAD}" -lt "${_O_LOAD_MAX}" ]; then
        _octUsr=$(echo ${_usEr} | cut -d'/' -f4 | awk '{ print $1}')
        _tocName="${_octName}.${_octUsr}"
        _tocIncO="${_filIncO}.${_octUsr}"
        if [ -e "${_vBs}/${_octName}" ]; then
          cp -af ${_vBs}/${_octName} ${_vBs}/${_tocName}
        fi
        if [ -e "${_vBs}/${_filIncO}" ]; then
          cp -af ${_vBs}/${_filIncO} ${_vBs}/${_tocIncO}
        fi
        _octCnf="/root/.${_octUsr}.octopus.cnf"
        echo load is ${_O_LOAD} while maxload is ${_O_LOAD_MAX}
        echo Octopus upgrade for User ${_usEr}
        _n=$((RANDOM%9+2))
        echo Waiting ${_n} seconds...
        sleep ${_n}

        ### Enable debugging if requested
        if [ -e "/root/.debug-boa-installer.cnf" ] \
          || [ -e "/root/.debug-octopus-installer.cnf" ]; then
          sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g"       ${_vBs}/${_tocIncO}
          wait
          sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g"                ${_octCnf}
          wait
        fi

        if [ "${_outP}" = "log" ]; then
          _UP_LOG="${_LOG_DIR}/$(basename "$0")-up-${_octUsr}-${_NOW}.log"
          echo
          echo "Preparing the upgrade in silent mode..."
          echo
          echo "NOTE: There will be no progress displayed in the console"
          echo "but you will receive an email once the upgrade is complete"
          echo
          sleep ${_n}
          echo "You could watch the progress in another window with command:"
          echo "  tail -f ${_UP_LOG}"
          echo "or wait until you will see the line: OCTOPUS upgrade completed"
          echo
          echo "Starting the upgrade in silent mode now..."
          echo
          if [ -e "${_vBs}/${_octName}" ]; then
            sed -i "s/^_SPINNER=YES/_SPINNER=NO/g"           ${_vBs}/${_octName}
            wait
            sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"       ${_vBs}/${_tocIncO}
            wait
            sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"                ${_octCnf}
            wait
          fi
          _up_one >>${_UP_LOG} 2>&1
          _check_report
        else
          sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=NO/g"                   ${_octCnf}
          wait
          _up_one
        fi
        _n=$((RANDOM%9+2))
        echo "Waiting ${_n} seconds..."
        sleep ${_n}
        rm -f ${_vBs}/${_tocName}
        rm -f ${_vBs}/${_tocIncO}
        rm -rf ${_usEr}/.tmp/cache
        echo "Done for ${_usEr}"
      else
        echo "load is ${_O_LOAD} while maxload is ${_O_LOAD_MAX}"
        echo "...we have to wait..."
      fi
    fi
  done
}

_up_action_one() {
  _usEr="/data/disk/${_sCnd}"
  _count_cpu
  _load_control
  if [ -d "${_usEr}/config/server_master/nginx/vhost.d" ] \
    && [ -e "${_usEr}/log/cores.txt" ] \
    && [ ! -e "${_usEr}/log/CANCELLED" ]; then
    if [ "${_O_LOAD}" -lt "${_O_LOAD_MAX}" ]; then
      _octUsr="${_sCnd}"
      _tocName="${_octName}.${_octUsr}"
      _tocIncO="${_filIncO}.${_octUsr}"
      if [ -e "${_vBs}/${_octName}" ]; then
        cp -af ${_vBs}/${_octName} ${_vBs}/${_tocName}
      fi
      if [ -e "${_vBs}/${_filIncO}" ]; then
        cp -af ${_vBs}/${_filIncO} ${_vBs}/${_tocIncO}
      fi
      _octCnf="/root/.${_octUsr}.octopus.cnf"
      echo load is ${_O_LOAD} while maxload is ${_O_LOAD_MAX}
      echo Octopus upgrade for User ${_usEr}
      _n=$((RANDOM%9+2))

      ### Enable debugging if requested
      if [ -e "/root/.debug-boa-installer.cnf" ] \
        || [ -e "/root/.debug-octopus-installer.cnf" ]; then
        sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g"         ${_vBs}/${_tocIncO}
        wait
        sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g"                  ${_octCnf}
        wait
      fi

      if [ "${_outP}" = "log" ]; then
        _UP_LOG="${_LOG_DIR}/$(basename "$0")-up-${_octUsr}-${_NOW}.log"
        echo
        echo "Preparing the upgrade in silent mode..."
        echo
        echo "NOTE: There will be no progress displayed in the console"
        echo "but you will receive an email once the upgrade is complete"
        echo
        sleep ${_n}
        echo "You could watch the progress in another window with command:"
        echo "  tail -f ${_UP_LOG}"
        echo "or wait until you will see the line: OCTOPUS upgrade completed"
        echo
        echo "Starting the upgrade in silent mode now..."
        echo
        if [ -e "${_vBs}/${_octName}" ]; then
          sed -i "s/^_SPINNER=YES/_SPINNER=NO/g"             ${_vBs}/${_octName}
          wait
          sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"         ${_vBs}/${_tocIncO}
          wait
          sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"                  ${_octCnf}
          wait
        fi
        _up_one >>${_UP_LOG} 2>&1
        _check_report
      else
        sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=NO/g"                     ${_octCnf}
        wait
        _up_one
      fi
      sleep 3
      rm -f ${_vBs}/${_tocName}
      rm -f ${_vBs}/${_tocIncO}
      rm -rf ${_usEr}/.tmp/cache
      echo Done for ${_usEr}
    else
      echo load is ${_O_LOAD} while maxload is ${_O_LOAD_MAX}
      echo try again later
    fi
  fi
}

_up_start() {
  if [ -e "/run/boa_run.pid" ]; then
    echo
    echo "  Another BOA installer is running probably"
    echo "  because /run/boa_run.pid exists"
    echo
    exit 1
  elif [ -e "/run/boa_wait.pid" ]; then
    echo
    echo "  Some important system task is running probably"
    echo "  because /run/boa_wait.pid exists"
    echo
    exit 1
  else
    touch /run/boa_run.pid
    touch /run/boa_wait.pid
    touch /run/octopus_install_run.pid
    [ -e "/tmp/aegir_backup_mode.txt" ] && rm -f /tmp/aegir_backup_mode.txt
    mkdir -p ${_LOG_DIR}
    cd ${_vBs}
    rm -f ${_vBs}/OCTOPUS.sh*
    ## rm -f ${_vBs}/*.sh.cnf*
  fi
  if [ "${_mOde}" = "log" ]; then
    _outP="${_mOde}"
  fi
  if [ ! -z "${_mOde}" ] && [ "${_mOde}" != "log" ]; then
    _mCmd="${_mOde}"
    _oMcm="${_mCmd}"
  fi
  if [ -e "/opt/local/bin/php" ] || [ -e "/usr/local/bin/php" ]; then
    rm -f /opt/local/bin/php
    rm -f /usr/local/bin/php
  fi
  _oRcm="${_cmNd}"
}

_up_finish() {
  rm -f /root/BOA.sh*
  [ -e "/run/boa_run.pid" ] && rm -f /run/boa_run.pid
  [ -e "/run/boa_wait.pid" ] && rm -f /run/boa_wait.pid
  [ -e "/run/manage_ltd_users.pid" ] && rm -f /run/manage_ltd_users.pid
  [ -e "/run/manage_ruby_users.pid" ] && rm -f /run/manage_ruby_users.pid
  [ -e "/run/octopus_install_run.pid" ] && rm -f /run/octopus_install_run.pid
  [ -e "/tmp/aegir_backup_mode.txt" ] && rm -f /tmp/aegir_backup_mode.txt
  rm -f ${_vBs}/*.sh.cnf*
  rm -f ${_vBs}/OCTOPUS.sh*
  if [ -e "/opt/local/bin/php" ] || [ -e "/usr/local/bin/php" ]; then
    rm -f /opt/local/bin/php
    rm -f /usr/local/bin/php
  fi
  rm -rf /opt/tmp/*
  echo
  echo OCTOPUS upgrade completed
  echo Bye
  echo
  exit 0
}

_find_fast_mirror_early() {
  _isNetc=$(which netcat 2>&1)
  if [ ! -x "${_isNetc}" ] || [ -z "${_isNetc}" ]; then
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
    fi
    _apt_clean_update
    apt-get install netcat ${_aptYesUnth} 2> /dev/null
    apt-get install netcat-traditional ${_aptYesUnth} 2> /dev/null
    wait
  fi
  _ffMirr=$(which ffmirror 2>&1)
  if [ -x "${_ffMirr}" ]; then
    _ffList="/var/backups/boa-mirrors-2024-01.txt"
    mkdir -p /var/backups
    if [ ! -e "${_ffList}" ]; then
      echo "de.files.aegir.cc"  > ${_ffList}
      echo "ny.files.aegir.cc" >> ${_ffList}
      echo "sg.files.aegir.cc" >> ${_ffList}
    fi
    if [ -e "${_ffList}" ]; then
      _BROKEN_FFMIRR_TEST=$(grep "stuff" ${_ffMirr} 2>&1)
      if [[ "${_BROKEN_FFMIRR_TEST}" =~ "stuff" ]]; then
        _CHECK_MIRROR=$(bash ${_ffMirr} < ${_ffList} 2>&1)
        _USE_MIR="${_CHECK_MIRROR}"
        [[ "${_USE_MIR}" =~ "printf" ]] && _USE_MIR="files.aegir.cc"
      else
        _USE_MIR="files.aegir.cc"
      fi
    else
      _USE_MIR="files.aegir.cc"
    fi
  else
    _USE_MIR="files.aegir.cc"
  fi
  _urlDev="http://${_USE_MIR}/dev"
  _urlHmr="http://${_USE_MIR}/versions/${_tRee}/boa/aegir"
}

_if_reinstall_curl() {
  _CURL_VRN=8.10.1
  if ! command -v lsb_release &> /dev/null; then
    apt-get update -qq &> /dev/null
    apt-get install lsb-release -y -qq &> /dev/null
  fi
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  [ "${_OS_CODE}" = "jessie" ] && _CURL_VRN=7.71.1
  [ "${_OS_CODE}" = "stretch" ] && _CURL_VRN=8.2.1
  _isCurl=$(curl --version 2>&1)
  if [[ ! "${_isCurl}" =~ "OpenSSL" ]] || [ -z "${_isCurl}" ]; then
    echo "OOPS: cURL is broken! Re-installing.."
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
    fi
    echo "curl install" | dpkg --set-selections 2> /dev/null
    _apt_clean_update
    apt-get remove libssl1.0-dev -y --purge --auto-remove -qq 2> /dev/null
    apt-get autoremove -y 2> /dev/null
    apt-get install libssl-dev -y -qq 2> /dev/null
    apt-get install libc-client2007e libc-client2007e-dev -y -qq 2> /dev/null
    apt-get build-dep curl -y 2> /dev/null
    if [ ! -e "/var/aegir/drush" ]; then
      apt-get install curl --reinstall -y -qq 2> /dev/null
    fi
    if [ -e "/var/aegir/drush" ]; then
      echo "INFO: Installing curl from sources..."
      mkdir -p /var/opt
      rm -rf /var/opt/curl*
      cd /var/opt
      wget -q -U iCab http://files.aegir.cc/dev/src/curl-${_CURL_VRN}.tar.gz &> /dev/null
      tar -xzf curl-${_CURL_VRN}.tar.gz &> /dev/null
      if [ -e "/root/.install.modern.openssl.cnf" ] \
        && [ -x "/usr/local/ssl3/bin/openssl" ]; then
        _SSL_BINARY=/usr/local/ssl3/bin/openssl
      else
        _SSL_BINARY=/usr/local/ssl/bin/openssl
      fi
      if [ -e "/usr/local/ssl3/lib64/libssl.so.3" ]; then
        _SSL_PATH="/usr/local/ssl3"
        _SSL_LIB_PATH="${_SSL_PATH}/lib64"
      else
        _SSL_PATH="/usr/local/ssl"
        _SSL_LIB_PATH="${_SSL_PATH}/lib"
      fi
      _PKG_CONFIG_PATH="${_SSL_LIB_PATH}/pkgconfig"

      if [ -e "${_PKG_CONFIG_PATH}" ] \
        && [ -e "/var/opt/curl-${_CURL_VRN}" ]; then
        cd /var/opt/curl-${_CURL_VRN}
        LIBS="-ldl -lpthread" PKG_CONFIG_PATH="${_PKG_CONFIG_PATH}" ./configure \
          --with-openssl \
          --with-zlib=/usr \
          --prefix=/usr/local &> /dev/null
        make -j $(nproc) --quiet &> /dev/null
        make --quiet install &> /dev/null
        ldconfig 2> /dev/null
      fi
    fi
    if [ -f "/usr/local/bin/curl" ]; then
      _isCurl=$(/usr/local/bin/curl --version 2>&1)
      if [[ ! "${_isCurl}" =~ "OpenSSL" ]] || [ -z "${_isCurl}" ]; then
        echo "ERRR: curl is still broken, please install it and debug manually"
        _clean_pid_exit
      else
        echo "GOOD: /usr/local/bin/curl works"
      fi
    fi
  fi
}

_check_dns_curl() {
  if [ ! -f "/etc/resolv.conf" ]; then
    rm -f /etc/resolv.conf
    echo "nameserver 127.0.0.1" > /etc/resolv.conf
    if [ -e "${_vBs}/resolv.conf.vanilla" ]; then
      cat ${_vBs}/resolv.conf.vanilla >> /etc/resolv.conf
    fi
    echo "nameserver 1.1.1.1" >> /etc/resolv.conf
    echo "nameserver 1.0.0.1" >> /etc/resolv.conf
    echo "nameserver 8.8.8.8" >> /etc/resolv.conf
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf
    _check_dns_settings
  else
    _check_dns_settings
  fi
  if [ -x "/usr/sbin/unbound-control" ] \
    && [ -e "/etc/resolvconf/run/interface/lo.unbound" ]; then
    unbound-control reload &> /dev/null
  fi
  _find_fast_mirror_early
  _if_reinstall_curl
  _CURL_TEST=$(curl -L -k -s \
    --max-redirs 10 \
    --retry 3 \
    --retry-delay 10 \
    -I "http://${_USE_MIR}" 2> /dev/null)
  if [[ ! "${_CURL_TEST}" =~ "200 OK" ]]; then
    if [[ "${_CURL_TEST}" =~ "unknown option was passed in to libcurl" ]]; then
      echo "ERROR: cURL libs are out of sync! Re-installing again.."
      _if_reinstall_curl
    else
      echo "ERROR: ${_USE_MIR} is not available, please try later"
      _clean_pid_exit _check_dns_curl_a
    fi
  fi
}

_check_root_direct() {
  _U_TEST=DENY
  [ "${SUDO_USER}" ] && _U_TEST_SDO=${SUDO_USER} || _U_TEST_SDO=`whoami`
  _U_TEST_WHO=$(who am i | awk '{print $1}' 2>&1)
  _U_TEST_LNE=$(logname 2>&1)
  if [ "${_U_TEST_SDO}" = "root" ] || [ "${_U_TEST_LNE}" = "root" ]; then
    if [ -z "${_U_TEST_WHO}" ]; then
      _U_TEST=ALLOW
      ### normal for root scripts running from cron
    else
      if [ "${_U_TEST_WHO}" = "root" ]; then
        _U_TEST=ALLOW
      fi
    fi
  fi
  if [ "${_U_TEST}" = "DENY" ]; then
    echo
    echo "ERROR: This script must be run as root directly,"
    echo "ERROR: without sudo/su switch from regular system user"
    echo "ERROR: Please add and test your SSH (RSA) keys for root account"
    echo "ERROR: with direct access before trying again"
    echo
    echo "HINT:  You can always restrict access later, or"
    echo "       allow only SSH (RSA) keys for root with directive"
    echo "         PermitRootLogin prohibit-password"
    echo "       in the /etc/ssh/sshd_config file"
    echo "Bye"
    _clean_pid_exit _check_root_direct_a
  fi
}

_check_root_keys_pwd() {
  _S_TEST=$(grep "root:\*:" /etc/shadow 2>&1)
  _R_TEST=CHECK
  if [ -e "/root/.ssh/authorized_keys" ]; then
    _R_TEST=$(grep "ssh-rsa" /root/.ssh/authorized_keys 2>&1)
  fi
  if [[ ! "${_S_TEST}" =~ "root:" ]] \
    && [[ ! "${_R_TEST}" =~ "ssh-rsa" ]]; then
    echo
    echo "ERROR: BOA requires working SSH (RSA) keys for system root present"
    echo "ERROR: Please add and test your SSH (RSA) keys for root account"
    echo "ERROR: before trying again"
    echo
    echo "HINTS: Run this command on your local PC machine:"
    echo "HINTS:   ssh-keygen -b 4096 -t rsa -N '' -f ~/.ssh/id_rsa"
    echo "HINTS: Then copy the ~/.ssh/id_rsa.pub file from your PC"
    echo "HINTS: to ~/.ssh/authorized_keys file on the server"
    echo "HINTS: Make sure the key is not split into more than 1 line"
    echo "HINTS: Remember to run: chmod 600 ~/.ssh/authorized_keys"
    echo
    echo "Bye"
    echo
    _clean_pid_exit _check_root_keys_pwd_a
  fi
}

_check_root() {
  if [ `whoami` = "root" ]; then
    [ -e "/root/.barracuda.cnf" ] && source /root/.barracuda.cnf
    export _B_NICE=${_B_NICE//[^0-9]/}
    : "${_B_NICE:=10}"
    renice ${_B_NICE} -p $$ &> /dev/null
    ionice -c2 -n7 -p $$
  else
    echo "ERROR: This script should be run as a root user"
    _clean_pid_exit _check_root_a
  fi
  _DF_TEST=$(df -kTh / -l \
    | grep '/' \
    | sed 's/\%//g' \
    | awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "${_DF_TEST}" ] && [ "${_DF_TEST}" -gt "90" ]; then
    echo "ERROR: Your disk space is almost full !!! ${_DF_TEST}/100"
    echo "ERROR: We can not proceed until it is below 90/100"
    _clean_pid_exit _check_root_b
  fi
}

_check_no_systemd() {
  if [ -e "/lib/systemd/systemd" ]; then
    echo "ERROR: This script can not be used with systemd"
    echo "ERROR: Please run 'autoinit' first"
    _clean_pid_exit _check_no_systemd_a_octopus
  fi
}

_if_start_screen() {
  if [[ -n "$SSH_CONNECTION" || -n "$SSH_CLIENT" ]]; then
    # Check if the user is inside a screen session
    if [[ ! "${_ARGS}" =~ (^|[[:space:]])(info|help)([[:space:]]|$) ]]; then
      if [ -z "$STY" ]; then
        # If not in screen, start a new screen session with the same script
        echo "You are not inside a screen session. Starting screen..."
        sleep 5
        screen -S session_octopus bash -c "$0 ${_ARGS}"
        exit
      else
        # If already inside screen, continue the script
        echo "You are in a screen session now"
        sleep 3
      fi
    fi
  fi
}

_if_display_help() {
  if [ "${_cmNd}" = "help" ] || [ "${_cmNd}" = "info" ]; then
    echo
    echo "Usage: $(basename "$0") {version} {instance} {mode}"
    cat <<EOF

    Accepted keywords and values in every option:

    {version}
      up-lts <------- upgrade to Octopus LTS release (no license)
      up-pro <------- upgrade to Octopus PRO release (requires license)
      up-dev <------- upgrade to Octopus Cutting Edge (requires license)

    {instance}
      all <---------- upgrade all active Octopus instances in a batch
      o1 <----------- upgrade only listed Octopus instance (system name)

    {mode}
      aegir <-------- upgrade only Aegir Hostmaster
      platforms <---- upgrade only Aegir Platforms
      both <--------- upgrade both Aegir Hostmaster and Platforms
      force <-------- force upgrade of either specified instance or all

    See docs/UPGRADE.md for more details.

EOF
    _clean_pid_exit _cmNd_a
  fi
}

_up_proceed() {
  if [ -e "/root/.run-to-daedalus.cnf" ] \
    || [ -e "/root/.run-to-chimaera.cnf" ] \
    || [ -e "/root/.run-to-beowulf.cnf" ] \
    || [ "${_cmNd}" = "info" ] \
    || [ "${_cmNd}" = "help" ]; then
    _CHECK_SQL=NO
  elif [ "${_cmNd}" = "up-lts" ] \
    || [ "${_cmNd}" = "up-pro" ] \
    || [ "${_cmNd}" = "up-dev" ]; then
    _CHECK_SQL=YES
  else
    _CHECK_SQL=NO
  fi
  if [ "${_CHECK_SQL}" = "YES" ]; then
    _check_sql_running
    _check_sql_access
  fi
  if [ "${_cmNd}" = "up-dev" ]; then
    _tRee=dev
  elif [ "${_cmNd}" = "up-pro" ]; then
    _tRee=pro
  elif [ "${_cmNd}" = "up-lts" ]; then
    _tRee=lts
  elif [ "${_cmNd}" = "help" ] || [ "${_cmNd}" = "info" ]; then
    _tRee=pro
  else
    echo
    echo "Sorry, you are trying not supported command.."
    echo "Display supported commands with: $(basename "$0") help"
    echo
    _clean_pid_exit _up_proceed_a
  fi

  export _tRee="${_tRee}"
  export _rLsn="BOA-5.4.0"
  export _rlsE="${_rLsn}-${_tRee}"
  export _bRnh="5.x-${_tRee}"

  _satellite_downgrade_protection
  _up_start

  curl ${_crlGet} "${_rgUrl}/${_bRnh}/${_octName}"  -o ${_vBs}/${_octName}
  curl ${_crlGet} "${_rgUrl}/${_bRnh}/${_pthIncO}"  -o ${_vBs}/${_filIncO}

  if [ "${_sCnd}" = "all" ]; then
    _up_action_all
  else
    _up_action_one
  fi
  _up_finish
}

export _cmNd="$1"
export _sCnd="$2"
export _mOde="$3"
export _outP="$4"
export _ARGS="$@"

_if_display_help
_check_root_direct
_check_root_keys_pwd
_check_root
_check_no_systemd
_os_detection_minimal
_check_dns_curl
_if_start_screen
_up_proceed

exit 0
