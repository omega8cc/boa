#!/bin/bash

HOME=/root
SHELL=/bin/bash
PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin

export PATH=${PATH}
export SHELL=${SHELL}
export HOME=${HOME}

_NOW=$(date +%y%m%d-%H%M%S 2>&1)
_NOW=${_NOW//[^0-9-]/}
vBs="/var/backups"
_THIS_DB_PORT=3306
crlGet="-L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab"

# Remove dangerous stuff from the string.
sanitize_string() {
  echo "$1" | sed 's/[\\\/\^\?\>\`\#\"\{\(\&\|\*]//g; s/\(['"'"'\]\)//g'
}

#
# Find correct IP.
find_correct_ip() {
  if [ -e "/root/.found_correct_ipv4.cnf" ]; then
    _LOC_IP=$(cat /root/.found_correct_ipv4.cnf 2>&1)
    _LOC_IP=$(echo -n ${_LOC_IP} | tr -d "\n" 2>&1)
  else
    _LOC_IP=$(curl ${crlGet} https://api.ipify.org \
      | sed 's/[^0-9\.]//g' 2>&1)
    if [ -z "${_LOC_IP}" ]; then
      _LOC_IP=$(curl ${crlGet} http://ipv4.icanhazip.com \
        | sed 's/[^0-9\.]//g' 2>&1)
    fi
    if [ ! -z "${_LOC_IP}" ]; then
      echo ${_LOC_IP} > /root/.found_correct_ipv4.cnf
    fi
  fi
}

check_generate() {
  rm -f ${_L_SYS}
  if [ -e "${_L_SYS}" ]; then
    _ESC_PASS=$(cat ${_L_SYS} 2>&1)
  else
    echo "INFO: Expected file ${_L_SYS} does not exist"
    if [ "${_STRONG_PASSWORDS}" = "YES" ]; then
      _PWD_CHARS=64
    elif [ "${_STRONG_PASSWORDS}" = "NO" ]; then
      _PWD_CHARS=32
    else
      _STRONG_PASSWORDS=${_STRONG_PASSWORDS//[^0-9]/}
      if [ ! -z "${_STRONG_PASSWORDS}" ] \
        && [ "${_STRONG_PASSWORDS}" -gt "32" ]; then
        _PWD_CHARS="${_STRONG_PASSWORDS}"
      else
        _PWD_CHARS=32
      fi
      if [ ! -z "${_PWD_CHARS}" ] && [ "${_PWD_CHARS}" -gt "128" ]; then
        _PWD_CHARS=128
      fi
    fi
    if [ "${_STRONG_PASSWORDS}" = "YES" ] \
      || [ "${_PWD_CHARS}" -gt "32" ]; then
      echo "INFO: We will generate new random strong password (${_PWD_CHARS})"
      if [ -e "/root/.my.cluster_root_pwd.txt" ]; then
        _ESC_PASS="$(openssl rand -base64 64 2>&1)"
      else
        _RANDPASS_TEST=$(randpass -V 2>&1)
        if [[ "${_RANDPASS_TEST}" =~ "alnum" ]]; then
          _ESC_PASS=$(randpass "${_PWD_CHARS}" alnum 2>&1)
        else
          _ESC_PASS=$(shuf -zer -n64 {A..Z} {a..z} {0..9} % @ | tr -d '\0' 2>&1)
          _ESC_PASS=$(echo -n "${_ESC_PASS}" | tr -d "\n" 2>&1)
          _ESC_PASS=$(sanitize_string "${_ESC_PASS}" 2>&1)
        fi
      fi
      isPythonTwo=$(which python2 2>&1)
      isPythonThree=$(which python3 2>&1)
      _ESC_PASS=$(echo -n "${_ESC_PASS}" | tr -d "\n" 2>&1)
      if [ -x "${isPythonThree}" ]; then
        _ENC_PASS=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''${_ESC_PASS}'''))")
      elif [ -x "${isPythonTwo}" ]; then
        _ENC_PASS=$(python2 -c "import urllib; print urllib.quote('''${_ESC_PASS}''')")
      fi
      echo "${_ESC_PASS}" > ${_L_SYS}
    else
       echo "INFO: We will generate new random password using shuf tool"
      _ESC_PASS=$(shuf -zer -n64 {A..Z} {a..z} {0..9} % @ | tr -d '\0' 2>&1)
      _ESC_PASS=$(echo -n "${_ESC_PASS}" | tr -d "\n" 2>&1)
      _ESC_PASS=$(sanitize_string "${_ESC_PASS}" 2>&1)
      _ENC_PASS="${_ESC_PASS}"
      echo "${_ESC_PASS}" > ${_L_SYS}
      chmod 0600 ${_L_SYS}
    fi
  fi
  _LEN_PASS=$(echo ${#_ESC_PASS} 2>&1)
  if [ -z "${_ESC_PASS}" ] || [ "${_LEN_PASS}" -lt "9" ]; then
     echo "WARN: The random password=${_ESC_PASS} does not look good"
     echo "INFO: We will generate new random password using shuf tool"
    _ESC_PASS=$(shuf -zer -n64 {A..Z} {a..z} {0..9} % @ | tr -d '\0' 2>&1)
    _ESC_PASS=$(echo -n "${_ESC_PASS}" | tr -d "\n" 2>&1)
    _ESC_PASS=$(sanitize_string "${_ESC_PASS}" 2>&1)
    _ENC_PASS="${_ESC_PASS}"
    echo "${_ESC_PASS}" > ${_L_SYS}
    chmod 0600 ${_L_SYS}
  fi
}

do_syncpass() {
  _SQL_PSWD=$(cat /root/.my.pass.txt 2>&1)
  _SQL_PSWD=$(echo -n ${_SQL_PSWD} | tr -d "\n" 2>&1)
  if [ ! -z "${uname}" ]; then
    find_correct_ip
    prH="/var/aegir/.drush"
    if [ "${uname}" = "aegir" ] && [ -e "/var/aegir/backups" ]; then
      _L_SYS="/var/aegir/backups/system/.aegir_root.pass.txt"
      cp ${prH}/server_localhost.alias.drushrc.php \
        ${vBs}/server_localhost.alias.drushrc.php.${uname}-${_NOW} &> /dev/null
      cp ${prH}/server_master.alias.drushrc.php \
        ${vBs}/server_master.alias.drushrc.php.${uname}-${_NOW} &> /dev/null
      check_generate
      chown ${uname}:${uname} ${_L_SYS} &> /dev/null
      if [ ! -z "${_ESC_PASS}" ] && [ ! -z "${_ENC_PASS}" ]; then
        mysqladmin -u root flush-hosts &> /dev/null
        su -s /bin/bash - ${uname} -c "drush8 @hostmaster \
          sqlq \"UPDATE hosting_db_server \
          SET db_passwd='${_ESC_PASS}' \
          WHERE db_user='aegir_root'\"" &> /dev/null
        wait
        _ESC="*.*"
        _USE_DB_USER="aegir_root"
        _USE_AEGIR_HOST="$(uname -n 2>&1)"
        _USE_RESOLVEIP="${_LOC_IP}"
        [ -e "/root/.my.cluster_root_pwd.txt" ] && echo "SQL1 -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp -uroot"
        if [ -e "/root/.my.proxysql_adm_pwd.txt" ]; then
          _PROXYSQL_PASSWORD=$(cat /root/.my.proxysql_adm_pwd.txt 2>&1)
          _PROXYSQL_PASSWORD=$(echo -n ${_PROXYSQL_PASSWORD} | tr -d "\n" 2>&1)
          mysql -uadmin -p${_PROXYSQL_PASSWORD} -h127.0.0.1 -P6032 --protocol=tcp<<PROXYSQL
DELETE FROM mysql_users WHERE username='${_USE_DB_USER}';
DELETE FROM mysql_query_rules WHERE username='${_USE_DB_USER}';
INSERT INTO mysql_users (username,password,default_hostgroup) VALUES ('${_USE_DB_USER}','${_ESC_PASS}','10');
LOAD MYSQL USERS TO RUNTIME;
SAVE MYSQL USERS FROM RUNTIME;
SAVE MYSQL USERS TO DISK;
INSERT INTO mysql_query_rules (username,destination_hostgroup,active) VALUES ('${_USE_DB_USER}',10,1);
INSERT INTO mysql_query_rules (username,destination_hostgroup,active) VALUES ('${_USE_DB_USER}',11,1);
LOAD MYSQL QUERY RULES TO RUNTIME;
SAVE MYSQL QUERY RULES TO DISK;
PROXYSQL
        fi
        _C_SQL="mysql --silent -u root -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp --database=mysql -e"
        ${_C_SQL} "DROP USER '${_USE_DB_USER}'@'${_USE_AEGIR_HOST}';" &> /dev/null
        ${_C_SQL} "DROP USER '${_USE_DB_USER}'@'${_USE_RESOLVEIP}';" &> /dev/null
        ${_C_SQL} "DROP USER '${_USE_DB_USER}'@'localhost';" &> /dev/null
        ${_C_SQL} "DROP USER '${_USE_DB_USER}'@'127.0.0.1';" &> /dev/null
        ${_C_SQL} "DROP USER '${_USE_DB_USER}'@'%';" &> /dev/null
        mysql --silent -u root -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp -u root mysql<<EOFMYSQL
CREATE USER IF NOT EXISTS '${_USE_DB_USER}'@'localhost';
CREATE USER IF NOT EXISTS '${_USE_DB_USER}'@'%';
GRANT ALL ON ${_ESC} TO '${_USE_DB_USER}'@'localhost' WITH GRANT OPTION;
GRANT ALL ON ${_ESC} TO '${_USE_DB_USER}'@'%' WITH GRANT OPTION;
ALTER USER '${_USE_DB_USER}'@'localhost' IDENTIFIED BY '${_ESC_PASS}';
ALTER USER '${_USE_DB_USER}'@'%' IDENTIFIED BY '${_ESC_PASS}';
EOFMYSQL
        sed -i \
          "s/mysql:\/\/aegir_root:.*/mysql:\/\/aegir_root:${_ENC_PASS}@${_SQL_CONNECT}',/g" \
          ${prH}/server_*.alias.drushrc.php &> /dev/null
        wait
        mysqladmin -u root flush-privileges &> /dev/null
      else
        echo "ERROR: Auto-generated password for aegir_root system user"
        echo "ERROR: did not work as expected, please try again"
        exit 1
      fi
      echo "INFO: Fixed Aegir Master Instance system user=aegir_root"
      echo "INFO: New system password=${_ESC_PASS} encoded=${_ENC_PASS}"
      echo "BYE!"
    else
      if [ -e "/data/disk/${uname}" ]; then
        _L_SYS="/data/disk/${uname}/.${uname}.pass.txt"
        cp /data/disk/${uname}/.drush/server_localhost.alias.drushrc.php \
          ${vBs}/server_localhost.alias.drushrc.php.${uname}-${_NOW} &> /dev/null
        cp /data/disk/${uname}/.drush/server_master.alias.drushrc.php \
          ${vBs}/server_master.alias.drushrc.php.${uname}-${_NOW} &> /dev/null
        check_generate
        chown ${uname}:users ${_L_SYS} &> /dev/null
        if [ ! -z "${_ESC_PASS}" ] && [ ! -z "${_ENC_PASS}" ]; then
          if [ -e "/data/conf/${uname}_use_proxysql.txt" ]; then
            _SQL_CONNECT=127.0.0.1
            _THIS_DB_PORT=6033
            mysqladmin -u root -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp flush-hosts &> /dev/null
          else
            mysqladmin -u root flush-hosts &> /dev/null
          fi
          su -s /bin/bash - ${uname} -c "drush8 @hostmaster \
            sqlq \"UPDATE hosting_db_server SET db_passwd='${_ESC_PASS}' \
            WHERE db_user='${uname}'\"" &> /dev/null
          wait
          _ESC="*.*"
          _USE_DB_USER="${uname}"
          _USE_AEGIR_HOST="$(uname -n 2>&1)"
          _USE_RESOLVEIP="${_LOC_IP}"
          [ -e "/root/.my.cluster_root_pwd.txt" ] && echo "SQL2 -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp -uroot"
          if [ -e "/root/.my.proxysql_adm_pwd.txt" ]; then
            _PROXYSQL_PASSWORD=$(cat /root/.my.proxysql_adm_pwd.txt 2>&1)
            _PROXYSQL_PASSWORD=$(echo -n ${_PROXYSQL_PASSWORD} | tr -d "\n" 2>&1)
            mysql -uadmin -p${_PROXYSQL_PASSWORD} -h127.0.0.1 -P6032 --protocol=tcp<<PROXYSQL
DELETE FROM mysql_users WHERE username='${_USE_DB_USER}';
DELETE FROM mysql_query_rules WHERE username='${_USE_DB_USER}';
INSERT INTO mysql_users (username,password,default_hostgroup) VALUES ('${_USE_DB_USER}','${_ESC_PASS}','10');
LOAD MYSQL USERS TO RUNTIME;
SAVE MYSQL USERS FROM RUNTIME;
SAVE MYSQL USERS TO DISK;
INSERT INTO mysql_query_rules (username,destination_hostgroup,active) VALUES ('${_USE_DB_USER}',10,1);
INSERT INTO mysql_query_rules (username,destination_hostgroup,active) VALUES ('${_USE_DB_USER}',11,1);
LOAD MYSQL QUERY RULES TO RUNTIME;
SAVE MYSQL QUERY RULES TO DISK;
PROXYSQL
          fi
          _C_SQL="mysql --silent -u root -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp --database=mysql -e"
          ${_C_SQL} "DROP USER '${_USE_DB_USER}'@'${_USE_AEGIR_HOST}';" &> /dev/null
          ${_C_SQL} "DROP USER '${_USE_DB_USER}'@'${_USE_RESOLVEIP}';" &> /dev/null
          ${_C_SQL} "DROP USER '${_USE_DB_USER}'@'localhost';" &> /dev/null
          ${_C_SQL} "DROP USER '${_USE_DB_USER}'@'127.0.0.1';" &> /dev/null
          ${_C_SQL} "DROP USER '${_USE_DB_USER}'@'%';" &> /dev/null
          mysql --silent -u root -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp -u root mysql<<EOFMYSQL
CREATE USER IF NOT EXISTS '${_USE_DB_USER}'@'localhost';
CREATE USER IF NOT EXISTS '${_USE_DB_USER}'@'%';
GRANT ALL ON ${_ESC} TO '${_USE_DB_USER}'@'localhost' WITH GRANT OPTION;
GRANT ALL ON ${_ESC} TO '${_USE_DB_USER}'@'%' WITH GRANT OPTION;
ALTER USER '${_USE_DB_USER}'@'localhost' IDENTIFIED BY '${_ESC_PASS}';
ALTER USER '${_USE_DB_USER}'@'%' IDENTIFIED BY '${_ESC_PASS}';
EOFMYSQL
          sed -i \
            "s/mysql:\/\/${uname}:.*/mysql:\/\/${uname}:${_ENC_PASS}@${_SQL_CONNECT}',/g" \
            /data/disk/${uname}/.drush/server_*.alias.drushrc.php &> /dev/null
          wait
          if [ -e "/data/conf/${uname}_use_proxysql.txt" ]; then
            _SQL_CONNECT=127.0.0.1
            _THIS_DB_PORT=6033
            mysqladmin -u root -h${_SQL_CONNECT} -P${_THIS_DB_PORT} --protocol=tcp flush-privileges &> /dev/null
          else
            mysqladmin -u root flush-privileges &> /dev/null
          fi
        else
          echo "ERROR: Auto-generated password for ${uname} system user"
          echo "ERROR: did not work as expected, please try again"
          exit 1
        fi
        _L_SYS_PHP="/data/disk/${uname}/.${uname}.pass.php"
        echo "<?php" > ${_L_SYS_PHP}
        echo "\$oct_db_user = \"${uname}\";" >> ${_L_SYS_PHP}
        echo "\$oct_db_pass = \"${_ESC_PASS}\";" >> ${_L_SYS_PHP}
        echo "\$oct_db_host = \"${_THIS_DB_HOST}\";" >> ${_L_SYS_PHP}
        echo "\$oct_db_port = \"${_THIS_DB_PORT}\";" >> ${_L_SYS_PHP}
        echo "\$oct_db_dirs = \"/data/disk/${uname}/backups\";" >> ${_L_SYS_PHP}
        chown ${uname}:users ${_L_SYS_PHP}
        chmod 0600 ${_L_SYS_PHP}
        echo "INFO: Fixed Aegir Satellite Instance system user=${uname}"
        echo "INFO: New system password=${_ESC_PASS} encoded=${_ENC_PASS}"
        echo "INFO: With Satellite oct_db_host=${_THIS_DB_HOST}"
        echo "INFO: With Satellite oct_db_port=${_THIS_DB_PORT}"
        echo "BYE!"
      else
        echo "ERROR: You must specify the existing Aegir \
          instance username to fix"
        exit 1
      fi
    fi
    exit 0
  else
    echo "ERROR: You must specify the existing Aegir instance username to fix"
    exit 1
  fi
}

check_root() {
  if [ `whoami` = "root" ]; then
    chmod a+w /dev/null
    sed -i "s/.*173.231.133.190.*//g" /etc/hosts
    wait
    sed -i "s/^127.0.0.1.*/127.0.0.1 localhost/g" /etc/hosts
    wait
    sed -i "s/.*files.aegir.cc.*//g" /etc/hosts
    wait
    sed -i "s/.*github.*//g" /etc/hosts
    wait
    echo >>/etc/hosts
    sed -i "/^$/d" /etc/hosts
    wait
    if [ -e "/etc/init.d/postfix" ]; then
      service postfix restart &> /dev/null
    fi
    if [ -e "/root/.barracuda.cnf" ]; then
      source /root/.barracuda.cnf
      if [ "${_THIS_DB_HOST}" = "localhost" ] \
        || [ "${_THIS_DB_HOST}" = "FQDN" ]; then
        _SQL_CONNECT=localhost
      elif [ "${_THIS_DB_HOST}" = "127.0.0.1" ] \
        || [ "${_THIS_DB_HOST}" = "PROXYSQL" ]; then
        _SQL_CONNECT=127.0.0.1
      else
        _SQL_CONNECT="${_THIS_DB_HOST}"
      fi
      if [ "${_THIS_DB_HOST}" = "${_MY_OWNIP}" ]; then
        _SQL_CONNECT=localhost
      fi
    fi
  else
    echo "ERROR: This script should be ran as a root user"
    exit 1
  fi
}

case "$1" in
  fix) uname="$2"
       check_root
       do_syncpass
  ;;
  *)   echo "Usage: syncpass fix {aegir|o1}"
       exit 1
  ;;
esac
