#!/bin/bash

export HOME=/root
export SHELL=/bin/bash
export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin

_TODAY=$(date +%y%m%d 2>&1)
export _TODAY=${_TODAY//[^0-9]/}

_NOW=$(date +%y%m%d-%H%M%S 2>&1)
export _NOW=${_NOW//[^0-9-]/}

_barCnf="/root/.barracuda.cnf"
_barName="BARRACUDA.sh.txt"
_crlGet="-L --max-redirs 3 -k -s --retry 3 --retry-delay 5 -A iCab"
_aptYesUnth="-y --allow-unauthenticated"
_filIncB="barracuda.sh.cnf"
_filIncO="octopus.sh.cnf"
_octName="OCTOPUS.sh.txt"
_pthIncB="lib/settings/${_filIncB}"
_pthIncO="lib/settings/${_filIncO}"
_rgUrl="https://raw.github_usErcontent.com/omega8cc/boa"
_vBs="/var/backups"

_CHECK_HOST=$(uname -n 2>&1)
_LOG_DIR="${_vBs}/reports/in/$(basename "$0")/${_TODAY}"
_IN_BARRACUDA_LOG="${_LOG_DIR}/$(basename "$0")-in-barracuda-${_NOW}.log"
_IN_OCTOPUS_LOG="${_LOG_DIR}/$(basename "$0")-in-octopus-${_NOW}.log"
_VMFAMILY=XEN
_VM_TEST=$(uname -a 2>&1)
if [[ "${_VM_TEST}" =~ "-beng" ]]; then
  _VMFAMILY="VS"
fi
_INITINS="/usr/bin/apt-get -y --allow-unauthenticated install"

###
### Avoid too many questions
###
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi

_clean_pid_exit() {
  echo "REASON ${e} on $(date 2>&1)" >> /root/.boa.exit.exceptions.log
  [ -e "/run/boa_wait.pid" ] && rm -f /run/boa_wait.pid
  [ -e "/run/boa_run.pid" ] && rm -f /run/boa_run.pid
  service cron start &> /dev/null
  exit 1
}

_os_detection_minimal() {
  _APT_UPDATE="apt-get update"
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  _OS_LIST="daedalus chimaera beowulf buster bullseye bookworm"
  for e in ${_OS_LIST}; do
    if [ "${e}" = "${_OS_CODE}" ]; then
      _APT_UPDATE="apt-get update --allow-releaseinfo-change"
    fi
  done
}

_apt_clean_update() {
  #apt-get clean -qq 2> /dev/null
  #rm -rf /var/lib/apt/lists/* &> /dev/null
  ${_APT_UPDATE} -qq 2> /dev/null
}

_check_manufacturer_compatibility() {
  # Install dmidecode of not present
  if ! command -v dmidecode &> /dev/null; then
    /usr/bin/apt-get update &> /dev/null
    ${_INITINS} dmidecode &> /dev/null
  fi
  # Check if dmidecode is available
  _DMI_TEST=$(which dmidecode 2>&1)
  if [ -x "${_DMI_TEST}" ]; then
    _HOST_INFO=$(dmidecode -s system-manufacturer 2>&1)
  else
    _HOST_INFO="Unknown, dmidecode not available"
  fi
  # Check for Amazon EC2 in the system manufacturer field
  if dmidecode -s system-manufacturer | grep -i 'Amazon EC2' &> /dev/null; then
    _VMFAMILY="AWS"
    echo "Not supported environment detected: ${_HOST_INFO}"
    echo "Please check https://bit.ly/boa-caveats"
    echo "Bye!"
    _clean_pid_exit _check_manufacturer_compatibility_a
  elif [[ "${_HOST_INFO}" =~ "Unknown" ]] || [ -z "${_HOST_INFO}" ]; then
    echo "Mysterious environment: ${_HOST_INFO}"
    echo "Please check https://bit.ly/boa-caveats"
    echo "Bye!"
    _clean_pid_exit _check_manufacturer_compatibility_b
  fi
}

_check_no_systemd() {
  if [ -e "/lib/systemd/systemd" ]; then
    echo "ERROR: This script can not be used with systemd"
    echo "ERROR: Please run 'autoinit' first"
    _clean_pid_exit _check_no_systemd_a_boa
  fi
}

_if_hosted_sys() {
  if [ -e "/root/.host8.cnf" ] \
    || [[ "${_CHECK_HOST}" =~ ".aegir.cc"($) ]]; then
    _hostedSys=YES
  else
    _hostedSys=NO
  fi
}

_not_supported_virt() {
  echo
  echo "=== OOPS! ==="
  echo
  echo "You are running not supported virtualization system:"
  echo "  $1"
  echo
  echo "If you wish to try BOA on this system anyway,"
  echo "please create an empty control file:"
  echo "  /root/.allow.any.virt.cnf"
  echo
  echo "Please be aware that it may not work at all,"
  echo "or you can experience errors breaking BOA."
  echo
  echo "WARNING! BOA IS NOT DESIGNED TO RUN DIRECTLY ON A BARE METAL."
  echo "WARNING! IT IS VERY DANGEROUS AND THUS EXTREMELY BAD IDEA!"
  echo "WARNING! You are free to experiment but don't expect *ANY* support."
  echo
  echo "BOA is known to work well on:"
  echo
  echo " * Linux Containers (LXC)"
  echo " * Linux KVM guest"
  echo " * Microsoft Hyper-V"
  echo " * OpenVZ Containers"
  echo " * Parallels guest"
  echo " * VirtualBox guest"
  echo " * VMware ESXi guest (but excluding vCloud Air)"
  echo " * Xen guest fully virtualized (HVM)"
  echo " * Xen guest"
  echo " * Xen paravirtualized guest domain"
  echo
  echo "Bye"
  echo
  _clean_pid_exit _not_supported_virt_a
}

_check_virt() {
  _VIRT_TOOL=$(which virt-what 2> /dev/null)
  if [ -x "${_VIRT_TOOL}" ]; then
    _VIRT_TEST=$(virt-what 2> /dev/null)
    _VIRT_TEST=$(echo -n ${_VIRT_TEST} | fmt -su -w 2500 2>&1)
    if [ ! -e "/root/.allow.any.virt.cnf" ]; then
      if [ -e "/proc/self/status" ]; then
        _VS_GUEST_TEST=$(grep -E "VxID:[[:space:]]*[0-9]{2,}$" /proc/self/status 2> /dev/null)
        _VS_HOST_TEST=$(grep -E "VxID:[[:space:]]*0$" /proc/self/status 2> /dev/null)
      fi
      if [ ! -z "${_VS_HOST_TEST}" ] || [ ! -z "${_VS_GUEST_TEST}" ]; then
        if [ -z "${_VS_HOST_TEST}" ] && [ ! -z "${_VS_GUEST_TEST}" ]; then
          _VIRT_IS="Linux VServer guest"
        else
          if [ ! -z "${_VS_HOST_TEST}" ]; then
            _not_supported_virt "Linux VServer host"
          else
            _not_supported_virt "unknown / not a virtual machine"
          fi
        fi
      else
        if [ -z "${_VIRT_TEST}" ] || [ "${_VIRT_TEST}" = "0" ]; then
          _not_supported_virt "unknown / not a virtual machine"
        elif [[ "${_VIRT_TEST}" =~ "xen-dom0" ]]; then
          _not_supported_virt "Xen privileged domain"
        elif [[ "${_VIRT_TEST}" =~ "linux_vserver-host" ]]; then
          _not_supported_virt "Linux VServer host"
        else
          if [[ "${_VIRT_TEST}" =~ "xen xen-hvm" ]]; then
            _VIRT_TEST="xen-hvm"
          elif [[ "${_VIRT_TEST}" =~ "xen xen-domU" ]]; then
            _VIRT_TEST="xen-domU"
          elif [[ "${_VIRT_TEST}" =~ "virtualbox kvm" ]]; then
            _VIRT_TEST="virtualbox"
          elif [[ "${_VIRT_TEST}" =~ "hyperv qemu" ]]; then
            _VIRT_TEST="hyperv"
          elif [[ "${_VIRT_TEST}" =~ "kvm aws" ]]; then
            _VIRT_TEST="kvm"
          elif [[ "${_VIRT_TEST}" =~ "openvz lxc" ]]; then
            _VIRT_TEST="openvz"
          fi
          case "${_VIRT_TEST}" in
            hyperv)      _VIRT_IS="Microsoft Hyper-V" ;;
            kvm)         _VIRT_IS="Linux KVM guest" ;;
            lxc)         _VIRT_IS="Linux Containers (LXC)" ;;
            openvz)      _VIRT_IS="OpenVZ Containers" ;;
            parallels)   _VIRT_IS="Parallels guest" ;;
            virtualbox)  _VIRT_IS="VirtualBox guest" ;;
            vmware)      _VIRT_IS="VMware ESXi guest" ;;
            xen-domU)    _VIRT_IS="Xen paravirtualized guest domain" ;;
            xen-hvm)     _VIRT_IS="Xen guest fully virtualized (HVM)" ;;
            xen)         _VIRT_IS="Xen guest" ;;
            *)  _not_supported_virt "${_VIRT_TEST}"
            ;;
          esac
        fi
      fi
    else
      if [ -z "${_VIRT_TEST}" ] || [ "${_VIRT_TEST}" = "0" ]; then
        _VIRT_TEST="unknown / not a virtual machine"
      fi
    fi
  fi
}

_system_check_ready() {
  if [ ! -e "/etc/nginx" ] \
    || [ ! -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ] \
    || [ ! -e "/etc/mysql" ] \
    || [ ! -e "/var/lib/mysql" ]; then
    echo "ERROR: Please install complete BOA system before trying"
    echo "ERROR: to install additional Aegir / Octopus instances"
    echo "Bye"
    _clean_pid_exit _system_check_ready_a
  fi
}

_system_check_clean() {
  if [ -e "/etc/mysql" ]; then
    mv -f /etc/mysql /etc/mysql_pre
  fi
  if [ -e "/etc/nginx" ] \
    || [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ] \
    || [ -e "/etc/apache2" ] \
    || [ -e "/var/lib/mysql" ]; then
    echo "ERROR: BOA requires minimal supported OS with no services installed."
    echo
    echo "Please make sure you don't have MySQL nor Apache installed."
    echo "Here's the list of directories which shouldn't exist:"
    echo "/etc/nginx /etc/apache2 /etc/mysql /var/lib/mysql /var/aegir"
    if [ ! -e "/etc/nginx" ]; then
      echo
      echo "HINT: Try to run: 'apt-get purge mysql-common' and then try again."
      echo "HINT: You can also enforce installation with empty control file:"
      echo " touch /root/.force.reinstall.cnf -- and then try again."
      echo
    fi
    echo "Bye"
    _clean_pid_exit _system_check_clean_a
  fi
}

_ifnames_grub_check_sync() {
  _IS_IFACE=$(ip a 2>&1)
  _ADD_GRUB_CMD=""
  _GRUB_FILE="/etc/default/grub"

  if [ -e "${_GRUB_FILE}" ]; then
    if echo "${_IS_IFACE}" | grep -qE "eth[0-9]+"; then
      _USE_IFNAMES="CLASSIC"
      echo "GRUB: Classic ethX interface naming found."
    elif echo "${_IS_IFACE}" | grep -qE "(ens|enp|eno|wlp|wlo)[0-9]+:"; then
      _USE_IFNAMES="PREDICTABLE"
      echo "GRUB: Predictable (ensX, enpX, enoX, wlpX, wloX) interface naming found."
    else
      _USE_IFNAMES="DONTMODIFY"
      echo "GRUB: config exists, but no recognized network interface naming found."
    fi

    # Extract the current GRUB_CMDLINE_LINUX line
    _GRUB_CMDLINE_LINUX=$(grep -E "^GRUB_CMDLINE_LINUX=" "${_GRUB_FILE}")
    echo "GRUB: Current config is ${_GRUB_CMDLINE_LINUX}"

    # Initialize variables to check for existing options
    _SYS_NET_IFNAMES=$(echo "${_GRUB_CMDLINE_LINUX}" | grep -o "net.ifnames=[01]")
    _SYS_BIOSDEVNAME=$(echo "${_GRUB_CMDLINE_LINUX}" | grep -o "biosdevname=[01]")
    _SYS_MEMHP_STATE=$(echo "${_GRUB_CMDLINE_LINUX}" | grep -o "memhp_default_state=online")

    # Function to append option to _ADD_GRUB_CMD if not already present
    _append_grub_cmd_option() {
      local _option="$1"
      if [[ -z "${_ADD_GRUB_CMD}" ]]; then
        _ADD_GRUB_CMD="${_option}"
      else
        _ADD_GRUB_CMD="${_ADD_GRUB_CMD} ${_option}"
      fi
    }

    # Check and append options as necessary
    if [[ -z "${_SYS_MEMHP_STATE}" ]]; then
      _append_grub_cmd_option "memhp_default_state=online"
    fi

    if [[ "${_USE_IFNAMES}" == "CLASSIC" ]]; then
      if [[ "${_SYS_NET_IFNAMES}" != "net.ifnames=0" ]]; then
        _append_grub_cmd_option "net.ifnames=0"
      fi
      if [[ "${_SYS_BIOSDEVNAME}" != "biosdevname=0" ]]; then
        _append_grub_cmd_option "biosdevname=0"
      fi
    elif [[ "${_USE_IFNAMES}" == "PREDICTABLE" ]]; then
      if [[ "${_SYS_NET_IFNAMES}" != "net.ifnames=1" ]]; then
        _append_grub_cmd_option "net.ifnames=1"
      fi
      if [[ "${_SYS_BIOSDEVNAME}" != "biosdevname=1" ]]; then
        _append_grub_cmd_option "biosdevname=1"
      fi
    fi

    if [ -e "/root/.auto.config.ifnames.grub.cnf" ] && [ ! -e "/root/.ignore.ifnames.cnf" ]; then
      _NEW_GRUB=LIVE
    else
      _NEW_GRUB=DEMO
    fi

    if [[ -n "${_ADD_GRUB_CMD}" ]]; then
      # Backup the GRUB file
      cp "${_GRUB_FILE}" "${_GRUB_FILE}.bak"

      # Remove existing options from GRUB_CMDLINE_LINUX
      _NEW_GRUB_CMDLINE_LINUX=$(echo "${_GRUB_CMDLINE_LINUX}" | sed -E "s/(net.ifnames=[01]|biosdevname=[01]|memhp_default_state=online)//g")

      # Clean up _eXtr spaces and trailing spaces before the closing quote
      _NEW_GRUB_CMDLINE_LINUX=$(echo "${_NEW_GRUB_CMDLINE_LINUX}" | tr -s ' ' | sed -E 's/\s*"$/"/')

      # Extract current kernel parameters
      _CURRENT_CMDLINE=$(echo "${_NEW_GRUB_CMDLINE_LINUX}" | sed -E 's/^GRUB_CMDLINE_LINUX="(.*)"$/\1/')

      # Append new options
      _UPDATED_CMDLINE="${_CURRENT_CMDLINE} ${_ADD_GRUB_CMD}"
      _UPDATED_CMDLINE=$(echo "${_UPDATED_CMDLINE}" | sed 's/^ *//;s/ *$//')

      # Form the new GRUB_CMDLINE_LINUX line
      _NEW_GRUB_CMDLINE_LINUX="GRUB_CMDLINE_LINUX=\"${_UPDATED_CMDLINE}\""

      echo " "
      if [[ "${_NEW_GRUB}" == "LIVE" ]]; then
        # Update the GRUB file
        echo "GRUB: Update in the LIVE MODE"
        sed -i "s|^GRUB_CMDLINE_LINUX=.*|${_NEW_GRUB_CMDLINE_LINUX}|" "${_GRUB_FILE}"
        echo "GRUB_CMDLINE_LINUX has been updated with ${_UPDATED_CMDLINE}"
      elif [[ "${_NEW_GRUB}" == "DEMO" ]]; then
        # Demo info
        echo "GRUB: Update in the DEMO MODE"
        echo "GRUB_CMDLINE_LINUX would be updated with ${_UPDATED_CMDLINE}"
        echo " "
        echo "GRUB: Update in the LIVE MODE needs presence of control file:"
        echo "GRUB   /root/.auto.config.ifnames.grub.cnf"
        echo " "
        echo "GRUB: Ensure that the file /root/.ignore.ifnames.cnf does not exist."
        echo "GRUB: This requirement serves as a double-check to confirm"
        echo "GRUB: that you are aware of and agree to auto-update GRUB configuration."
        echo "GRUB: Incorrect GRUB settings can render your virtual machine unbootable"
        echo "GRUB: necessitating a rescue operation using a CD-ROM or ISO image."
        echo "GRUB: For this reason, running BOA directly on physical hardware (bare metal) is not supported"
        echo " "
        echo "GRUB: NEVER USE LIVE MODE IF YOU ARE NOT SURE IF YOU NEED IT"
      fi
      echo " "
    fi
  else
    echo "GRUB config does not exist."
  fi
}

_check_root_direct() {
  _U_TEST=DENY
  [ "${SUDO_USER}" ] && _U_TEST_SDO=${SUDO_USER} || _U_TEST_SDO=`whoami`
  _U_TEST_WHO=$(who am i | awk '{print $1}' 2>&1)
  _U_TEST_LNE=$(logname 2>&1)
  if [ "${_U_TEST_SDO}" = "root" ] || [ "${_U_TEST_LNE}" = "root" ]; then
    if [ -z "${_U_TEST_WHO}" ]; then
      _U_TEST=ALLOW
      ### normal for root scripts running from cron
    else
      if [ "${_U_TEST_WHO}" = "root" ]; then
        _U_TEST=ALLOW
      fi
    fi
  fi
  if [ "${_U_TEST}" = "DENY" ]; then
    echo
    echo "ERROR: This script must be run as root directly,"
    echo "ERROR: without sudo/su switch from regular system _usEr"
    echo "ERROR: Please add and test your SSH (RSA) keys for root account"
    echo "ERROR: with direct access before trying again"
    echo
    echo "HINT:  You can always restrict access later, or"
    echo "       allow only SSH (RSA) keys for root with directive"
    echo "         PermitRootLogin prohibit-password"
    echo "       in the /etc/ssh/sshd_config file"
    echo "Bye"
    _clean_pid_exit _check_root_direct_a
  fi
}

_check_root_keys_pwd() {
  _S_TEST=$(grep "root:\*:" /etc/shadow 2>&1)
  _R_TEST=CHECK
  if [ -e "/root/.ssh/authorized_keys" ]; then
    _R_TEST=$(grep "ssh-rsa" /root/.ssh/authorized_keys 2>&1)
  fi
  if [[ ! "${_S_TEST}" =~ "root:" ]] \
    && [[ ! "${_R_TEST}" =~ "ssh-rsa" ]]; then
    echo
    echo "ERROR: BOA requires working SSH (RSA) keys for system root present"
    echo "ERROR: Please add and test your SSH (RSA) keys for root account"
    echo "ERROR: before trying again"
    echo
    echo "HINTS: Run this command on your local PC machine:"
    echo "HINTS:   ssh-keygen -b 4096 -t rsa -N '' -f ~/.ssh/id_rsa"
    echo "HINTS: Then copy the ~/.ssh/id_rsa.pub file from your PC"
    echo "HINTS: to ~/.ssh/authorized_keys file on the server"
    echo "HINTS: Make sure the key is not split into more than 1 line"
    echo "HINTS: Remember to run: chmod 600 ~/.ssh/authorized_keys"
    echo
    echo "Bye"
    echo
    _clean_pid_exit _check_root_keys_pwd_a
  fi
}

_satellite_check_id() {
  _USER=$1
  _ID_EXISTS=$(getent passwd ${_USER} 2>&1)
  if [ -z "${_ID_EXISTS}" ]; then
    _DO_NOTHING=YES
  elif [[ "${_ID_EXISTS}" =~ "${_USER}" ]]; then
    echo "ERROR: ${_USER} _usErname is already taken"
    echo "Please choose different _usErname"
    _clean_pid_exit _satellite_check_id_a
  else
    echo "ERROR: ${_USER} _usErname check failed"
    echo "Please try different _usErname"
    _clean_pid_exit _satellite_check_id_b
  fi
  if [ "${_USER}" = "admin" ] \
    || [ "${_USER}" = "hostmaster" ] \
    || [ "${_USER}" = "barracuda" ] \
    || [ "${_USER}" = "octopus" ] \
    || [ "${_USER}" = "boa" ] \
    || [ "${_USER}" = "all" ]; then
    echo "ERROR: ${_USER} is a restricted _usErname, \
      please choose different _USER"
    _clean_pid_exit _satellite_check_id_c
  elif [[ "${_USER}" =~ "aegir" ]] \
    || [[ "${_USER}" =~ "drupal" ]] \
    || [[ "${_USER}" =~ "drush" ]] \
    || [[ "${_USER}" =~ "sites" ]] \
    || [[ "${_USER}" =~ "default" ]]; then
    echo "ERROR: ${_USER} includes restricted keyword, \
      please choose different _USER"
    _clean_pid_exit _satellite_check_id_d
  fi
  _REGEX="^[[:digit:]]"
  if [[ "${_USER}" =~ "${_REGEX}" ]]; then
    echo "ERROR: ${_USER} is a wrong _usErname, \
      it should start with a letter, not digit"
    _clean_pid_exit _satellite_check_id_e
  fi
}

_fix_dns_settings() {
  mkdir -p ${_vBs}
  rm -f ${_vBs}/resolv.conf.tmp
  if [ -e "/etc/resolv.conf" ]; then
    if [ -L "/etc/resolv.conf" ]; then
      rslvT=`readlink -n /etc/resolv.conf`
      if [ ! -e "${rslvT}" ]; then
        rm -f /etc/resolv.conf
      fi
    fi
    if [ -e "/etc/resolv.conf" ]; then
      cp -a /etc/resolv.conf ${_vBs}/resolv.conf.tmp
    fi
  fi
  if [ ! -e "${_vBs}/resolv.conf.tmp" ]; then
    echo "nameserver 127.0.0.1" > ${_vBs}/resolv.conf.tmp
    echo "nameserver 1.1.1.1" >> ${_vBs}/resolv.conf.tmp
    echo "nameserver 1.0.0.1" >> ${_vBs}/resolv.conf.tmp
    echo "nameserver 8.8.8.8" >> ${_vBs}/resolv.conf.tmp
    echo "nameserver 8.8.4.4" >> ${_vBs}/resolv.conf.tmp
  fi
  if [ ! -e "${_vBs}/resolv.conf.vanilla" ] \
    && [ -e "${_vBs}/resolv.conf.tmp" ]; then
    if [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${_vBs}/resolv.conf.tmp /etc/resolv.conf
      cp -a ${_vBs}/resolv.conf.tmp ${_vBs}/resolv.conf.vanilla
    fi
  fi
  sed -i "/^$/d" ${_vBs}/resolv.conf.vanilla &> /dev/null
  if [ -e "${_vBs}/resolv.conf.vanilla" ]; then
    if [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${_vBs}/resolv.conf.vanilla /etc/resolv.conf
    fi
  else
    if [ -e "${_vBs}/resolv.conf.tmp" ] \
      && [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${_vBs}/resolv.conf.tmp /etc/resolv.conf
    fi
  fi
}

_check_dns_settings() {
  if [ -e "/root/.use.default.nameservers.cnf" ]; then
    _USE_DEFAULT_DNS=YES
  fi
  if [ -e "/root/.use.local.nameservers.cnf" ]; then
    _USE_PROVIDER_DNS=YES
  else
    _REMOTE_DNS_TEST=$(host files.aegir.cc 1.1.1.1 -w 10 2>&1)
  fi
  if [[ "${_REMOTE_DNS_TEST}" =~ "no servers could be reached" ]] \
    || [[ "${_REMOTE_DNS_TEST}" =~ "Host files.aegir.cc not found" ]] \
    || [ "${_USE_DEFAULT_DNS}" = "YES" ] \
    || [ "${_USE_PROVIDER_DNS}" = "YES" ]; then
    if [ "${_USE_DEFAULT_DNS}" = "YES" ] \
      || [ "${_USE_PROVIDER_DNS}" = "YES" ] \
      || [ ! -e "${_vBs}/resolv.conf.vanilla" ]; then
      _fix_dns_settings
      if [ -e "/etc/init.d/postfix" ]; then
        service postfix restart &> /dev/null
      fi
    fi
  fi
}

_if_extended_report() {
  _EXTENDED=NO
  if [ -e "/root/.run-to-daedalus.cnf" ] \
    || [ -e "/root/.run-to-chimaera.cnf" ] \
    || [ -e "/root/.run-to-beowulf.cnf" ] \
    || [ -e "/root/.send-extended-report.cnf" ]; then
    _EXTENDED=YES
  fi
  if [ "${_EXTENDED}" = "YES" ]; then
    if [ -e "/root/.autodaedalus.log" ]; then
      cat /root/.autodaedalus.log >> ${_THIS_LOG}
    elif [ -e "/root/.autochimaera.log" ]; then
      cat /root/.autochimaera.log >> ${_THIS_LOG}
    elif [ -e "/root/.autobeowulf.log" ]; then
      cat /root/.autobeowulf.log >> ${_THIS_LOG}
    fi
    echo            >> ${_THIS_LOG}
    ls -ltcra /root >> ${_THIS_LOG}
    echo            >> ${_THIS_LOG}
    ps auxf         >> ${_THIS_LOG}
    echo            >> ${_THIS_LOG}
    aureport        >> ${_THIS_LOG}
    echo            >> ${_THIS_LOG}
    aa-status | grep loaded   >> ${_THIS_LOG}
    aa-status | grep enforce  >> ${_THIS_LOG}
    aa-status | grep complain >> ${_THIS_LOG}
    echo            >> ${_THIS_LOG}
    aa-unconfined   >> ${_THIS_LOG}
    echo            >> ${_THIS_LOG}
    /opt/local/bin/boa info full >> ${_THIS_LOG}
    echo            >> ${_THIS_LOG}
  fi
}

_send_report() {
  if [ -e "${_IN_BARRACUDA_LOG}" ]; then
    _THIS_LOG="${_IN_BARRACUDA_LOG}"
    _RS="Barracuda"
  elif [ -e "${_IN_OCTOPUS_LOG}" ]; then
    _THIS_LOG="${_IN_OCTOPUS_LOG}"
    _RS="Octopus"
  fi
  _MY_EMAIL="${_eMal}"
  _if_hosted_sys
  if [ "${_hostedSys}" = "YES" ]; then
    _MY_EMAIL="$(basename "$0")@omega8.cc"
  fi
  if [ ! -z "${_MY_EMAIL}" ]; then
    repSub="Successful ${_RS} installation"
    repSub="REPORT: ${repSub} on ${_CHECK_HOST}"
    repSub=$(echo -n ${repSub} | fmt -su -w 2500 2>&1)
    _if_extended_report
    cat ${_THIS_LOG} | s-nail -s "${repSub} at ${_NOW}" ${_MY_EMAIL}
    echo "${repSub} sent to ${_MY_EMAIL}"
  fi
}

_octopus_install() {
  if [ -e "${_vBs}/${_octName}" ]; then
    if [ -z "${_usEr}" ]; then
      _usEr="o1"
    else
      _usEr=${_usEr//[^a-zA-Z0-9-.]/}
      _usEr=$(echo -n ${_usEr} | tr A-Z a-z 2>&1)
    fi
    if [ "${_cmNd}" = "in-octopus" ] || [ "${_cmNd}" = "in-oct" ]; then
      _if_hosted_sys
      if [ "${_hostedSys}" != "YES" ]; then
        if [ -e "${_barCnf}" ]; then
          source ${_barCnf}
        fi
        if [ ! -z "${_MY_EMAIL}" ] && [ "${_MY_EMAIL}" = "${_eMal}" ]; then
          sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"root\"/g"      ${_vBs}/${_octName}
          wait
        else
          lml="${_MY_EMAIL}"
          if [ ! -z "${lml}" ]; then
            sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"${lml}\"/g"  ${_vBs}/${_octName}
            wait
          else
            sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"root\"/g"    ${_vBs}/${_octName}
            wait
          fi
        fi
      fi
      sed -i "s/^_SPINNER=YES/_SPINNER=NO/g"                 ${_vBs}/${_octName}
      wait
      if [ ! -z "${_pXyc}" ] && [ ! -z "${_pXyi}" ]; then
        sed -i "s/^_THIS_DB_PO.*/_THIS_DB_PORT=${_pXyc}/g"   ${_vBs}/${_octName}
        wait
        sed -i "s/^_THIS_DB_HO.*/_THIS_DB_HOST=${_pXyi}/g"   ${_vBs}/${_octName}
        wait
        sed -i "s/^_THIS_DB_PO.*/_THIS_DB_PORT=${_pXyc}/g"   ${_vBs}/${_filIncO}
        wait
        sed -i "s/^_THIS_DB_HO.*/_THIS_DB_HOST=${_pXyi}/g"   ${_vBs}/${_filIncO}
        wait
      fi
      if [ ! -z "${_cOpt}" ]; then
        sed -i "s/^_CLIENT_OPTI.*/_CLIENT_OPTION=${_cOpt}/g" ${_vBs}/${_octName}
        wait
      fi
      if [ ! -z "${_cSub}" ]; then
        sed -i "s/^_CLIENT_SUBS.*/_CLIENT_SUBSCR=${_cSub}/g" ${_vBs}/${_octName}
        wait
      fi
      if [ ! -z "${_cCor}" ]; then
        sed -i "s/^_CLIENT_COR.*/_CLIENT_CORES=${_cCor}/g"   ${_vBs}/${_octName}
        wait
      fi
    else
      sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"${_eMal}\"/g"      ${_vBs}/${_octName}
      wait
    fi
    sed -i "s/^_CLIENT_EMAI.*/_CLIENT_EMAIL=\"${_eMal}\"/g"  ${_vBs}/${_octName}
    wait
    sed -i "s/^_USER=.*/_USER=${_usEr}/g"                    ${_vBs}/${_octName}
    wait

    sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"               ${_vBs}/${_filIncO}
    wait
    sed -i "s/^_PLATFORMS_LIST=.*/_PLATFORMS_LIST=none/g"    ${_vBs}/${_filIncO}
    wait

    sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"               ${_vBs}/${_filIncO}
    wait
    sed -i "s/^_STRONG_PASS.*/_STRONG_PASSWORDS=YES/g"       ${_vBs}/${_filIncO}
    wait

    if [ "${_cmNd}" = "in-dev" ] \
      || [ "${_cmNd}" = "in-lts" ] \
      || [ "${_cmNd}" = "in-octopus" ] \
      || [ "${_cmNd}" = "in-oct" ] \
      || [ "${_cOpt}" = "dev" ] \
      || [ "${_cOpt}" = "lts" ]; then
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${_bRnh}/g"      ${_vBs}/${_filIncO}
      wait
      sed -i "s/^_AEGIR_VERSION.*/_AEGIR_VERSION=${_tRee}/g" ${_vBs}/${_filIncO}
      wait
      sed -i "s/^_AEGIR_XTS_VRN.*/_AEGIR_XTS_VRN=${_tRee}/g" ${_vBs}/${_filIncO}
      wait
      sed -i "s/^_X_VERSION=.*/_X_VERSION=${_rlsE}/g"        ${_vBs}/${_filIncO}
      wait
    else
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${_bRnh}/g"      ${_vBs}/${_filIncO}
      wait
      sed -i "s/^_AEGIR_VERSION.*/_AEGIR_VERSION=${_tRee}/g" ${_vBs}/${_filIncO}
      wait
      sed -i "s/^_AEGIR_XTS_VRN.*/_AEGIR_XTS_VRN=${_tRee}/g" ${_vBs}/${_filIncO}
      wait
      sed -i "s/^_X_VERSION=.*/_X_VERSION=${_rlsE}/g"        ${_vBs}/${_filIncO}
      wait
    fi

    if [ "${_cmNd}" = "in-dev" ] \
      || [ "${_cmNd}" = "in-lts" ] \
      || [ "${_cmNd}" = "in-octopus" ] \
      || [ "${_cmNd}" = "in-oct" ] \
      || [ "${_cOpt}" = "dev" ] \
      || [ "${_cOpt}" = "lts" ]; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${_bRnh}/g"      ${_vBs}/${_filIncO}
       wait
    else
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${_bRnh}/g"      ${_vBs}/${_filIncO}
      wait
    fi

    if [ ! -z "${_pXyc}" ] && [ ! -z "${_pXyi}" ]; then
      if [ -e "/data/conf/global.inc" ]; then
        echo "ProxySQL" > /data/conf/${_usEr}_use_proxysql.txt
      fi
    fi

    if [ "${_outP}" = "logged" ]; then
      _n=$((RANDOM%9+2))
      echo
      echo "Preparing to install Octopus in almost silent _mOde..."
      echo
      echo "NOTE: There will be no progress displayed in this console"
      echo "but you will receive an _eMal once the installation is complete"
      echo
      sleep ${_n}
      echo "Please watch the progress in another console window with command:"
      echo "  tail -f ${_IN_OCTOPUS_LOG}"
      echo "or wait until you will see the line: BOA ${_cmNd} completed, Bye"
      echo
      sleep ${_n}
      echo "Starting now..."
      echo
      sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"             ${_vBs}/${_octName}
      wait
      sed -i "s/^_SPINNER=YES/_SPINNER=NO/g"                 ${_vBs}/${_octName}
      wait
    fi

    if [ "${_cmNd}" = "in-octopus" ] \
      || [ "${_cmNd}" = "in-oct" ]; then
      if [ -x "/opt/php83/bin/php" ]; then
        _USE_PHP=8.3
      elif [ -x "/opt/php82/bin/php" ]; then
        _USE_PHP=8.2
      elif [ -x "/opt/php81/bin/php" ]; then
        _USE_PHP=8.1
      elif [ -x "/opt/php74/bin/php" ]; then
        _USE_PHP=7.4
      fi
      sed -i "s/^_PHP_FPM.*/_PHP_FPM_VERSION=${_USE_PHP}/g"  ${_vBs}/${_filIncO}
      wait
      sed -i "s/^_PHP_CLI.*/_PHP_CLI_VERSION=${_USE_PHP}/g"  ${_vBs}/${_filIncO}
      wait
    fi

    if [ -e "${_vBs}/${_octName}" ]; then
      if [ "${_outP}" = "logged" ] || [ "${_outP}" = "onlylogged" ]; then
        bash ${_vBs}/${_octName} >${_IN_OCTOPUS_LOG} 2>&1
      else
        bash ${_vBs}/${_octName}
      fi
      wait
    fi

    if [ ! -z "${_pXyc}" ] && [ ! -z "${_pXyi}" ]; then
      if [ -e "/data/disk/${_usEr}/log/octopus_log.txt" ]; then
        echo "ProxySQL" > /data/disk/${_usEr}/log/use_proxysql.txt
        echo "ProxySQL" > /data/conf/clstr.cnf
      fi
    fi

    sed -i "s/^127.0.1.1.*//g" /etc/hosts
    wait
    sed -i "/^$/d" /etc/hosts
    wait
  else
    echo "${_octName} installer not available - try again"
    _clean_pid_exit _octopus_install_a
  fi
}

_barracuda_install() {
  if [ -e "${_vBs}/${_barName}" ]; then

    sed -i "s/^127.0.1.1.*//g" /etc/hosts

    sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"${_eMal}\"/g"        ${_vBs}/${_filIncB}
    wait
    sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"               ${_vBs}/${_filIncB}
    wait

    if [ "${_kiNd}" = "local" ]; then
      echo "127.0.1.1 aegir.local o1.sub.aegir.local \
        o2.sub.aegir.local o3.sub.aegir.local" >> /etc/hosts
      sed -i "s/^_EASY_SETUP=.*/_EASY_SETUP=LOCAL/g"         ${_vBs}/${_filIncB}
      wait
    elif [ "${_kiNd}" = "public" ] && [ ! -z "${_fQdn}" ]; then
      sed -i "s/^_EASY_SETUP=.*/_EASY_SETUP=PUBLIC/g"        ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_EASY_HOSTNAME.*/_EASY_HOSTNAME=${_fQdn}/g" ${_vBs}/${_filIncB}
      wait
    else
      sed -i "s/^_EASY_SETUP=.*/_EASY_SETUP=PUBLIC/g"        ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_EASY_HOSTNAME.*/_EASY_HOSTNAME=${_fQdn}/g" ${_vBs}/${_filIncB}
      wait
    fi

    if [ -n "${_eXtr}" ] \
      && [ -e "${_vBs}/${_filIncB}" ] \
      && [ -e "${_vBs}/${_filIncO}" ]; then
      if [ -n "${_eXtr}" ]; then
        if [ "${_eXtr}" = "php-83" ] || [ "${_eXtr}" = "php-8.3" ]; then
          pI=8.3
        elif [ "${_eXtr}" = "php-82" ] || [ "${_eXtr}" = "php-8.2" ]; then
          pI=8.2
        elif [ "${_eXtr}" = "php-81" ] || [ "${_eXtr}" = "php-8.1" ]; then
          pI=8.1
        elif [ "${_eXtr}" = "php-74" ] || [ "${_eXtr}" = "php-7.4" ]; then
          pI=7.4
        fi
        if [ -n "${pI}" ]; then
          sed -i "s/^_PHP_SIN.*/_PHP_SINGLE_INSTALL=${pI}/g" ${_vBs}/${_filIncB}
          wait
          sed -i "s/^_PHP_MUL.*/_PHP_MULTI_INSTALL=${pI}/g"  ${_vBs}/${_filIncB}
          wait
          sed -i "s/^_PHP_FPM_V.*/_PHP_FPM_VERSION=${pI}/g"  ${_vBs}/${_filIncB}
          wait
          sed -i "s/^_PHP_CLI_V.*/_PHP_CLI_VERSION=${pI}/g"  ${_vBs}/${_filIncB}
          wait
          sed -i "s/^_PHP_FPM_V.*/_PHP_FPM_VERSION=${pI}/g"  ${_vBs}/${_filIncO}
          wait
          sed -i "s/^_PHP_CLI_V.*/_PHP_CLI_VERSION=${pI}/g"  ${_vBs}/${_filIncO}
          wait
        fi
      elif [ "${_eXtr}" = "php-all" ] \
        || [ "${_eXtr}" = "php-min" ] \
        || [ "${_eXtr}" = "php-max" ]; then
        sed -i "s/^_PHP_SINGLE_.*/_PHP_SINGLE_INSTALL=/g"    ${_vBs}/${_filIncB}
        if [ "${_eXtr}" = "php-max" ]; then
          pA="5.6 7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2 8.3"
        else
          pA="7.4 8.1 8.2 8.3"
        fi
        pI=8.3
        sed -i "s/^_PHP_MU.*/_PHP_MULTI_INSTALL=\"${pA}\"/g" ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_PHP_FPM_VER.*/_PHP_FPM_VERSION=${pI}/g"  ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_PHP_CLI_VER.*/_PHP_CLI_VERSION=${pI}/g"  ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_PHP_FPM_VER.*/_PHP_FPM_VERSION=${pI}/g"  ${_vBs}/${_filIncO}
        wait
        sed -i "s/^_PHP_CLI_VER.*/_PHP_CLI_VERSION=${pI}/g"  ${_vBs}/${_filIncO}
        wait
      elif [ "${_eXtr}" = "nodns" ]; then
        sed -i "s/^_SMTP_RELAY_TES.*/_SMTP_RELAY_TEST=NO/g"  ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_DNS_SETUP_TES.*/_DNS_SETUP_TEST=NO/g"    ${_vBs}/${_filIncB}
        wait
        sed -i "s/^_DNS_SETUP_TES.*/_DNS_SETUP_TEST=NO/g"    ${_vBs}/${_filIncO}
        wait
      elif [[ "${_eXtr}" =~ "percona" ]]; then
        if [ "${_eXtr}" = "percona-8.4" ]; then
          sed -i "s/^_DB_SERIES=.*/_DB_SERIES=8.4/g"         ${_vBs}/${_filIncB}
        elif [ "${_eXtr}" = "percona-8.3" ]; then
          sed -i "s/^_DB_SERIES=.*/_DB_SERIES=8.3/g"         ${_vBs}/${_filIncB}
        elif [ "${_eXtr}" = "percona-8.0" ]; then
          sed -i "s/^_DB_SERIES=.*/_DB_SERIES=8.0/g"         ${_vBs}/${_filIncB}
        elif [ "${_eXtr}" = "percona-5.7" ]; then
          sed -i "s/^_DB_SERIES=.*/_DB_SERIES=5.7/g"         ${_vBs}/${_filIncB}
        else
          sed -i "s/^_DB_SERIES=.*/_DB_SERIES=5.7/g"         ${_vBs}/${_filIncB}
        fi
        wait
      else
        sed -i "s/^_NEWRELIC.*/_NEWRELIC_KEY=\"${_eXtr}\"/g" ${_vBs}/${_filIncB}
        wait
      fi
    fi

    if [ "${_cmNd}" = "in-dev" ] \
      || [ "${_cmNd}" = "in-lts" ] \
      || [ "${_cmNd}" = "in-octopus" ] \
      || [ "${_cmNd}" = "in-oct" ]; then
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${_bRnh}/g"      ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_AEGIR_VERSI.*/_AEGIR_VERSION=${_tRee}/g"   ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_AEGIR_XTS_V.*/_AEGIR_XTS_VRN=${_tRee}/g"   ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_X_VERSION=.*/_X_VERSION=${_rlsE}/g"        ${_vBs}/${_filIncB}
      wait
    else
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${_bRnh}/g"      ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_AEGIR_VERSI.*/_AEGIR_VERSION=${_tRee}/g"   ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_AEGIR_XTS_V.*/_AEGIR_XTS_VRN=${_tRee}/g"   ${_vBs}/${_filIncB}
      wait
      sed -i "s/^_X_VERSION=.*/_X_VERSION=${_rlsE}/g"        ${_vBs}/${_filIncB}
      wait
    fi

    if [ "${_cmNd}" = "in-dev" ] \
      || [ "${_cmNd}" = "in-lts" ] \
      || [ "${_cmNd}" = "in-octopus" ] \
      || [ "${_cmNd}" = "in-oct" ]; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${_bRnh}/g"      ${_vBs}/${_filIncB}
      wait
    else
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${_bRnh}/g"      ${_vBs}/${_filIncB}
      wait
    fi

    if [ "${_outP}" = "logged" ]; then
      _n=$((RANDOM%9+2))
      echo
      if [ "${_sYst}" = "bundle" ]; then
        echo "Preparing to install Barracuda and Octopus in almost silent _mOde..."
      else
        echo "Preparing to install only Barracuda in almost silent _mOde..."
      fi
      echo
      echo "NOTE: There will be no progress displayed in this console"
      echo "but you will receive an _eMal once the installation is complete"
      echo
      sleep ${_n}
      echo "Please watch the progress in another console window with command:"
      echo "  tail -f ${_IN_BARRACUDA_LOG}"
      echo "or wait until you will see the line: BOA ${_cmNd} completed, Bye"
      echo
      sleep ${_n}
      echo "Starting now..."
      echo
      sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"               ${_vBs}/${_barName}
      wait
      sed -i "s/^_SPINNER=YES/_SPINNER=NO/g"                   ${_vBs}/${_barName}
      wait
    fi

    if [ -e "${_vBs}/${_barName}" ]; then
      if [ "${_outP}" = "logged" ] || [ "${_outP}" = "onlylogged" ]; then
        bash ${_vBs}/${_barName} >${_IN_BARRACUDA_LOG} 2>&1
      else
        bash ${_vBs}/${_barName}
      fi
      wait
    fi
  else
    echo "${_barName} installer not available - try again"
    _clean_pid_exit _barracuda_install_a
  fi
}

_init_start() {
  if [ -e "/run/boa_run.pid" ]; then
    echo
    echo "  Another BOA installer is running probably"
    echo "  because /run/boa_run.pid exists"
    echo
    exit 1
  elif [ -e "/run/boa_wait.pid" ]; then
    echo
    echo "  Some important system task is running probably"
    echo "  because /run/boa_wait.pid exists"
    echo
    exit 1
  else
    touch /run/boa_run.pid
    touch /run/boa_wait.pid
    mkdir -p ${_LOG_DIR}
    cd ${_vBs}
    rm -f ${_vBs}/*.sh.cnf*
    rm -f ${_vBs}/BARRACUDA.sh*
    rm -f ${_vBs}/OCTOPUS.sh*
  fi
}

_check_etc_apt_preferences() {
  if [ -e "/etc/apt/preferences" ] \
    && [ ! -e "/var/backups/old_etc_apt_preferences" ]; then
    mv -f /etc/apt/preferences /var/backups/old_etc_apt_preferences
  fi
}

_init_cleanup() {
  rm -f /root/BOA.sh*
  [ -e "/run/boa_run.pid" ] && rm -f /run/boa_run.pid
  [ -e "/run/boa_wait.pid" ] && rm -f /run/boa_wait.pid
  [ -e "/run/manage_ltd_users.pid" ] && rm -f /run/manage_ltd_users.pid
  [ -e "/run/manage_ruby_users.pid" ] && rm -f /run/manage_ruby_users.pid
  rm -f ${_vBs}/*.sh.cnf*
  rm -f ${_vBs}/BARRACUDA.sh*
  rm -f ${_vBs}/OCTOPUS.sh*
  rm -rf /opt/tmp/*
}

_init_finish() {
  rm -f /root/BOA.sh*
  [ -e "/run/boa_run.pid" ] && rm -f /run/boa_run.pid
  [ -e "/run/boa_wait.pid" ] && rm -f /run/boa_wait.pid
  [ -e "/run/manage_ltd_users.pid" ] && rm -f /run/manage_ltd_users.pid
  [ -e "/run/manage_ruby_users.pid" ] && rm -f /run/manage_ruby_users.pid
  rm -f ${_vBs}/*.sh.cnf*
  rm -f ${_vBs}/BARRACUDA.sh*
  rm -f ${_vBs}/OCTOPUS.sh*
  echo
  rm -rf /opt/tmp/*
  echo BOA ${_cmNd} completed
  echo Bye
  echo
  exit 0
}

_init_setup() {

  if [ "${_cmNd}" = "in-octopus" ] || [ "${_cmNd}" = "in-oct" ]; then

    if [ -e "/lib/systemd/systemd" ]; then
      # Explain the procedure
      echo
      echo "  Since this system is not ready for Octopus installation yet,"
      echo "  we will run the 'autoinit' for you first, reboot and then"
      echo "  you can install BOA first and then add more Octopus instances"
      echo
      echo "  NOTE: All required autoinit steps are automated"
      echo
      echo "  Feel free to log out now and check back after 10 minutes"
      echo
      echo "  PLEASE DON'T REBOOT THIS SERVER WHILE THE PROCEDURE IS RUNNING!"
      echo
      echo "  Bye!"
      echo
      # Execute the autonit and exit
      nohup /usr/local/bin/autoinit > /dev/null 2>&1 &
      sleep 1
      _clean_pid_exit
    fi

    if [ -e "/root/.dev.server.cnf" ]; then
      echo
      echo RAWV _tRee is ${_tRee}
      echo RAWV _eMal is ${_eMal}
      echo RAWV _usEr is ${_usEr}
      echo RAWV _eXtr is ${_eXtr}
      echo RAWV _cOpt is ${_cOpt}
      echo RAWV _cSub is ${_cSub}
      echo RAWV _cCor is ${_cCor}
      echo
    fi
    if [ "${_eXtr}" = "lts" ] \
      || [ "${_eXtr}" = "dev" ]; then
      _OCTO_EXTRA=OK
    else
      _eXtr=lite
    fi
    _satellite_check_id ${_usEr}
    if [ "${_cOpt}" = "octolog" ]; then
      _outP="logged"
      _cOpt=
    elif [ "${_cOpt}" = "silent" ]; then
      _outP="onlylogged"
      _cOpt=
    elif [ "${_cOpt}" = "system" ]; then
      _outP="logged"
      _cOpt=
    elif [ "${_cOpt}" = "minimal" ]; then
      _outP="logged"
      _cOpt=
    else
      _outP="verbose"
    fi

    _if_hosted_sys
    if [ "${_hostedSys}" = "YES" ]; then
      defaultOption=EDGE
    else
      defaultOption=POWER
    fi

    if [ "${_outP}" = "logged" ] \
      || [ -z "${_cOpt}" ] \
      || [ -z "${_cSub}" ] \
      || [ -z "${_cCor}" ]; then
      _cOpt=${defaultOption}
      _cSub=Q
      _cCor=1
    fi
    if [ "${_outP}" = "onlylogged" ] \
      || [ -z "${_cOpt}" ] \
      || [ -z "${_cSub}" ] \
      || [ -z "${_cCor}" ]; then
      _cOpt=${defaultOption}
      _cSub=Q
      _cCor=1
    fi
    if [ -e "/root/.dev.server.cnf" ]; then
      echo MODD _tRee is ${_tRee}
      echo MODD _eMal is ${_eMal}
      echo MODD _usEr is ${_usEr}
      echo MODD _eXtr is ${_eXtr}
      echo MODD _cOpt is ${_cOpt}
      echo MODD _cSub is ${_cSub}
      echo MODD _cCor is ${_cCor}
      echo
      echo CTRL _outP is ${_outP}
      echo
      echo Waiting 60 seconds...
      sleep 15
      echo Waiting 45 seconds...
      sleep 15
      echo Waiting 30 seconds...
      sleep 15
      echo Waiting 15 seconds...
      echo
    fi
    if [ "${_eXtr}" = "dev" ]; then
      _tRee=dev
    elif [ "${_eXtr}" = "pro" ]; then
      _tRee=pro
    elif [ "${_eXtr}" = "lts" ]; then
      _tRee=lts
    fi
  fi

  # Define the BOA log file for use after autoinit
  _BOA_LOGFILE="/root/.boa.install.command.cnf"

  if [ "${_cmNd}" = "in-lts" ] \
    || [ "${_cmNd}" = "in-dev" ]; then
    if [ ! -e "/root/.autoinit.log" ] || [ -e "/lib/systemd/systemd" ]; then
      # Write the command to the log file
      echo "${_BOA_COMMAND}" > ${_BOA_LOGFILE}
      # Explain the procedure
      echo
      echo "  Since this system is not ready for BOA installation yet,"
      echo "  we will run the 'autoinit' for you first, reboot and then"
      echo "  your original boa command will be run in a silent _mOde"
      echo
      echo "  The command to run once autonit is complete:"
      echo
      echo "    ${_BOA_COMMAND}"
      echo
      echo "  NOTE: All those steps are automated"
      echo
      echo "  Feel free to log out now and check back after 30-40 minutes"
      echo
      echo "  PLEASE DON'T REBOOT THIS SERVER WHILE THE PROCEDURE IS RUNNING!"
      echo
      echo "  You should receive an _eMal once the installation is complete"
      echo
      echo "  Bye!"
      echo
      # Execute the autonit and exit
      nohup /usr/local/bin/autoinit > /dev/null 2>&1 &
      sleep 1
      _clean_pid_exit
    fi
  fi

  if [ "${_cmNd}" = "in-lts" ] \
    || [ "${_cmNd}" = "in-dev" ]; then
    _check_no_systemd
    _ifnames_grub_check_sync
  fi

  if [ "${_cmNd}" = "in-lts" ] \
    || [ "${_cmNd}" = "in-dev" ]; then
    if [ -e "/root/.dev.server.cnf" ]; then
      echo
      echo RAWV _tRee is ${_tRee}
      echo RAWV _kiNd is ${_kiNd}
      echo RAWV _fQdn is ${_fQdn}
      echo RAWV _eMal is ${_eMal}
      echo RAWV _usEr is ${_usEr}
      echo RAWV _eXtr is ${_eXtr}
      echo RAWV _outP is ${_outP}
      echo
    fi
    if [ "${_kiNd}" = "local" ]; then
      if [[ "${_eMal}" =~ "php" ]]; then
        _eXtr="${_eMal}"
      fi
      _eMal="${_fQdn}"
      _usEr="o1"
    fi
    if [ "${_kiNd}" = "public" ]; then
      if [[ "${_usEr}" =~ "php" ]]; then
        _eXtr="${_usEr}"
        _usEr="o1"
      fi
      _satellite_check_id ${_usEr}
    fi
    if [ "${_usEr}" = "silent" ] \
      || [ "${_eXtr}" = "silent" ] \
      || [ "${_outP}" = "silent" ]; then
      _outP="onlylogged"
      _sYst="bundle"
    elif [ "${_usEr}" = "minimal" ] \
      || [ "${_eXtr}" = "minimal" ] \
      || [ "${_outP}" = "minimal" ]; then
      _outP="logged"
      _sYst="bundle"
    elif [ "${_usEr}" = "octolog" ] \
      || [ "${_eXtr}" = "octolog" ] \
      || [ "${_outP}" = "octolog" ]; then
      _outP="logged"
      _sYst="bundle"
    elif [ "${_usEr}" = "system" ] \
      || [ "${_eXtr}" = "system" ] \
      || [ "${_outP}" = "system" ]; then
      _outP="logged"
      _sYst="barracuda"
    else
      _outP="verbose"
      _sYst="bundle"
    fi
    if [ -e "/root/.dev.server.cnf" ]; then
      echo MODD _tRee is ${_tRee}
      echo MODD _kiNd is ${_kiNd}
      echo MODD _fQdn is ${_fQdn}
      echo MODD _eMal is ${_eMal}
      echo MODD _usEr is ${_usEr}
      echo MODD _eXtr is ${_eXtr}
      echo MODD _outP is ${_outP}
      echo
      echo CTRL _outP is ${_outP}
      echo CTRL _sYst is ${_sYst}
      echo
      echo Waiting 60 seconds...
      sleep 15
      echo Waiting 45 seconds...
      sleep 15
      echo Waiting 30 seconds...
      sleep 15
      echo Waiting 15 seconds...
      echo
    fi
  fi

  _init_start
  _check_etc_apt_preferences

  export _tRee="${_tRee}"
  export _rLsn="BOA-5.4.0"
  export _rlsE="${_rLsn}-${_tRee}"
  export _bRnh="5.x-${_tRee}"

  if [ "${_cmNd}" = "in-dev" ] \
    || [ "${_cmNd}" = "in-lts" ]; then
    curl ${_crlGet} "${_rgUrl}/${_bRnh}/${_barName}"      -o ${_vBs}/${_barName}
    curl ${_crlGet} "${_rgUrl}/${_bRnh}/${_octName}"      -o ${_vBs}/${_octName}
    curl ${_crlGet} "${_rgUrl}/${_bRnh}/${_pthIncB}"      -o ${_vBs}/${_filIncB}
    curl ${_crlGet} "${_rgUrl}/${_bRnh}/${_pthIncO}"      -o ${_vBs}/${_filIncO}
  elif [ "${_cmNd}" = "in-octopus" ] \
    || [ "${_cmNd}" = "in-oct" ]; then
    curl ${_crlGet} "${_rgUrl}/${_bRnh}/${_barName}"      -o ${_vBs}/${_barName}
    curl ${_crlGet} "${_rgUrl}/${_bRnh}/${_octName}"      -o ${_vBs}/${_octName}
    curl ${_crlGet} "${_rgUrl}/${_bRnh}/${_pthIncB}"      -o ${_vBs}/${_filIncB}
    curl ${_crlGet} "${_rgUrl}/${_bRnh}/${_pthIncO}"      -o ${_vBs}/${_filIncO}
  fi
  if [ -e "/root/.debug-boa-installer.cnf" ]; then
    sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g"             ${_vBs}/${_filIncB}
    wait
    sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g"             ${_vBs}/${_filIncO}
    wait
  fi
  if [ -e "/root/.debug-barracuda-installer.cnf" ]; then
    sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g"             ${_vBs}/${_filIncB}
    wait
  fi
  if [ -e "/root/.debug-octopus-installer.cnf" ]; then
    sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g"             ${_vBs}/${_filIncO}
    wait
  fi
  if [ "${_cmNd}" = "in-octopus" ] || [ "${_cmNd}" = "in-oct" ]; then
    _OCTOPUS_ONLY=YES
  else
    _barracuda_install
    if [ "${_outP}" = "verbose" ]; then
      echo
      echo "Time for a quick barracuda system upgrade to complete installation"
      echo
      /opt/local/bin/barracuda up-${_tRee} system
      wait
    else
      /opt/local/bin/barracuda up-${_tRee} system > /dev/null 2>&1
      wait
    fi
  fi
  if [ "${_OCTOPUS_ONLY}" = "YES" ] || [ "${_sYst}" = "bundle" ]; then
    [ ! -e "/run/_octopus_install_run.pid" ] && touch /run/_octopus_install_run.pid
    sleep 3
    _octopus_install
    rm -rf /data/disk/${_usEr}/.tmp/cache
  fi
  if [ "${_outP}" = "logged" ]; then
    _send_report
  fi
  if [ "${_OCTOPUS_ONLY}" = "YES" ] || [ "${_sYst}" = "bundle" ]; then
    _init_cleanup
    [ ! -e "/run/_octopus_install_run.pid" ] && touch /run/_octopus_install_run.pid
    sleep 3
    # Execute post-install octopus upgrade and exit
    touch /data/disk/${_usEr}/static/control/ssl-live-_mOde.info
    rm -f /data/disk/${_usEr}/tools/le/.ctrl/ssl-demo-_mOde.pid
    rm -rf /data/disk/${_usEr}/.tmp/cache
    echo
    if [ ! -e "/root/.dont.upgrade.octopus.on.install.cnf" ]; then
      echo "Invoking hosting-dispatch/hosting-tasks to complete the installation"
      sleep 3
      echo "Please wait, it will take about 30 seconds..."
      su -s /bin/bash ${_usEr} -c "drush @hm hosting-dispatch"  &> /dev/null
      echo "1/5"
      sleep 5
      su -s /bin/bash ${_usEr} -c "drush @hm hosting-tasks --force" &> /dev/null
      echo "2/5"
      sleep 5
      su -s /bin/bash ${_usEr} -c "drush @hm hosting-tasks --force" &> /dev/null
      echo "3/5"
      sleep 5
      su -s /bin/bash ${_usEr} -c "drush @hm hosting-tasks --force" &> /dev/null
      echo "4/5"
      sleep 5
      su -s /bin/bash ${_usEr} -c "drush @hm hosting-tasks --force" &> /dev/null
      echo "5/5"
      sleep 3
      echo "The post-installation upgrade is now being invoked..."
      echo "...to complete the Let's Encrypt setup."
      sleep 3
      echo "This process will take a few minutes and will run in the background."
      sleep 3
    fi
    echo "NOTE! The initial one-time login link will no longer work."
    sleep 3
    echo "To access your Aegir control panel after the procedure is finished..."
    echo "...please generate a new link by running the following command:"
    sleep 3
    echo
    echo "  su -s /bin/bash ${_usEr} -c \"drush @hm uli\""
    echo
    sleep 3
    echo "Bye!"
    echo
    if [ ! -e "/root/.dont.upgrade.octopus.on.install.cnf" ]; then
      rm -rf /data/disk/${_usEr}/.tmp/cache
      if [ "${_OCTOPUS_ONLY}" = "YES" ]; then
        nohup /opt/local/bin/octopus up-${_tRee} ${_usEr} force log > /dev/null 2>&1 &
      else
        /opt/local/bin/octopus up-${_tRee} ${_usEr} force log > /dev/null 2>&1
      fi
    fi
    sleep 1
    exit 0
  else
    _init_finish
  fi
}

_find_fast_mirror_early() {
  isNetc=$(which netcat 2>&1)
  if [ ! -x "${isNetc}" ] || [ -z "${isNetc}" ]; then
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
    fi
    _apt_clean_update
    apt-get install netcat ${_aptYesUnth} 2> /dev/null
    apt-get install netcat-traditional ${_aptYesUnth} 2> /dev/null
    wait
  fi
  _ffMirr=$(which ffmirror 2>&1)
  if [ -x "${_ffMirr}" ]; then
    _ffList="/var/backups/boa-mirrors-2024-01.txt"
    mkdir -p /var/backups
    if [ ! -e "${_ffList}" ]; then
      echo "de.files.aegir.cc"  > ${_ffList}
      echo "ny.files.aegir.cc" >> ${_ffList}
      echo "sg.files.aegir.cc" >> ${_ffList}
    fi
    if [ -e "${_ffList}" ]; then
      _BROKEN_FFMIRR_TEST=$(grep "stuff" ${_ffMirr} 2>&1)
      if [[ "${_BROKEN_FFMIRR_TEST}" =~ "stuff" ]]; then
        _CHECK_MIRROR=$(bash ${_ffMirr} < ${_ffList} 2>&1)
        _USE_MIR="${_CHECK_MIRROR}"
        [[ "${_USE_MIR}" =~ "printf" ]] && _USE_MIR="files.aegir.cc"
      else
        _USE_MIR="files.aegir.cc"
      fi
    else
      _USE_MIR="files.aegir.cc"
    fi
  else
    _USE_MIR="files.aegir.cc"
  fi
  _urlDev="http://${_USE_MIR}/dev"
  _urlHmr="http://${_USE_MIR}/versions/${_tRee}/boa/aegir"
}

_if_reinstall_curl() {
  isCurl=$(curl --version 2>&1)
  if [[ ! "${isCurl}" =~ "OpenSSL" ]] \
    || [[ "${isCurl}" =~ "libcurl.so.4" ]] \
    || [ -z "${isCurl}" ]; then
    if [ -e "/var/aegir/drush" ]; then
      echo "OOPS: cURL is broken!"
    fi
    if [ ! -e "/var/aegir/drush" ]; then
      if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
        && [ -e "/etc/apt/apt.conf.d" ]; then
        echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
      fi
      echo "curl install" | dpkg --set-selections 2> /dev/null
      _apt_clean_update
      apt-get remove libssl1.0-dev -y --purge --auto-remove -qq 2> /dev/null
      apt-get autoremove -y 2> /dev/null
      apt-get install libssl-dev -y -qq 2> /dev/null
      apt-get install libc-client2007e libc-client2007e-dev -y -qq 2> /dev/null
      apt-get build-dep curl -y 2> /dev/null
      apt-get install curl --reinstall -y -qq 2> /dev/null
    fi
    isCurl=$(curl --version 2>&1)
    if [[ ! "${isCurl}" =~ "OpenSSL" ]] || [ -z "${isCurl}" ]; then
      echo "ERRR: curl is still broken, please install it and debug manually"
      _clean_pid_exit
    fi
  fi
}

_check_dns_curl() {
  if [ ! -f "/etc/resolv.conf" ]; then
    rm -f /etc/resolv.conf
    echo "nameserver 127.0.0.1" > /etc/resolv.conf
    if [ -e "${_vBs}/resolv.conf.vanilla" ]; then
      cat ${_vBs}/resolv.conf.vanilla >> /etc/resolv.conf
    fi
    echo "nameserver 1.1.1.1" >> /etc/resolv.conf
    echo "nameserver 1.0.0.1" >> /etc/resolv.conf
    echo "nameserver 8.8.8.8" >> /etc/resolv.conf
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf
    _check_dns_settings
  else
    _check_dns_settings
  fi
  if [ -x "/usr/sbin/unbound-control" ] \
    && [ -e "/etc/resolvconf/run/interface/lo.unbound" ]; then
    unbound-control reload &> /dev/null
  fi
  _find_fast_mirror_early
  _if_reinstall_curl
  _CURL_TEST=$(curl -L -k -s \
    --max-redirs 10 \
    --retry 3 \
    --retry-delay 10 \
    -I "http://${_USE_MIR}" 2> /dev/null)
  if [[ ! "${_CURL_TEST}" =~ "200 OK" ]]; then
    if [[ "${_CURL_TEST}" =~ "unknown option was passed in to libcurl" ]]; then
      echo "ERROR: cURL libs are out of sync! Re-installing again.."
      _if_reinstall_curl
    else
      echo "ERROR: ${_USE_MIR} is not available, please try later"
      _clean_pid_exit _check_dns_curl_a
    fi
  fi
}

_if_fix_iptables_symlinks() {
  ###
  ### Fix for iptables paths backward compatibility
  ###
  if [ -x "/sbin/iptables" ] && [ ! -e "/usr/sbin/iptables" ]; then
    ln -s /sbin/iptables /usr/sbin/iptables
  fi
  if [ -x "/usr/sbin/iptables" ] && [ ! -e "/sbin/iptables" ]; then
    ln -s /usr/sbin/iptables /sbin/iptables
  fi
  if [ -x "/sbin/iptables-save" ] && [ ! -e "/usr/sbin/iptables-save" ]; then
    ln -s /sbin/iptables-save /usr/sbin/iptables-save
  fi
  if [ -x "/usr/sbin/iptables-save" ] && [ ! -e "/sbin/iptables-save" ]; then
    ln -s /usr/sbin/iptables-save /sbin/iptables-save
  fi
  if [ -x "/sbin/iptables-restore" ] && [ ! -e "/usr/sbin/iptables-restore" ]; then
    ln -s /sbin/iptables-restore /usr/sbin/iptables-restore
  fi
  if [ -x "/usr/sbin/iptables-restore" ] && [ ! -e "/sbin/iptables-restore" ]; then
    ln -s /usr/sbin/iptables-restore /sbin/iptables-restore
  fi
  if [ -x "/sbin/ip6tables" ] && [ ! -e "/usr/sbin/ip6tables" ]; then
    ln -s /sbin/ip6tables /usr/sbin/ip6tables
  fi
  if [ -x "/usr/sbin/ip6tables" ] && [ ! -e "/sbin/ip6tables" ]; then
    ln -s /usr/sbin/ip6tables /sbin/ip6tables
  fi
  if [ -x "/sbin/ip6tables-save" ] && [ ! -e "/usr/sbin/ip6tables-save" ]; then
    ln -s /sbin/ip6tables-save /usr/sbin/ip6tables-save
  fi
  if [ -x "/usr/sbin/ip6tables-save" ] && [ ! -e "/sbin/ip6tables-save" ]; then
    ln -s /usr/sbin/ip6tables-save /sbin/ip6tables-save
  fi
  if [ -x "/sbin/ip6tables-restore" ] && [ ! -e "/usr/sbin/ip6tables-restore" ]; then
    ln -s /sbin/ip6tables-restore /usr/sbin/ip6tables-restore
  fi
  if [ -x "/usr/sbin/ip6tables-restore" ] && [ ! -e "/sbin/ip6tables-restore" ]; then
    ln -s /usr/sbin/ip6tables-restore /sbin/ip6tables-restore
  fi
  ###
  ### Fix for iptables paths backward compatibility
  ###
}

_csf_check_fix() {
  if [ -x "/usr/sbin/csf" ] \
    && [ -e "/etc/csf/csf.deny" ] \
    && [ ! -x "/etc/csf/csfpost.sh" ]; then
    echo "" > /etc/csf/csfpost.sh
    echo "iptables -t raw -A PREROUTING -p tcp --dport 21 -j CT --helper ftp" >> /etc/csf/csfpost.sh
    echo "iptables -t raw -A OUTPUT -p tcp --dport 21 -j CT --helper ftp" >> /etc/csf/csfpost.sh
    chmod 700 /etc/csf/csfpost.sh
    sed -i "s/.*aegir.*//g" /etc/csf/csf.allow
    csf -a 94.237.26.49    de.files.aegir.cc  &> /dev/null
    csf -a 209.151.150.175 ny.files.aegir.cc  &> /dev/null
    csf -a 95.111.194.246  sg.files.aegir.cc  &> /dev/null
    service lfd stop &> /dev/null
    wait
    kill -9 $(ps aux | grep '[C]onfigServer' | awk '{print $2}') &> /dev/null
    killall sleep &> /dev/null
    rm -f /etc/csf/csf.error
    csf -x  &> /dev/null
    wait
    service clean-boa-env start &> /dev/null
    wait
    _if_fix_iptables_symlinks
    csf -uf &> /dev/null
    wait
    _NFTABLES_TEST=$(iptables -V 2>&1)
    if [[ "${_NFTABLES_TEST}" =~ "nf_tables" ]]; then
      if [ -e "/usr/sbin/iptables-legacy" ]; then
        update-alternatives --set iptables /usr/sbin/iptables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/ip6tables-legacy" ]; then
        update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/arptables-legacy" ]; then
        update-alternatives --set arptables /usr/sbin/arptables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/ebtables-legacy" ]; then
        update-alternatives --set ebtables /usr/sbin/ebtables-legacy &> /dev/null
      fi
    fi
    csf -e  &> /dev/null
    wait
    sed -i "s/.*DHCP.*//g" /etc/csf/csf.allow
    wait
    sed -i "/^$/d" /etc/csf/csf.allow
    if [ -e "/var/log/daemon.log" ]; then
      _DHCP_LOG="/var/log/daemon.log"
    else
      _DHCP_LOG="/var/log/syslog"
    fi
    grep DHCPREQUEST "${_DHCP_LOG}" | awk '{print $12}' | sort -u | while read -r _IP; do
      if [[ ${_IP} =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
        IFS='.' read -r oct1 oct2 oct3 oct4 <<< "${_IP}"
        if (( oct1 <= 255 && oct2 <= 255 && oct3 <= 255 && oct4 <= 255 )); then
          echo "udp|out|d=67|d=${_IP} # Local DHCP out" >> /etc/csf/csf.allow
        fi
      fi
    done
    service lfd start &> /dev/null
    wait
    ### Linux kernel TCP SACK CVEs mitigation
    ### CVE-2019-11477 SACK Panic
    ### CVE-2019-11478 SACK Slowness
    ### CVE-2019-11479 Excess Resource Consumption Due to Low MSS Values
    if [ -x "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
      _SACK_TEST=$(ip6tables --list | grep tcpmss 2>&1)
      if [[ ! "${_SACK_TEST}" =~ "tcpmss" ]]; then
        sysctl net.ipv4.tcp_mtu_probing=0 &> /dev/null
        iptables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
        ip6tables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
      fi
    fi
  fi
}

_check_root() {
  if [ `whoami` = "root" ]; then
    [ -e "/var/lib/man-db/auto-update" ] && rm -f /var/lib/man-db/auto-update
    if [ "${_cmNd}" = "in-octopus" ] || [ "${_cmNd}" = "in-oct" ]; then
      _system_check_ready
    else
      if [ ! -e "/root/.force.reinstall.cnf" ]; then
        _system_check_clean
      fi
    fi
    _csf_check_fix
    chmod a+w /dev/null
    if [ ! -e "/dev/fd" ]; then
      if [ -e "/proc/self/fd" ]; then
        rm -rf /dev/fd
        ln -s /proc/self/fd /dev/fd
      fi
    fi
    sed -i "s/^127.0.0.1.*/127.0.0.1 localhost/g" /etc/hosts
    wait
    sed -i "s/.*files.aegir.cc.*//g" /etc/hosts
    wait
    sed -i "s/.*github.*//g" /etc/hosts
    wait
    echo >>/etc/hosts
    sed -i "/^$/d" /etc/hosts
    wait
  else
    echo "ERROR: This script should be run as a root _usEr"
    _clean_pid_exit _check_root_a
  fi
  _DF_TEST=$(df -kTh / -l \
    | grep '/' \
    | sed 's/\%//g' \
    | awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "${_DF_TEST}" ] && [ "${_DF_TEST}" -gt "90" ]; then
    echo "ERROR: Your disk space is almost full !!! ${_DF_TEST}/100"
    echo "ERROR: We can not proceed until it is below 90/100"
    _clean_pid_exit _check_root_b
  fi
  if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
    && [ -e "/etc/apt/apt.conf.d" ]; then
    echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
  fi
  if [ -x "/opt/local/bin/killer" ]; then
    sed -i "s/.*killer.*//gi" /etc/crontab &> /dev/null
    echo "*/1 *   * * *   root    bash /opt/local/bin/killer" >> /etc/crontab
  fi
  if [ "${_VMFAMILY}" = "VS" ]; then
    if [ ! -e "/etc/apt/preferences.d/fuse" ]; then
      mkdir -p /etc/apt/preferences.d/
      echo -e 'Package: fuse\nPin: release *\nPin-Priority: -1' > /etc/apt/preferences.d/fuse
      _apt_clean_update
    fi
    if [ ! -e "/etc/apt/preferences.d/udev" ]; then
      mkdir -p /etc/apt/preferences.d/
      echo -e 'Package: udev\nPin: release *\nPin-Priority: -1' > /etc/apt/preferences.d/udev
      _apt_clean_update
    fi
    if [ ! -e "/etc/apt/preferences.d/makedev" ]; then
      mkdir -p /etc/apt/preferences.d/
      echo -e 'Package: makedev\nPin: release *\nPin-Priority: -1' > /etc/apt/preferences.d/makedev
      _apt_clean_update
    fi
    apt-get remove fuse -y --purge --auto-remove -qq 2> /dev/null
    apt-get remove udev -y --purge --auto-remove -qq 2> /dev/null
    apt-get remove makedev -y --purge --auto-remove -qq 2> /dev/null
    if [ -e "/sbin/hdparm" ]; then
      apt-get remove hdparm -y --purge --auto-remove -qq 2> /dev/null
    fi
    _REMOVE_LINKS="buagent \
                   checkroot.sh \
                   fancontrol \
                   halt \
                   hwclock.sh \
                   hwclockfirst.sh \
                   ifupdown \
                   ifupdown-clean \
                   kerneloops \
                   klogd \
                   mountall-bootclean.sh \
                   mountall.sh \
                   mountdevsubfs.sh \
                   mountkernfs.sh \
                   mountnfs-bootclean.sh \
                   mountnfs.sh \
                   mountoverflowtmp \
                   mountvirtfs \
                   mtab.sh \
                   networking \
                   procps \
                   reboot \
                   sendsigs \
                   setserial \
                   svscan \
                   sysstat \
                   umountfs \
                   umountnfs.sh \
                   umountroot \
                   urandom \
                   vnstat"
    for link in ${_REMOVE_LINKS}; do
      if [ -e "/etc/init.d/${link}" ]; then
        update-rc.d -f ${link} remove &> /dev/null
        mv -f /etc/init.d/${link} /var/backups/init.d.${link}
      fi
    done
    for s in cron dbus ssh; do
      if [ -e "/etc/init.d/${s}" ]; then
        sed -rn -e 's/^(# Default-Stop:).*$/\1 0 1 6/' -e '/^### BEGIN INIT INFO/,/^### END INIT INFO/p' /etc/init.d/${s} > /etc/insserv/overrides/${s}
      fi
    done
    /sbin/insserv -v -d &> /dev/null
  fi
}

_display_version() {
  if [ `whoami` = "root" ]; then
    _HOST_INFO=$(dmidecode -s system-manufacturer 2>&1)
    _VIRT_TOOL=$(which virt-what 2> /dev/null)
    if [ -x "${_VIRT_TOOL}" ]; then
      _VIRT_TEST=$(virt-what 2> /dev/null)
      _VIRT_TEST=$(echo -n ${_VIRT_TEST} | fmt -su -w 2500 2>&1)
      if [ ! -e "/root/.allow.any.virt.cnf" ]; then
        if [ -e "/proc/self/status" ]; then
          _VS_GUEST_TEST=$(grep -E "VxID:[[:space:]]*[0-9]{2,}$" /proc/self/status 2> /dev/null)
          _VS_HOST_TEST=$(grep -E "VxID:[[:space:]]*0$" /proc/self/status 2> /dev/null)
        fi
        if [ ! -z "${_VS_HOST_TEST}" ] || [ ! -z "${_VS_GUEST_TEST}" ]; then
          if [ -z "${_VS_HOST_TEST}" ] && [ ! -z "${_VS_GUEST_TEST}" ]; then
            _VIRT_IS="Linux VServer guest"
          else
            if [ ! -z "${_VS_HOST_TEST}" ]; then
              _VIRT_IS="Linux VServer host"
            else
              _VIRT_IS="unknown / not a virtual machine"
            fi
          fi
        else
          if [ -z "${_VIRT_TEST}" ] \
            || [ "${_VIRT_TEST}" = "0" ] \
            || [ "${_VIRT_TEST}" = " " ]; then
            _VIRT_IS="unknown / not a virtual machine"
          elif [[ "${_VIRT_TEST}" =~ "xen-dom0" ]]; then
            _VIRT_IS="Xen privileged domain"
          elif [[ "${_VIRT_TEST}" =~ "linux_vserver-host" ]]; then
            _VIRT_IS="Linux VServer host"
          else
            if [[ "${_VIRT_TEST}" =~ "xen xen-hvm" ]]; then
              _VIRT_TEST="xen-hvm"
            elif [[ "${_VIRT_TEST}" =~ "xen xen-domU" ]]; then
              _VIRT_TEST="xen-domU"
            elif [[ "${_VIRT_TEST}" =~ "virtualbox kvm" ]]; then
              _VIRT_TEST="virtualbox"
            elif [[ "${_VIRT_TEST}" =~ "hyperv qemu" ]]; then
              _VIRT_TEST="hyperv"
            elif [[ "${_VIRT_TEST}" =~ "kvm aws" ]]; then
              _VIRT_TEST="kvm"
            elif [[ "${_VIRT_TEST}" =~ "openvz lxc" ]]; then
              _VIRT_TEST="openvz"
            fi
            case "${_VIRT_TEST}" in
              hyperv)      _VIRT_IS="Microsoft Hyper-V" ;;
              kvm)         _VIRT_IS="Linux KVM guest" ;;
              lxc)         _VIRT_IS="Linux Containers (LXC)" ;;
              openvz)      _VIRT_IS="OpenVZ Containers" ;;
              parallels)   _VIRT_IS="Parallels guest" ;;
              virtualbox)  _VIRT_IS="VirtualBox guest" ;;
              vmware)      _VIRT_IS="VMware ESXi guest" ;;
              xen-domU)    _VIRT_IS="Xen paravirtualized guest domain" ;;
              xen-hvm)     _VIRT_IS="Xen guest fully virtualized (HVM)" ;;
              xen)         _VIRT_IS="Xen guest" ;;
              *)  _VIRT_IS="${_VIRT_TEST} not supported"
              ;;
            esac
          fi
        fi
      else
        if [ -z "${_VIRT_TEST}" ] \
          || [ "${_VIRT_TEST}" = "0" ] \
          || [ "${_VIRT_TEST}" = " " ]; then
          _VIRT_IS="unknown / not a virtual machine"
        fi
        _VIRT_IS="${_VIRT_TEST} not supported"
      fi
    fi
    _thiSys="$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)/$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1) $(uname -m 2>&1)"
    if [ -e "/var/log/barracuda_log.txt" ]; then
      _crlBoav=`tail --lines=1 /var/log/barracuda_log.txt \
        | cut -d '/' -f4 \
        | sed "s/ Barracuda //g"`
      _crlBoav=${_crlBoav//[^a-zA-Z0-9-.]/}
    fi
    echo "${_crlBoav} on ${_thiSys} on ${_VIRT_IS} on ${_HOST_INFO}"
    exit 0
  else
    echo "ERROR: This script should be run as a root _usEr"
    exit 1
  fi
}

# Function to display time in appropriate units
_display_time() {
  local service=$1
  local pidfile=$2

  if [ ! -f "$pidfile" ]; then
    not_running_services+=("  _XSE $service is not running (PID file not found).")
    return
  fi

  # Get the PID from the PID file
  pid=$(cat "$pidfile")

  # Check if the process is running
  if ! ps -p "$pid" > /dev/null 2>&1; then
    not_running_services+=("  _XSE $service is not running (stale PID file).")
    return
  fi

  # Get the current time and the PID file modification time in seconds since epoch
  current_time=$(date +%s)
  file_time=$(stat -c %Y "$pidfile")

  # Calculate the time difference in seconds
  elapsed=$((current_time - file_time))

  if [ $elapsed -lt 60 ]; then
    running_services+=("  _XSE $service is running for $elapsed seconds.")
  elif [ $elapsed -lt 3600 ]; then
    minutes=$((elapsed / 60))
    running_services+=("  _XSE $service is running for $minutes minutes.")
  elif [ $elapsed -lt 172800 ]; then
    hours=$((elapsed / 3600))
    running_services+=("  _XSE $service is running for $hours hours.")
  else
    days=$((elapsed / 86400))
    running_services+=("  _XSE $service is running for $days days.")
  fi
}

# Function to convert KB to GB (1 GB = 1024 * 1024 KB)
_convert_kb_to_gb() {
  echo "scale=2; $1 / 1024 / 1024" | bc
}

# Function to calculate RAM usage percentage as an integer
_calculate_ram_usage_percent() {
  total_ram_kb=$1
  available_ram_kb=$2
  used_ram_kb=$((total_ram_kb - available_ram_kb))

  # Using integer division to get a whole number percentage
  echo $(( (used_ram_kb * 100) / total_ram_kb ))
}

# Function to check and display system info
_check_system_ram() {
  # Get the total and available RAM in KB
  total_ram_kb=$(grep MemTotal /proc/meminfo | awk '{print $2}')
  available_ram_kb=$(grep MemAvailable /proc/meminfo | awk '{print $2}')

  # Convert total RAM to GB
  _total_ram_gb=$(_convert_kb_to_gb ${total_ram_kb})

  # Calculate RAM usage percentage
  _ram_usage_percent=$(_calculate_ram_usage_percent ${total_ram_kb} ${available_ram_kb})
}

_display_info() {
  if [ `whoami` = "root" ]; then
    _HOST_INFO=$(dmidecode -s system-manufacturer 2>&1)
    _CPU_INFO=$(grep -c processor /proc/cpuinfo 2>&1)
    _CPU_INFO=${_CPU_INFO//[^0-9]/}
    _NPROC_TEST=$(which nproc 2>&1)
    if [ -z "${_NPROC_TEST}" ]; then
      _CPU_NR="${_CPU_INFO}"
    else
      _CPU_NR=$(nproc 2>&1)
    fi
    _CPU_NR=${_CPU_NR//[^0-9]/}
    if [ ! -z "${_CPU_NR}" ] \
      && [ ! -z "${_CPU_INFO}" ] \
      && [ "${_CPU_NR}" -gt "${_CPU_INFO}" ] \
      && [ "${_CPU_INFO}" -gt "0" ]; then
      _CPU_NR="${_CPU_INFO}"
    fi
    _DF_TEST=$(df -kTh / -l \
      | grep '/' \
      | sed 's/\%//g' \
      | awk '{print $6}' 2> /dev/null)
    _DF_TEST=${_DF_TEST//[^0-9]/}
    if [ -x "/usr/sbin/nginx" ]; then
      _NGX=$(/usr/sbin/nginx -v 2>&1 \
        | tr -d "\n" \
        | cut -d" " -f4 \
        | awk '{ print $1}' \
        | cut -d"/" -f2 \
        | awk '{ print $1}' 2>&1)
      if [ -z "${_NGX}" ]; then
        _NGX=$(/usr/sbin/nginx -v 2>&1 \
          | tr -d "\n" \
          | cut -d" " -f3 \
          | awk '{ print $1}' \
          | cut -d"/" -f2 \
          | awk '{ print $1}' 2>&1)
      fi
    fi
    if [ -x "/usr/bin/php-cli" ]; then
      _PHP=$(/usr/bin/php-cli -v | grep 'PHP 7' \
        | cut -d: -f1 | awk '{ print $2}' 2>&1)
      if [ -z "${_PHP}" ]; then
        _PHP=$(/usr/bin/php-cli -v | grep 'PHP 5' \
          | cut -d: -f1 | awk '{ print $2}' 2>&1)
      fi
      if [ -z "${_PHP}" ]; then
        _PHP=$(/usr/bin/php-cli -v | grep 'PHP 8' \
          | cut -d: -f1 | awk '{ print $2}' 2>&1)
      fi
    fi
    _DBV=$(mysql -V 2>&1 \
      | tr -d "\n" \
      | cut -d" " -f6 \
      | awk '{ print $1}' \
      | cut -d"-" -f1 \
      | awk '{ print $1}' \
      | sed "s/[\,']//g" 2>&1)
    if [ "${_DBV}" = "Linux" ]; then
      _DBV=$(mysql -V 2>&1 \
        | tr -d "\n" \
        | cut -d" " -f4 \
        | awk '{ print $1}' \
        | cut -d"-" -f1 \
        | awk '{ print $1}' \
        | sed "s/[\,']//g" 2>&1)
    fi
    if [ -x "/usr/bin/proxysql" ]; then
      _PXY=$(proxysql --version 2>&1 \
        | tr -d "\n" \
        | cut -d"-" -f1 \
        | awk '{ print $3}' 2>&1)
    fi
    if [ -x "/usr/bin/redis-server" ]; then
      _RDS=$(redis-server -v 2>&1 \
        | tr -d "\n" \
        | cut -d" " -f4 \
        | awk '{ print $1}' 2>&1)
      if [[ "${_RDS}" =~ "sha" ]]; then
        _RDS=$(redis-server -v 2>&1 \
          | tr -d "\n" \
          | tr -d "v=" \
          | cut -d" " -f3 \
          | awk '{ print $1}' 2>&1)
      fi
    fi
    _isLshell=$(which lshell 2>&1)
    _LSH=$(${_isLshell} --version 2>&1 \
      | tr -d "\n" \
      | cut -d"-" -f2 \
      | awk '{ print $1}' 2>&1)
    if [ -e "/root/.install._mOdern.openssl.cnf" ] \
      && [ -x "/usr/local/ssl3/bin/openssl" ]; then
      _SSL_BINARY=/usr/local/ssl3/bin/openssl
    else
      _SSL_BINARY=/usr/local/ssl/bin/openssl
    fi
    _SSL=$(${_SSL_BINARY} version 2>&1 \
      | tr -d "\n" \
      | cut -d" " -f2 \
      | awk '{ print $1}' 2>&1)
    _CRL=$(curl --version 2>&1 \
      | tr -d "\n" \
      | cut -d" " -f2 \
      | awk '{ print $1}' 2>&1)
    _SHD=$(ssh -V 2>&1 \
      | tr -d "\n" \
      | tr -d "," \
      | cut -d"_" -f2 \
      | awk '{ print $1}' 2>&1)
    _SSH=$(ssh -V 2>&1)
    [ "${_mOde}" = "clear" ] && clear
    echo
    _thiSys="$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)/$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1) $(uname -m 2>&1)"
    if [ -e "/var/log/barracuda_log.txt" ]; then
      _AUT=$(grep _AUTOPILOT ${_barCnf} 2>&1)
      _BIL=$(grep _BACKEND_ITEMS_LIST ${_barCnf} 2>&1)
      _CCC=$(grep _CUSTOM_CONFIG_CSF ${_barCnf} 2>&1)
      _CCL=$(grep _CUSTOM_CONFIG_LSHELL ${_barCnf} 2>&1)
      _CCR=$(grep _CUSTOM_CONFIG_REDIS ${_barCnf} 2>&1)
      _CCS=$(grep _CUSTOM_CONFIG_SQL ${_barCnf} 2>&1)
      _DBG=$(grep _DEBUG_MODE ${_barCnf} 2>&1)
      _DBS=$(grep _DB_SERIES ${_barCnf} 2>&1)
      _DNS=$(grep _DNS_SETUP_TEST ${_barCnf} 2>&1)
      _EXP=$(grep _EXTRA_PACKAGES ${_barCnf} 2>&1)
      _MFS=$(grep _MAGICK_FROM_SOURCES ${_barCnf} 2>&1)
      _MFX=$(grep _MODULES_FIX ${_barCnf} 2>&1)
      _PCV=$(grep _PHP_CLI_VERSION ${_barCnf} 2>&1)
      _PEC=$(grep _PHP_EXTRA_CONF ${_barCnf} 2>&1)
      _PFD=$(grep _PHP_FPM_DENY ${_barCnf} 2>&1)
      _PFV=$(grep _PHP_FPM_VERSION ${_barCnf} 2>&1)
      _PFX=$(grep _PERMISSIONS_FIX ${_barCnf} 2>&1)
      _PMI=$(grep _PHP_MULTI_INSTALL ${_barCnf} 2>&1)
      _PSI=$(grep _PHP_SINGLE_INSTALL ${_barCnf} 2>&1)
      _SAR=$(grep _SSH_ARMOUR ${_barCnf} 2>&1)
      _SBP=$(grep _STRICT_BIN_PERMISSIONS ${_barCnf} 2>&1)
      _SFS=$(grep _SSH_FROM_SOURCES ${_barCnf} 2>&1)
      _SKY=$(grep _SKYNET_MODE ${_barCnf} 2>&1)
      _STP=$(grep _STRONG_PASSWORDS ${_barCnf} 2>&1)
      _SUO=$(grep _SYSTEM_UP_ONLY ${_barCnf} 2>&1)
      _UMY=$(grep _USE_MYSQLTUNER ${_barCnf} 2>&1)
      _XTR=$(grep _XTRAS_LIST ${_barCnf} 2>&1)
      _crlBoav=`tail --lines=1 /var/log/barracuda_log.txt \
        | cut -d '/' -f4 \
        | sed "s/ Barracuda //g"`
      _crlBoav=${_crlBoav//[^a-zA-Z0-9-.]/}
      echo "Aegir ${_crlBoav} on ${_thiSys}"
    else
      _crlBoav="Vanilla System"
      echo "Ready for BOA ${_crlBoav} on ${_thiSys}"
    fi

    [ "${_mOde}" = "report" ] && echo "Host `hostname` check on `date`"
    [ "${_mOde}" = "report" ] && echo "Host uptime `uptime`"
    [ ! -z "${_HOST_INFO}" ] && echo "  HOST ${_HOST_INFO}"
    [ ! -z "${_VIRT_IS}" ] && echo "  VPS ${_VIRT_IS}"
    [ -z "${_VIRT_IS}" ] && echo "  VPS unknown / not a virtual machine"

    if [ -e "/root/.allow.any.virt.cnf" ]; then
      echo
      echo "  !!! WARNING !!! /root/.allow.any.virt.cnf detected..."
      echo
      echo "  !!! YOU ARE RUNNING EITHER ON BARE METAL"
      echo "  !!! OR NOT SUPPORTED VIRTUALIZATION SYSTEM."
      if [ -n "${_VIRT_IS}" ]; then
         echo
         echo "  !!! ${_VIRT_TEST}"
      fi
      echo
      echo "  !!! Please be aware that it may not work at all,"
      echo "  !!! or you can experience errors breaking BOA."
      echo
      echo "  !!! BOA IS NOT DESIGNED TO RUN DIRECTLY ON A BARE METAL."
      echo "  !!! IT IS VERY DANGEROUS AND THUS EXTREMELY BAD IDEA!"
      echo
      echo "  !!! WARNING !!! You are obviously free to experiment..."
      echo "  !!! WARNING !!! But don't expect *ANY* support."
      echo
    fi

    [ ! -z "${_SKY}" ] && echo "  SKY ${_SKY}"
    [ ! -z "${_NGX}" ] && echo "  NGX ${_NGX}"
    [ ! -z "${_PHP}" ] && echo "  PHP ${_PHP}"
    [ ! -z "${_DBV}" ] && echo "  DBV ${_DBV}"
    [ ! -z "${_RDS}" ] && echo "  RDS ${_RDS}"
    [ ! -z "${_PXY}" ] && echo "  PXY ${_PXY}"
    [ ! -z "${_SHD}" ] && echo "  SHD ${_SHD}"
    [ ! -z "${_SSH}" ] && echo "  SSH ${_SSH}"
    [ ! -z "${_LSH}" ] && echo "  LSH ${_LSH}"
    [ ! -z "${_SSL}" ] && echo "  SSL ${_SSL}"
    [ ! -z "${_CRL}" ] && echo "  CRL ${_CRL}"
    if [ -e "/root/.use.curl.from.packages.cnf" ]; then
      echo "  CRL_From_Packages YES"
    else
      echo "  CRL_From_Packages NO"
    fi
    if [ -e "/usr/local/bin/curl" ]; then
      echo "  CRL_Local_Bin YES"
    else
      echo "  CRL_Local_Bin NO"
    fi
    [ "${_mOde}" != "report" ] && [ ! -z "${_AUT}" ] && echo "  _AUT ${_AUT}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_BIL}" ] && echo "  _BIL ${_BIL}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_CCC}" ] && echo "  _CCC ${_CCC}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_CCL}" ] && echo "  _CCL ${_CCL}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_CCR}" ] && echo "  _CCR ${_CCR}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_CCS}" ] && echo "  _CCS ${_CCS}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_DBG}" ] && echo "  _DBG ${_DBG}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_DBS}" ] && echo "  _DBS ${_DBS}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_DNS}" ] && echo "  _DNS ${_DNS}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_EXP}" ] && echo "  _EXP ${_EXP}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_MFS}" ] && echo "  _MFS ${_MFS}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_MFX}" ] && echo "  _MFX ${_MFX}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_PCV}" ] && echo "  _PCV ${_PCV}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_PEC}" ] && echo "  _PEC ${_PEC}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_PFD}" ] && echo "  _PFD ${_PFD}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_PFV}" ] && echo "  _PFV ${_PFV}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_PFX}" ] && echo "  _PFX ${_PFX}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_PMI}" ] && echo "  _PMI ${_PMI}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_PSI}" ] && echo "  _PSI ${_PSI}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_SAR}" ] && echo "  _SAR ${_SAR}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_SBP}" ] && echo "  _SBP ${_SBP}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_SFS}" ] && echo "  _SFS ${_SFS}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_STP}" ] && echo "  _STP ${_STP}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_SUO}" ] && echo "  _SUO ${_SUO}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_UMY}" ] && echo "  _UMY ${_UMY}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_XTR}" ] && echo "  _XTR ${_XTR}"
    [ "${_mOde}" != "report" ] && [ ! -z "${_AUT}" ] && echo "  _AUT ${_AUT}"

    # Get the currently used GRUB config affecting networking
    _GRUB_FILE="/etc/default/grub"
    _XSG=$(grep -E "^GRUB_CMDLINE_LINUX=" "${_GRUB_FILE}")

    # Get the currently running kernel version
    _XSK=$(uname -r)

    # Get the kernel version that will be activated after reboot (latest installed kernel)
    _XSN=$(ls -1 /boot/vmlinuz-* | sort -V | tail -n 1 | sed 's/\/boot\/vmlinuz-//')

    _XSU=$(uptime -p 2>&1)
    _XSL=$(uptime | awk -F'load average:' '{ print $2 }' | sed 's/^ //' 2>&1)

    _check_system_ram

    echo
    echo "  _XSY System Uptime/Load/Kernel/CPU/Memory/Disk Report"
    echo
    echo "  _XSU System Uptime: ${_XSU}"
    echo "  _XSL System Load: ${_XSL}"
    echo "  _XSK Current Kernel Version: ${_XSK}"
    # Only display the next kernel version if it's different from the current one
    if [ "${_XSK}" != "${_XSN}" ]; then
      echo "  _XSN Next Kernel Version (after reboot): ${_XSN}"
    fi
    echo "  _XSG GRUB: ${_XSG}"
    echo "  _CPU Number: ${_CPU_NR}"
    echo "  _RAM Total: ${_total_ram_gb} GB"
    echo "  _RAM Usage: ${_ram_usage_percent}%"
    echo "  _DSK Usage for relevant partitions:"
    # Loop through all partitions and display their usage, excluding tmpfs, udev, and empty partitions
    df -h | awk 'NR > 1 && $1 !~ /tmpfs|udev/ && $5 != "0%" {print "  _DSK " $1 ": " $5 " used (" $6 ")"}'
    echo

    echo "  _XSE Key Services Uptime Report"
    echo
    # Arrays to store results
    running_services=()
    not_running_services=()
    # Indexed array to hold the services in the desired order
    services_order=(
      "sshd"
      "crond"
      "nginx"
      "php74-fpm"
      "php81-fpm"
      "php82-fpm"
      "php83-fpm"
      "mysql"
      "redis"
      "solr7"
      "jetty9"
      "pure-ftpd"
      "lfd"
      "rsyslogd"
      "unbound"
      "vnstat"
    )
    # List of services and their respective PID files
    declare -A services=(
      ["sshd"]="/run/sshd.pid"
      ["crond"]="/run/crond.pid"
      ["nginx"]="/run/nginx.pid"
      ["php74-fpm"]="/run/php74-fpm.pid"
      ["php81-fpm"]="/run/php81-fpm.pid"
      ["php82-fpm"]="/run/php82-fpm.pid"
      ["php83-fpm"]="/run/php83-fpm.pid"
      ["mysql"]="/run/mysqld/mysqld.pid"
      ["redis"]="/run/redis/redis.pid"
      ["solr7"]="/var/solr7/solr-9077.pid"
      ["jetty9"]="/run/jetty9.pid"
      ["pure-ftpd"]="/run/pure-ftpd.pid"
      ["lfd"]="/run/lfd.pid"
      ["rsyslogd"]="/run/rsyslogd.pid"
      ["unbound"]="/run/unbound/unbound.pid"
      ["vnstat"]="/run/vnstat/vnstat.pid"
    )
    # Loop through the services in the correct order
    for service in "${services_order[@]}"; do
      _display_time "$service" "${services[$service]}"
    done
    # Conditionally display headers only if there are both running and not running services
    if [ ${#running_services[@]} -gt 0 ]; then
      if [ ${#not_running_services[@]} -gt 0 ]; then
        echo "  _XSE Running services:"
        echo
      fi
      for service in "${running_services[@]}"; do
        echo "$service"
      done
    fi
    if [ ${#not_running_services[@]} -gt 0 ]; then
      echo
      echo "  _XSE Not running services:"
      echo
      for service in "${not_running_services[@]}"; do
        echo "$service"
      done
    fi
    echo
    if [ -e "/var/log/barracuda_log.txt" ]; then
      if [ "${_mOde}" = "report" ]; then
        display="system"
        if [ "${_eXtr}" = "octopus" ] && [ -d "/data/u" ]; then
          grep _PHP_CLI_VERSION /root/.*.octopus.cnf
          echo
          grep _PHP_FPM_VERSION /root/.*.octopus.cnf
          echo
          _OCT_NR=$(ls /data/disk | wc -l)
          _OCT_NR=$(( _OCT_NR - 1 ))
          echo ALL _OCT_NR is ${_OCT_NR}
          echo
          for _OCT in `find /data/disk/ -maxdepth 1 -mindepth 1 | sort`; do
            _SITES_NR=0
            if [ -e "${_OCT}/config/server_master/nginx/vhost.d" ]; then
              _SITES_NR=$(ls ${_OCT}/config/server_master/nginx/vhost.d | wc -l)
              if [ "${_SITES_NR}" -gt "0" ]; then
                echo _SITES_NR in ${_OCT} is ${_SITES_NR}
              else
                _OCT_NR=$(( _OCT_NR - 1 ))
              fi
            fi
          done
          echo
          echo ACTIVE _OCT_NR is ${_OCT_NR}
          _ALL_SITES_NR=$(ls /data/disk/*/config/server_master/nginx/vhost.d | wc -l)
          _ALL_SITES_NR=$(( _ALL_SITES_NR - _OCT_NR ))
          echo
          echo _ALL_SITES_NR is ${_ALL_SITES_NR}
        fi
        if [ "${_eXtr}" = "backups" ]; then
          tail --lines=19 /var/xdrago/log/*.archive.log
          echo
        fi
        if [ "${_eXtr}" = "both" ]; then
          grep _PHP_CLI_VERSION /root/.*.octopus.cnf
          echo
          grep _PHP_FPM_VERSION /root/.*.octopus.cnf
          echo
          tail --lines=19 /var/xdrago/log/*.archive.log
          echo
        fi
      elif [ "${_mOde}" = "full" ]; then
        cat /var/log/barracuda_log.txt
      elif [ "${_mOde}" = "more" ]; then
        display="default"
        cat /var/log/barracuda_log.txt | grep $(date +'%Y' -d 'last year')
        cat /var/log/barracuda_log.txt | grep $(date +%Y)
      else
        display="default"
        tail --lines=5 /var/log/barracuda_log.txt
      fi
    fi
    if [ "${display}" = "default" ]; then
      echo
      echo "Please link this information in your submission,"
      echo "but only in a form of Gist snippet and not inline,"
      echo "along with your hosting provider name"
      echo "in the BOA issue queue on GitHub."
      echo
    fi
    exit 0
  else
    echo "ERROR: This script should be run as a root _usEr"
    exit 1
  fi
}

_octopus_cleanup() {
  if [ `whoami` = "root" ]; then
    if [ "${_aCtn}" = "detect" ]; then
      echo
      echo "Accounts marked for cleanup or active"
      echo
      rm -f /root/.cleanup.detect.txt
      for Usr in `find /data/disk/ -maxdepth 1 -mindepth 1 | sort`
      do
        if [ -d "${Usr}/config/server_master/nginx/vhost.d" ] \
          && [ -e "${Usr}/log/cores.txt" ] \
          && [ -e "${Usr}/log/CANCELLED" ]; then
          sIze=$(du -s -h ${Usr} | cut -d' ' -f1 | awk '{ print $1}' 2>&1)
          echo "CANCELLED ${Usr} ${sIze}"
          iUsr=$(echo ${Usr} | cut -d'/' -f4 | awk '{ print $1}' 2>&1)
          echo "CANCELLED ${iUsr}" >> /root/.cleanup.detect.txt
        else
          if [ -d "${Usr}/config/server_master/nginx/vhost.d" ] \
            && [ -e "${Usr}/log/cores.txt" ]; then
            echo "ACTIVE ${Usr}"
          fi
        fi
      done
    elif [ "${_aCtn}" = "purge" ] \
      && [ "${_usEr}" = "batch" ] \
      && [ -e "/root/.cleanup.detect.txt" ]; then
        IFS=$'\12'
        for p in $(cat /root/.cleanup.detect.txt 2>&1);do
          usr_purge=`echo $p | cut -d' ' -f2 | awk '{ print $1}'`
          boa cleanup purge ${usr_purge}
          wait
        done
    elif [ "${_aCtn}" = "purge" ] \
      && [ ! -z "${_usEr}" ] \
      && [ "${_usEr}" != "batch" ] \
      && [ -e "/root/.cleanup.detect.txt" ]; then
      zombie_dir="/var/backups/zombie/purged/${_usEr}/home/"
      nginx_inc="/var/aegir/config/server_master/nginx/platform.d"
      nginx_ssl="/var/aegir/config/server_master/nginx/pre.d"
      nginx_prx=$(ls ${nginx_ssl}/z_${_usEr}.*_ssl_proxy.conf 2>&1)
      sites_nr=$(ls /data/disk/${_usEr}/config/server_master/nginx/vhost.d | wc -l)
      if [ -d "/data/disk/${_usEr}/config/server_master/nginx/vhost.d" ] \
        && [ "${sites_nr}" = "0" ] \
        && [ -e "/data/disk/${_usEr}/log/cores.txt" ] \
        && [ -e "/data/disk/${_usEr}/log/CANCELLED" ]; then
        echo
        echo "Account to purge: ${_usEr}"
        echo
        mkdir -p ${zombie_dir}
        mv -f "${nginx_inc}/${_usEr}.conf" ${zombie_dir}
        mv -f "${nginx_prx}" ${zombie_dir}
        echo "${_usEr}:/data/disk/${_usEr}" > ${zombie_dir}.purge.list
        echo "${_usEr}.ftp:/home/${_usEr}.ftp" >> ${zombie_dir}.purge.list
        echo "${_usEr}.web:/home/${_usEr}.web" >> ${zombie_dir}.purge.list
        _PHP_V="83 82 81 80 74 73 72 71 70 56"
        for e in ${_PHP_V}; do
          if [ -e "/opt/php${e}/etc/pool.d/${_usEr}.${e}.conf" ] \
            || [ -e "/home/${_usEr}.${e}.web" ]; then
            rm -f /opt/php${e}/etc/pool.d/${_usEr}.${e}.conf
            echo "${_usEr}.${e}.web:/home/${_usEr}.${e}.web" >> ${zombie_dir}.purge.list
          fi
          if [ -e "/opt/php${e}/etc/pool.d/${_usEr}.conf" ] \
            || [ -e "/home/${_usEr}.web" ]; then
            rm -f /opt/php${e}/etc/pool.d/${_usEr}.conf
            echo "${_usEr}.web:/home/${_usEr}.web" >> ${zombie_dir}.purge.list
          fi
        done
        kill -9 $(ps aux | grep '[g]pg-agent' | awk '{print $2}') &> /dev/null
        IFS=$'\12'
          for p in $(cat ${zombie_dir}.purge.list | grep "${_usEr}" 2>&1);do
            usr_name=`echo $p | cut -d':' -f1 | awk '{ print $1}'`
            usr_home=`echo $p | cut -d':' -f2 | awk '{ print $1}'`
            echo disabling chattr for ${usr_name} in ${usr_home}..
            chattr -i -R ${usr_home}/ &> /dev/null
            if [ -d "${usr_home}/.drush/" ]; then
              chattr -i ${usr_home}/.drush/
            fi
            rm -rf ${usr_home}/.gnupg
            echo purging ${usr_name}..
            if [ -d "${usr_home}/static" ]; then
              rm -rf ${usr_home}/backups
              rm -rf ${usr_home}/distro
              rm -rf ${usr_home}/src
              rm -rf ${usr_home}/static
              rm -rf ${usr_home}/undo
            fi
            del_usEr \
              --remove-home \
              --backup-to /var/backups/zombie/purged/${_usEr}/home/ ${usr_name} &> /dev/null
          done;
        echo
        echo "Cleanup complete"
      else
        echo
        echo "OOPS.. ${_usEr} is either active, with existing vhosts or does not exist"
      fi
    fi
    echo
    exit 0
  fi
}

_if_start_screen() {
  if [ -e "/root/.autoinit.log" ] && [ ! -e "/lib/systemd/systemd" ]; then
    if [[ -n "$SSH_CONNECTION" || -n "$SSH_CLIENT" ]]; then
      # Check if the _usEr is inside a screen session
      if [[ ! "${_ARGS}" =~ (^|[[:space:]])(info|help|version|reboot)([[:space:]]|$) ]]; then
        if [ -z "$STY" ]; then
          # If not in screen, start a new screen session with the same script
          echo "You are not inside a screen session. Starting screen..."
          sleep 5
          screen -S session_boa bash -c "$0 ${_ARGS}"
          exit
        else
          # If already inside screen, continue the script
          echo "You are in a screen session now"
          sleep 3
        fi
      fi
    fi
  fi
}

_if_display_help() {
  if [ "${_cmNd}" = "help" ]; then
    echo
    echo "Installation commands:"
    echo
    echo "Usage: $(basename "$0") {version} {kind} {fqdn} {email} {user} {extra} {output}"
    echo "Usage: $(basename "$0") {in-octopus} {email} {o2} {lts|dev|pro} {output}"
    echo
    echo "Other available commands:"
    echo
    echo "Usage: $(basename "$0") version"
    echo "Usage: $(basename "$0") info {more}"
    echo "Usage: $(basename "$0") info report {octopus|backups|both}"
    echo "Usage: $(basename "$0") cleanup {detect|purge} {user|batch}"
    echo "Usage: $(basename "$0") reboot"
    echo
    cat <<EOF

    Accepted keywords and values for installation and other commands:

    {version}
      in-lts <------- install BOA LTS release (no license)
      in-dev <------- install BOA Cutting Edge (requires license)
      in-octopus <--- install extra Octopus instance (lts|dev|pro)

    {kind}
      public <------- recommended for general use
      local <-------- experimental

    {fqdn}
      my.fqdn <------ valid subdomain to use as a hostname

    {email}
      my@email <----- your valid email address

    {user}
      o1 <----------- default Octopus system account

    {extra}
      license <------ valid new relic license key
      php-8.3 <------ enable single-PHP mode (8.1 or 8.2 or 8.3 or 7.4)
      php-min <------ install PHP 8.1, 8.2, 8.3, 7.4, use 8.3 by default (php-all)
      php-max <------ install PHP 8.1, 8.2, 8.3, 8.0, 7.4, 7.3, 7.2, 7.1, 7.0, 5.6
      nodns <-------- disable DNS/SMTP checks on the fly
      percona-8.0 <-- specify Percona version to use (5.7, 8.0, 8.3, 8.4)

    {_outP}
      verbose <------ barracuda and octopus installed (output in the console) (default)
      minimal <------ barracuda and octopus installed (output mostly logged)
      silent <------- barracuda and octopus installed (output only logged)
      system <------- only barracuda is installed (output mostly logged)

    {other}
      version <------ display BOA and OS version
      info <--------- generate various system reports
      cleanup <------ (detect|purge) cancelled Octopus instances files (no dbs)
      reboot <------- run accelerated system reboot

    See docs/INSTALL.md for more details.

EOF
    _clean_pid_exit _cmNd_a

  fi
}

_check_root_direct
_os_detection_minimal

export _ARGS="$@"

case "$1" in
  info)       _cmNd="$1"
              _mOde="$2"
              _eXtr="$3"
              _check_virt
              _display_info
  ;;
  version)    _cmNd="$1"
              _display_version
  ;;
  help)       _cmNd="$1"
              _if_display_help
  ;;
  reboot)     service clean-boa-env stop
              wait
              reboot
              exit 0
  ;;
  cleanup)    _cmNd="$1"
              _aCtn="$2"
              _usEr="$3"
              _if_start_screen
              _octopus_cleanup
  ;;
  in-lts)     _tRee=lts
              _cmNd="$1"
              _kiNd="$2"
              _fQdn="$3"
              _eMal="$4"
              _usEr="$5"
              _eXtr="$6"
              _outP="$7"
              _check_root
              _check_manufacturer_compatibility
              _check_root_keys_pwd
              _check_virt
              _check_dns_curl
              _if_start_screen
              # Capture the complete command with arguments
              _BOA_COMMAND="$0 $@"
              _init_setup
  ;;
  in-dev)     _tRee=dev
              _cmNd="$1"
              _kiNd="$2"
              _fQdn="$3"
              _eMal="$4"
              _usEr="$5"
              _eXtr="$6"
              _outP="$7"
              _check_root
              _check_root_keys_pwd
              _check_virt
              _check_dns_curl
              _if_start_screen
              # Capture the complete command with arguments
              _BOA_COMMAND="$0 $@"
              _init_setup
  ;;
  in-octopus) _cmNd="$1"
              _eMal="$2"
              _usEr="$3"
              _eXtr="$4"
              _cOpt="$5"
              _cSub="$6"
              _cCor="$7"
              _check_root
              _check_root_keys_pwd
              _check_virt
              _check_dns_curl
              _if_start_screen
              # Capture the complete command with arguments
              _BOA_COMMAND="$0 $@"
              _init_setup
  ;;
  in-oct)     _cmNd="$1"
              _eMal="$2"
              _usEr="$3"
              _eXtr="$4"
              _cOpt="$5"
              _cSub="$6"
              _cCor="$7"
              _pXyc="6033"
              _pXyi="127.0.0.1"
              _check_root
              _check_root_keys_pwd
              _check_virt
              _check_dns_curl
              _if_start_screen
              # Capture the complete command with arguments
              _BOA_COMMAND="$0 $@"
              _init_setup
  ;;
  *)          echo
              echo "Sorry, you are trying not supported command.."
              echo "Display supported commands with: $(basename "$0") help"
              echo
              _clean_pid_exit _cmNd_a
  ;;
esac

exit 0
