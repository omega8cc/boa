#!/bin/bash

HOME=/root
SHELL=/bin/bash
PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin

export PATH=${PATH}
export SHELL=${SHELL}
export HOME=${HOME}

barCnf="/root/.barracuda.cnf"
barName="BARRACUDA.sh.txt"
crlGet="-L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab"
aptYesUnth="-y --allow-unauthenticated"
filIncB="barracuda.sh.cnf"
filIncO="octopus.sh.cnf"
octName="OCTOPUS.sh.txt"
pthIncB="lib/settings/${filIncB}"
pthIncO="lib/settings/${filIncO}"
rgUrl="https://raw.githubusercontent.com/omega8cc/boa"
vBs="/var/backups"

_TODAY=$(date +%y%m%d 2>&1)
_TODAY=${_TODAY//[^0-9]/}
_NOW=$(date +%y%m%d-%H%M%S 2>&1)
_NOW=${_NOW//[^0-9-]/}
_CHECK_HOST=$(uname -n 2>&1)
_VMFAMILY=XEN
_VM_TEST=$(uname -a 2>&1)
if [[ "${_VM_TEST}" =~ "-beng" ]]; then
  _VMFAMILY="VS"
fi

###
### Avoid too many questions
###
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi

clean_pid_exit() {
  [ -e "/var/run/boa_wait.pid" ] && rm -f /var/run/boa_wait.pid
  [ -e "/var/run/boa_run.pid" ] && rm -f /var/run/boa_run.pid
  service cron start &> /dev/null
  exit 1
}

os_detection_minimal() {
  _APT_UPDATE="apt-get update"
  _THIS_RV=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  _OS_LIST="daedalus chimaera beowulf buster bullseye bookworm"
  for e in ${_OS_LIST}; do
    if [ "${e}" = "${_THIS_RV}" ]; then
      _APT_UPDATE="apt-get update --allow-releaseinfo-change"
    fi
  done
}

apt_clean_update() {
  #apt-get clean -qq 2> /dev/null
  #rm -rf /var/lib/apt/lists/* &> /dev/null
  ${_APT_UPDATE} -qq 2> /dev/null
}

not_supported_virt() {
  echo
  echo "=== OOPS! ==="
  echo
  echo "You are running not supported virtualization system:"
  echo "  $1"
  echo
  echo "If you wish to try BOA on this system anyway,"
  echo "please create an empty control file:"
  echo "  /root/.allow.any.virt.cnf"
  echo
  echo "Please be aware that it may not work at all,"
  echo "or you can experience errors breaking BOA."
  echo
  echo "BOA is known to work well on:"
  echo " * Linux KVM guest"
  echo " * Linux VServer guest"
  echo " * Parallels guest"
  echo " * VirtualBox guest"
  echo " * VMware ESXi guest (but excluding vCloud Air)"
  echo " * Xen guest"
  echo
  echo "BOA is not designed to run directly on a bare metal."
  echo "We recommend to install Linux VServer if you plan to"
  echo "use BOA on a dedicated machine -- server or laptop."
  echo
  echo "Note: There are plans to support Linux VServer installation"
  echo "via BOA tools: https://github.com/omega8cc/boa/issues/980"
  echo
  echo "Bye"
  echo
  clean_pid_exit
}

check_virt() {
  _VIRT_TOOL=$(which virt-what 2> /dev/null)
  if [ -x "${_VIRT_TOOL}" ]; then
    _VIRT_TEST=$(virt-what 2> /dev/null)
    _VIRT_TEST=$(echo -n ${_VIRT_TEST} | fmt -su -w 2500 2>&1)
    if [ ! -e "/root/.allow.any.virt.cnf" ]; then
      if [ -e "/proc/self/status" ]; then
        _VS_GUEST_TEST=$(grep -E "VxID:[[:space:]]*[0-9]{2,}$" /proc/self/status 2> /dev/null)
        _VS_HOST_TEST=$(grep -E "VxID:[[:space:]]*0$" /proc/self/status 2> /dev/null)
      fi
      if [ ! -z "${_VS_HOST_TEST}" ] || [ ! -z "${_VS_GUEST_TEST}" ]; then
        if [ -z "${_VS_HOST_TEST}" ] && [ ! -z "${_VS_GUEST_TEST}" ]; then
          _VIRT_IS="Linux VServer guest"
        else
          if [ ! -z "${_VS_HOST_TEST}" ]; then
            not_supported_virt "Linux VServer host"
          else
            not_supported_virt "unknown / not a virtual machine"
          fi
        fi
      else
        if [ -z "${_VIRT_TEST}" ] || [ "${_VIRT_TEST}" = "0" ]; then
          not_supported_virt "unknown / not a virtual machine"
        elif [[ "${_VIRT_TEST}" =~ "xen-dom0" ]]; then
          not_supported_virt "Xen privileged domain"
        elif [[ "${_VIRT_TEST}" =~ "linux_vserver-host" ]]; then
          not_supported_virt "Linux VServer host"
        else
          if [[ "${_VIRT_TEST}" =~ "xen xen-hvm" ]]; then
            _VIRT_TEST="xen-hvm"
          elif [[ "${_VIRT_TEST}" =~ "xen xen-domU" ]]; then
            _VIRT_TEST="xen-domU"
          elif [[ "${_VIRT_TEST}" =~ "virtualbox kvm" ]]; then
            _VIRT_TEST="virtualbox"
          elif [[ "${_VIRT_TEST}" =~ "hyperv qemu" ]]; then
            _VIRT_TEST="hyperv"
          elif [[ "${_VIRT_TEST}" =~ "kvm aws" ]]; then
            _VIRT_TEST="kvm"
          elif [[ "${_VIRT_TEST}" =~ "openvz lxc" ]]; then
            _VIRT_TEST="openvz"
          fi
          case "${_VIRT_TEST}" in
            hyperv)      _VIRT_IS="Microsoft Hyper-V" ;;
            kvm)         _VIRT_IS="Linux KVM guest" ;;
            lxc)         _VIRT_IS="Linux Containers (LXC)" ;;
            openvz)      _VIRT_IS="OpenVZ Containers" ;;
            parallels)   _VIRT_IS="Parallels guest" ;;
            virtualbox)  _VIRT_IS="VirtualBox guest" ;;
            vmware)      _VIRT_IS="VMware ESXi guest" ;;
            xen-domU)    _VIRT_IS="Xen paravirtualized guest domain" ;;
            xen-hvm)     _VIRT_IS="Xen guest fully virtualized (HVM)" ;;
            xen)         _VIRT_IS="Xen guest" ;;
            *)  not_supported_virt "${_VIRT_TEST}"
            ;;
          esac
        fi
      fi
    else
      if [ -z "${_VIRT_TEST}" ] || [ "${_VIRT_TEST}" = "0" ]; then
        _VIRT_TEST="unknown / not a virtual machine"
      fi
      echo "WARN: This system is not supported: ${_VIRT_TEST}"
    fi
  fi
}

system_check_ready() {
  if [ ! -e "/etc/nginx" ] \
    || [ ! -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ] \
    || [ ! -e "/etc/mysql" ] \
    || [ ! -e "/var/lib/mysql" ]; then
    echo "ERROR: Please install complete BOA system before trying"
    echo "ERROR: to install additional Aegir / Octopus instances"
    echo "Bye"
    clean_pid_exit
  fi
}

system_check_clean() {
  if [ -e "/etc/mysql" ]; then
    mv -f /etc/mysql /etc/mysql_pre
  fi
  if [ -e "/etc/nginx" ] \
    || [ -e "/var/aegir/.drush/hostmaster.alias.drushrc.php" ] \
    || [ -e "/etc/apache2" ] \
    || [ -e "/var/lib/mysql" ]; then
    echo "ERROR: BOA requires minimal supported OS with no services installed."
    echo
    echo "Please make sure you don't have MySQL nor Apache installed."
    echo "Here's the list of directories which shouldn't exist:"
    echo "/etc/nginx /etc/apache2 /etc/mysql /var/lib/mysql /var/aegir"
    if [ ! -e "/etc/nginx" ]; then
      echo
      echo "HINT: Try to run: apt-get purge mysql-common --and then try again."
      echo "HINT: You can also enforce installation with empty control file:"
      echo " touch /root/.force.reinstall.cnf -- and then try again."
      echo
    fi
    echo "Bye"
    clean_pid_exit
  fi
}

check_ifnames() {
  _SYS_IFNAMES=$(grep GRUB_CMDLINE_LINUX= /etc/default/grub | grep "net.ifnames=0" 2>&1)
  if [ -e "/etc/default/grub" ] && [[ ! "${_SYS_IFNAMES}" =~ "net.ifnames=0" ]]; then
    echo
    echo "ERROR: BOA requires the classic network interface naming convention."
    echo "ERROR: Typically it should be eth0 and not ens3 systemd convention."
    echo
    echo "RDOCS: Please study recommended docs before introducing any changes!"
    echo
    echo "RDOCS:   https://bit.ly/boa-network-config"
    echo
    echo "HINTS: You can check your active network interfaces with command:"
    echo "HINTS:   ip addr show"
    echo "HINTS: to make sure you are in fact using supported naming convention."
    echo "HINTS: You may see names like eth0, eth1, eth2 -- they are supported."
    echo
    echo "HINTS: Add these two required parameters to GRUB_CMDLINE_LINUX variable:"
    echo "HINTS:   net.ifnames=0 biosdevname=0"
    echo "HINTS: in your /etc/default/grub configuration and then activate with"
    echo "HINTS:   grub-mkconfig -o /boot/grub/grub.cfg"
    echo "HINTS: Once this is done, reboot your system and run this installer again."
    echo
    echo "Bye"
    echo
    clean_pid_exit
  fi
}

check_root_direct() {
  _U_TEST=DENY
  [ "${SUDO_USER}" ] && _U_TEST_SDO=${SUDO_USER} || _U_TEST_SDO=`whoami`
  _U_TEST_WHO=$(who am i | awk '{print $1}' 2>&1)
  _U_TEST_LNE=$(logname 2>&1)
  if [ "${_U_TEST_SDO}" = "root" ] || [ "${_U_TEST_LNE}" = "root" ]; then
    if [ -z "${_U_TEST_WHO}" ]; then
      _U_TEST=ALLOW
      ### normal for root scripts running from cron
    else
      if [ "${_U_TEST_WHO}" = "root" ]; then
        _U_TEST=ALLOW
      fi
    fi
  fi
  if [ "${_U_TEST}" = "DENY" ]; then
    echo
    echo "ERROR: This script must be run as root directly,"
    echo "ERROR: without sudo/su switch from regular system user"
    echo "ERROR: Please add and test your SSH (RSA) keys for root account"
    echo "ERROR: with direct access before trying again"
    echo
    echo "HINT:  You can always restrict access later, or"
    echo "       allow only SSH (RSA) keys for root with directive"
    echo "         PermitRootLogin without-password"
    echo "       in the /usr/etc/sshd_config file"
    echo "Bye"
    clean_pid_exit
  fi
}

check_root_keys_pwd() {
  _S_TEST=$(grep "root:\*:" /etc/shadow 2>&1)
  _R_TEST=CHECK
  if [ -e "/root/.ssh/authorized_keys" ]; then
    _R_TEST=$(grep "ssh-rsa" /root/.ssh/authorized_keys 2>&1)
  fi
  if [[ ! "${_S_TEST}" =~ "root:" ]] \
    && [[ ! "${_R_TEST}" =~ "ssh-rsa" ]]; then
    echo
    echo "ERROR: BOA requires working SSH (RSA) keys for system root present"
    echo "ERROR: Please add and test your SSH (RSA) keys for root account"
    echo "ERROR: before trying again"
    echo
    echo "HINTS: Run this command on your local PC machine:"
    echo "HINTS:   ssh-keygen -b 4096 -t rsa -N '' -f ~/.ssh/id_rsa"
    echo "HINTS: Then copy the ~/.ssh/id_rsa.pub file from your PC"
    echo "HINTS: to ~/.ssh/authorized_keys file on the server"
    echo "HINTS: Make sure the key is not split into more than 1 line"
    echo "HINTS: Remember to run: chmod 600 ~/.ssh/authorized_keys"
    echo
    echo "Bye"
    echo
    clean_pid_exit
  fi
  check_ifnames
}

satellite_check_id() {
  _USER=$1
  _ID_EXISTS=$(getent passwd ${_USER} 2>&1)
  if [ -z "${_ID_EXISTS}" ]; then
    _DO_NOTHING=YES
  elif [[ "${_ID_EXISTS}" =~ "${_USER}" ]]; then
    echo "ERROR: ${_USER} username is already taken"
    echo "Please choose different username"
    clean_pid_exit
  else
    echo "ERROR: ${_USER} username check failed"
    echo "Please try different username"
    clean_pid_exit
  fi
  if [ "${_USER}" = "admin" ] \
    || [ "${_USER}" = "hostmaster" ] \
    || [ "${_USER}" = "barracuda" ] \
    || [ "${_USER}" = "octopus" ] \
    || [ "${_USER}" = "boa" ] \
    || [ "${_USER}" = "all" ]; then
    echo "ERROR: ${_USER} is a restricted username, \
      please choose different _USER"
    clean_pid_exit
  elif [[ "${_USER}" =~ "aegir" ]] \
    || [[ "${_USER}" =~ "drupal" ]] \
    || [[ "${_USER}" =~ "drush" ]] \
    || [[ "${_USER}" =~ "sites" ]] \
    || [[ "${_USER}" =~ "default" ]]; then
    echo "ERROR: ${_USER} includes restricted keyword, \
      please choose different _USER"
    clean_pid_exit
  fi
  _REGEX="^[[:digit:]]"
  if [[ "${_USER}" =~ "${_REGEX}" ]]; then
    echo "ERROR: ${_USER} is a wrong username, \
      it should start with a letter, not digit"
    clean_pid_exit
  fi
}

fix_dns_settings() {
  dnsLi="/root/.local.dns.IP.list"
  mkdir -p ${vBs}
  rm -f ${vBs}/resolv.conf.tmp
  if [ -e "/etc/resolv.conf" ]; then
    if [ -L "/etc/resolv.conf" ]; then
      rslvT=`readlink -n /etc/resolv.conf`
      if [ ! -e "${rslvT}" ]; then
        rm -f /etc/resolv.conf
      fi
    fi
    if [ -e "/etc/resolv.conf" ]; then
      cp -a /etc/resolv.conf ${vBs}/resolv.conf.tmp
    fi
  fi
  if [ ! -e "${vBs}/resolv.conf.tmp" ]; then
    echo "nameserver 1.1.1.1" >${vBs}/resolv.conf.tmp
    echo "nameserver 1.0.0.1" >>${vBs}/resolv.conf.tmp
  fi
  if [ ! -e "${vBs}/resolv.conf.vanilla" ] \
    && [ -e "${vBs}/resolv.conf.tmp" ]; then
    if [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${vBs}/resolv.conf.tmp /etc/resolv.conf
      cp -a ${vBs}/resolv.conf.tmp ${vBs}/resolv.conf.vanilla
    fi
  fi
  sed -i "/^$/d" ${vBs}/resolv.conf.vanilla &> /dev/null
  if [ -e "${vBs}/resolv.conf.vanilla" ]; then
    if [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${vBs}/resolv.conf.vanilla /etc/resolv.conf
    fi
  else
    if [ -e "${vBs}/resolv.conf.tmp" ] \
      && [ "${_USE_DEFAULT_DNS}" != "YES" ]; then
      rm -f /etc/resolv.conf
      cp -a ${vBs}/resolv.conf.tmp /etc/resolv.conf
    fi
  fi
  if [ -e "/etc/pdnsd.conf" ]; then
    if [ -e "${dnsLi}" ]; then
      sed -i "s/.*127.0.0.1.*//g; s/ *$//g; /^$/d" ${dnsLi}
      wait
      sed -i "s/.*Dynamic.*//g; s/ *$//g; /^$/d"   ${dnsLi}
      wait
      _BROKEN_DNS_TEST_X=$(grep "\." ${dnsLi} 2>&1)
      if [ -z "${_BROKEN_DNS_TEST_X}" ]; then
        echo "        label = \"cloudflare-servers\";" > ${dnsLi}
        echo "        ip=1.1.1.1;" >> ${dnsLi}
        echo "        ip=1.0.0.1;" >> ${dnsLi}
      fi
    fi
    _CUSTOM_DNS_TEST=$(grep 1.1.1.1 /etc/pdnsd.conf 2>&1)
    _BROKEN_DNS_CONF=$(grep "ip=Dynamic" /etc/pdnsd.conf 2>&1)
    _MISSING_DNS_TEST=$(grep "ip=" /etc/pdnsd.conf 2>&1)
    if [[ "${_CUSTOM_DNS_TEST}" =~ "1.1.1.1" ]] \
      || [ ! -e "${dnsLi}" ] \
      || [ -e "/root/.use.default.nameservers.cnf" ] \
      || [ -e "/root/.use.local.nameservers.cnf" ] \
      || [[ "${_BROKEN_DNS_CONF}" =~ "Dynamic" ]] \
      || [[ -z "${_MISSING_DNS_TEST}" ]]; then
      echo "        label = \"cloudflare-servers\";" > ${dnsLi}
      for _IP in `cat /etc/resolv.conf \
        | sed 's/.*127.0.0.1.*//g; s/.*search.*//g; s/.*Dynamic.*//g' \
        | cut -d ' ' -f2 \
        | sort \
        | uniq`;do echo "        ip=${_IP};" >> ${dnsLi};done
      wait
      sed -i "s/ip=.*//g; s/ *$//g; /^$/d" /etc/pdnsd.conf
      wait
      sed -i "s/.*127.0.0.1.*//g; s/ *$//g; /^$/d" ${dnsLi}
      wait
      sed -i "s/.*Dynamic.*//g; s/ *$//g; /^$/d"   ${dnsLi}
      wait
      _BROKEN_DNS_TEST_Y=$(grep "\." ${dnsLi} 2>&1)
      if [ -z "${_BROKEN_DNS_TEST_Y}" ]; then
         echo "        ip=1.1.1.1;" >> ${dnsLi}
         echo "        ip=1.0.0.1;" >> ${dnsLi}
      fi
      ### echo debug dns A
      _DNS_TPL_TEST_GE=$(grep "google-servers" /etc/pdnsd.conf 2>&1)
      _DNS_TPL_TEST_CF=$(grep "cloudflare-servers" /etc/pdnsd.conf 2>&1)
      _DNS_RGX_TEST=$(grep "cloudflare-servers" /root/.local.dns.IP.list 2>&1)
      if [[ "${_DNS_TPL_TEST_CF}" =~ "cloudflare-servers" ]] \
        && [[ "${_DNS_RGX_TEST}" =~ "cloudflare-servers" ]]; then
        sed -i '/        label = \"cloudflare-servers\";/ {r /root/.local.dns.IP.list
d;};' /etc/pdnsd.conf
        wait
      fi
      if [[ "${_DNS_TPL_TEST_GE}" =~ "google-servers" ]] \
        && [[ "${_DNS_RGX_TEST}" =~ "cloudflare-servers" ]]; then
        sed -i '/        label = \"google-servers\";/ {r /root/.local.dns.IP.list
d;};' /etc/pdnsd.conf
        wait
      fi
      resolvconf -u         &> /dev/null
      service pdnsd restart &> /dev/null
      pdnsd-ctl empty-cache &> /dev/null
    fi
  fi
}

check_dns_settings() {
  if [ -e "/root/.use.default.nameservers.cnf" ]; then
    _USE_DEFAULT_DNS=YES
    [ -e "/root/.local.dns.IP.list" ] && rm -f /root/.local.dns.IP.list
  fi
  if [ -e "/root/.use.local.nameservers.cnf" ]; then
    _USE_PROVIDER_DNS=YES
  else
    _REMOTE_DNS_TEST=$(host files.aegir.cc 1.1.1.1 -w 10 2>&1)
  fi
  if [[ "${_REMOTE_DNS_TEST}" =~ "no servers could be reached" ]] \
    || [[ "${_REMOTE_DNS_TEST}" =~ "Host files.aegir.cc not found" ]] \
    || [ "${_USE_DEFAULT_DNS}" = "YES" ] \
    || [ "${_USE_PROVIDER_DNS}" = "YES" ]; then
    if [ "${_USE_DEFAULT_DNS}" = "YES" ] \
      || [ "${_USE_PROVIDER_DNS}" = "YES" ] \
      || [ ! -e "${vBs}/resolv.conf.vanilla" ]; then
      fix_dns_settings
      if [ -e "/etc/init.d/postfix" ]; then
        service postfix restart &> /dev/null
      fi
    fi
  fi
}

octopus_install() {
  if [ -e "${vBs}/${octName}" ]; then
    if [ -z "${user}" ]; then
      user="o1"
    else
      user=${user//[^a-zA-Z0-9-.]/}
      user=$(echo -n ${user} | tr A-Z a-z 2>&1)
    fi
    if [ "${cmmand}" = "in-octopus" ] || [ "${cmmand}" = "in-oct" ]; then
      if [ -e "/root/.auto.up.cnf" ] \
        || [ -e "/root/.host8.cnf" ] \
        || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
        || [[ "${_CHECK_HOST}" =~ ".boa.io"($) ]] \
        || [[ "${_CHECK_HOST}" =~ ".o8.io"($) ]] \
        || [[ "${_CHECK_HOST}" =~ ".aegir.cc"($) ]]; then
        _DO_NOTHING=YES
      else
        if [ -e "${barCnf}" ]; then
          source ${barCnf}
        fi
        if [ ! -z "${_MY_EMAIL}" ] && [ "${_MY_EMAIL}" = "${email}" ]; then
          sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"root\"/g"        ${vBs}/${octName}
          wait
        else
          lml="${_MY_EMAIL}"
          if [ ! -z "${lml}" ]; then
            sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"${lml}\"/g"    ${vBs}/${octName}
            wait
          else
            sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"root\"/g"      ${vBs}/${octName}
            wait
          fi
        fi
      fi
      sed -i "s/^_SPINNER=YES/_SPINNER=NO/g"                   ${vBs}/${octName}
      wait
      if [ ! -z "${pxyc}" ] && [ ! -z "${pxyi}" ]; then
        sed -i "s/^_THIS_DB_PORT=.*/_THIS_DB_PORT=${pxyc}/g"   ${vBs}/${octName}
        wait
        sed -i "s/^_THIS_DB_HOST=.*/_THIS_DB_HOST=${pxyi}/g"   ${vBs}/${octName}
        wait
        if [ -e "${vBs}/${filIncO}" ]; then
          sed -i "s/^_THIS_DB_PORT=.*/_THIS_DB_PORT=${pxyc}/g" ${vBs}/${filIncO}
          wait
          sed -i "s/^_THIS_DB_HOST=.*/_THIS_DB_HOST=${pxyi}/g" ${vBs}/${filIncO}
          wait
        fi
      fi
      if [ ! -z "${copt}" ]; then
        sed -i "s/^_CLIENT_OPTION=.*/_CLIENT_OPTION=${copt}/g" ${vBs}/${octName}
        wait
      fi
      if [ ! -z "${csub}" ]; then
        sed -i "s/^_CLIENT_SUBSCR=.*/_CLIENT_SUBSCR=${csub}/g" ${vBs}/${octName}
        wait
      fi
      if [ ! -z "${ccor}" ]; then
        sed -i "s/^_CLIENT_CORES=.*/_CLIENT_CORES=${ccor}/g"   ${vBs}/${octName}
        wait
      fi
    else
      sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"${email}\"/g"        ${vBs}/${octName}
      wait
    fi
    sed -i "s/^_CLIENT_EMAIL=.*/_CLIENT_EMAIL=\"${email}\"/g"  ${vBs}/${octName}
    wait
    sed -i "s/^_USER=.*/_USER=${user}/g"                       ${vBs}/${octName}
    wait

    if [ "${mode}" = "mini" ]; then
      if [ -e "${vBs}/${filIncO}" ]; then
        sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"             ${vBs}/${filIncO}
        wait
      fi
      ### Legacy method
      sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"               ${vBs}/${octName}
      wait
    elif [ "${mode}" = "max" ]; then
      if [ -e "${vBs}/${filIncO}" ]; then
        sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"             ${vBs}/${filIncO}
        wait
        sed -i "s/^_PLATFORMS_LIST=.*/_PLATFORMS_LIST=none/g"  ${vBs}/${filIncO}
        wait
      fi
      ### Legacy method
      sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"               ${vBs}/${octName}
      wait
      sed -i "s/^_PLATFORMS_LIST=.*/_PLATFORMS_LIST=none/g"    ${vBs}/${octName}
      wait
    elif [ "${mode}" = "none" ]; then
      if [ -e "${vBs}/${filIncO}" ]; then
        sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"             ${vBs}/${filIncO}
        wait
        sed -i "s/^_PLATFORMS_LIST=.*/_PLATFORMS_LIST=none/g"  ${vBs}/${filIncO}
        wait
      fi
      ### Legacy method
      sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"               ${vBs}/${octName}
      wait
      sed -i "s/^_PLATFORMS_LIST=.*/_PLATFORMS_LIST=none/g"    ${vBs}/${octName}
      wait
    else
      if [ -e "${vBs}/${filIncO}" ]; then
        sed -i "s/^_PLATFORMS_LIST=.*/_PLATFORMS_LIST=none/g"  ${vBs}/${filIncO}
        wait
      fi
      ### Legacy method
      sed -i "s/^_PLATFORMS_LIST=.*/_PLATFORMS_LIST=none/g"    ${vBs}/${octName}
      wait
    fi

    if [ -e "/root/.auto.up.cnf" ] \
      || [ -e "/root/.host8.cnf" ] \
      || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
      || [[ "${_CHECK_HOST}" =~ ".boa.io"($) ]] \
      || [[ "${_CHECK_HOST}" =~ ".o8.io"($) ]] \
      || [[ "${_CHECK_HOST}" =~ ".aegir.cc"($) ]]; then
      if [ ! -e "/root/.debug.cnf" ] || [ -e "/root/.default.cnf" ]; then
        if [ -e "${vBs}/${filIncO}" ]; then
          sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"           ${vBs}/${filIncO}
          wait
          sed -i "s/^_STRONG_PASS.*/_STRONG_PASSWORDS=YES/g"   ${vBs}/${filIncO}
          wait
        fi
        ### Legacy method
        sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"             ${vBs}/${octName}
        wait
        sed -i "s/^_STRONG_PASS.*/_STRONG_PASSWORDS=YES/g"     ${vBs}/${octName}
        wait
      fi
    fi

    if [ "${cmmand}" = "in-dev" ] \
      || [ "${cmmand}" = "in-lite" ] \
      || [ "${cmmand}" = "in-octopus" ] \
      || [ "${cmmand}" = "in-oct" ] \
      || [ "${cmmand}" = "init" ] \
      || [ "${cmmand}" = "init-dev" ] \
      || [ "${copt}" = "dev" ] \
      || [ "${copt}" = "lite" ]; then
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${brnch}/g"        ${vBs}/${filIncO}
      wait
      sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${tRee}/g"   ${vBs}/${filIncO}
      wait
      sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${tRee}/g"   ${vBs}/${filIncO}
      wait
      sed -i "s/^_X_VERSION=.*/_X_VERSION=${rlse}/g"           ${vBs}/${filIncO}
      wait
    else
      if [ -e "${vBs}/${filIncO}" ]; then
        sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${brnch}/g"      ${vBs}/${filIncO}
        wait
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${tRee}/g" ${vBs}/${filIncO}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${tRee}/g" ${vBs}/${filIncO}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${rlse}/g"         ${vBs}/${filIncO}
        wait
      fi
      ### Legacy method
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${brnch}/g"        ${vBs}/${octName}
      wait
      sed -i "s/^_BRANCH_PROV.*/_BRANCH_PROVISION=${brnch}/g"  ${vBs}/${octName}
      wait
      if [ "${cmmand}" = "in-2.2" ]; then
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${lgcA}/g" ${vBs}/${octName}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${lgcA}/g" ${vBs}/${octName}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${lgcA}/g"         ${vBs}/${octName}
        wait
      elif [ "${cmmand}" = "in-2.3" ]; then
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${lgcB}/g" ${vBs}/${octName}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${lgcB}/g" ${vBs}/${octName}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${lgcB}/g"         ${vBs}/${octName}
        wait
      elif [ "${cmmand}" = "in-2.4" ] || [ "${copt}" = "2.4" ]; then
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${lgcC}/g" ${vBs}/${filIncO}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${lgcC}/g" ${vBs}/${filIncO}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${lgcC}/g"         ${vBs}/${filIncO}
        wait
      elif [ "${cmmand}" = "in-3.2" ] || [ "${copt}" = "3.2" ]; then
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${lgcD}/g" ${vBs}/${filIncO}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${lgcD}/g" ${vBs}/${filIncO}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${lgcD}/g"         ${vBs}/${filIncO}
        wait
      else
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${tRee}/g" ${vBs}/${filIncO}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${tRee}/g" ${vBs}/${filIncO}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${rlse}/g"         ${vBs}/${filIncO}
        wait
      fi
    fi

    if [ "${cmmand}" = "in-dev" ] \
      || [ "${cmmand}" = "in-lite" ] \
      || [ "${cmmand}" = "in-octopus" ] \
      || [ "${cmmand}" = "in-oct" ] \
      || [ "${cmmand}" = "init" ] \
      || [ "${cmmand}" = "init-dev" ] \
      || [ "${copt}" = "dev" ] \
      || [ "${copt}" = "lite" ]; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${brnch}/g"        ${vBs}/${filIncO}
       wait
    elif [ "${cmmand}" = "in-cluster" ]; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${cluster}/g"      ${vBs}/${filIncO}
      wait
    else
      if [ -e "${vBs}/${filIncO}" ]; then
        sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${brnch}/g"      ${vBs}/${filIncO}
        wait
      fi
      ### Legacy method
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${brnch}/g"        ${vBs}/${octName}
      wait
    fi

    if [ ! -z "${dbip}" ] && [ "${cmmand}" = "in-cluster" ]; then
      if [ "${kind}" = "mstr" ] || [ "${kind}" = "wbhd" ]; then
        if [ -e "${vBs}/${filIncO}" ]; then
          sed -i "s/^_THIS_DB_HOST=.*/_THIS_DB_HOST=${dbip}/g" ${vBs}/${filIncO}
          wait
          sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"           ${vBs}/${filIncO}
          wait
          sed -i "s/^_STRONG_PASS.*/_STRONG_PASSWORDS=YES/g"   ${vBs}/${filIncO}
          wait
        fi
      fi
    fi

    if [ ! -z "${pxyc}" ] && [ ! -z "${pxyi}" ]; then
      if [ -e "/data/conf/global.inc" ]; then
        echo "ProxySQL" > /data/conf/${user}_use_proxysql.txt
      fi
    fi

    bash ${vBs}/${octName}
    wait

    if [ ! -z "${pxyc}" ] && [ ! -z "${pxyi}" ]; then
      if [ -e "/data/disk/${user}/log/octopus_log.txt" ]; then
        echo "ProxySQL" > /data/disk/${user}/log/use_proxysql.txt
        echo "ProxySQL" > /data/conf/clstr.cnf
      fi
    fi

    sed -i "s/^127.0.1.1.*//g" /etc/hosts
    wait
    sed -i "/^$/d" /etc/hosts
    wait
  else
    echo "${octName} installer not available - try again"
    clean_pid_exit
  fi
}

barracuda_install() {
  if [ -e "${vBs}/${barName}" ]; then

    sed -i "s/^127.0.1.1.*//g" /etc/hosts
    wait

    if [ -e "${vBs}/${filIncB}" ]; then
      sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"${email}\"/g"        ${vBs}/${filIncB}
      wait
      sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"               ${vBs}/${filIncB}
      wait
    fi
    ### Legacy method
    sed -i "s/^_MY_EMAIL=.*/_MY_EMAIL=\"${email}\"/g"          ${vBs}/${barName}
    wait
    sed -i "s/^_AUTOPILOT=.*/_AUTOPILOT=YES/g"                 ${vBs}/${barName}
    wait

    if [ "${kind}" = "local" ]; then
      echo "127.0.1.1 aegir.local o1.sub.aegir.local \
        o2.sub.aegir.local o3.sub.aegir.local" >> /etc/hosts
      if [ -e "${vBs}/${filIncB}" ]; then
        sed -i "s/^_EASY_SETUP=.*/_EASY_SETUP=LOCAL/g"         ${vBs}/${filIncB}
        wait
      fi
      ### Legacy method
      sed -i "s/^_EASY_SETUP=.*/_EASY_SETUP=LOCAL/g"           ${vBs}/${barName}
      wait
      ### Legacy variables
      sed -i "s/^_EASY_LOCALHOST=.*/_EASY_LOCALHOST=YES/g"     ${vBs}/${barName}
      wait
      sed -i "s/^_EASY_PUBLIC=.*/_EASY_PUBLIC=NO/g"            ${vBs}/${barName}
      wait
    elif [ "${kind}" = "public" ] && [ ! -z "${fqdn}" ]; then
      if [ -e "${vBs}/${filIncB}" ]; then
        sed -i "s/^_EASY_SETUP=.*/_EASY_SETUP=PUBLIC/g"        ${vBs}/${filIncB}
        wait
        sed -i "s/^_EASY_HOSTNAME=.*/_EASY_HOSTNAME=${fqdn}/g" ${vBs}/${filIncB}
        wait
      fi
      ### Legacy method
      sed -i "s/^_EASY_SETUP=.*/_EASY_SETUP=PUBLIC/g"          ${vBs}/${barName}
      wait
      sed -i "s/^_EASY_HOSTNAME=.*/_EASY_HOSTNAME=${fqdn}/g"   ${vBs}/${barName}
      wait
      ### Legacy variables
      sed -i "s/^_EASY_LOCALHOST=.*/_EASY_LOCALHOST=NO/g"      ${vBs}/${barName}
      wait
      sed -i "s/^_EASY_PUBLIC=.*/_EASY_PUBLIC=YES/g"           ${vBs}/${barName}
      wait
    elif [ "${kind}" = "mstr" ] \
      && [ ! -z "${fqdn}" ] \
      && [ ! -z "${dbip}" ] \
      && [ ! -z "${loip}" ] \
      && [ "${cmmand}" = "in-cluster" ]; then
      touch /root/.mstr.clstr.cnf
      if [ -e "${vBs}/${filIncB}" ]; then
        sed -i "s/^_EASY_SETUP=.*/_EASY_SETUP=MSTR/g"          ${vBs}/${filIncB}
        wait
        sed -i "s/^_EASY_HOSTNAME=.*/_EASY_HOSTNAME=${fqdn}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_THIS_DB_HOST=.*/_THIS_DB_HOST=${dbip}/g"   ${vBs}/${filIncB}
        wait
        sed -i "s/^_MY_OWNIP=.*/_MY_OWNIP=${loip}/g"           ${vBs}/${filIncB}
        wait
      fi
    elif [ "${kind}" = "dbhd" ] \
      && [ ! -z "${fqdn}" ] \
      && [ ! -z "${dbip}" ] \
      && [ ! -z "${loip}" ] \
      && [ "${cmmand}" = "in-cluster" ]; then
      touch /root/.dbhd.clstr.cnf
      if [ -e "${vBs}/${filIncB}" ]; then
        sed -i "s/^_EASY_SETUP=.*/_EASY_SETUP=DBHD/g"          ${vBs}/${filIncB}
        wait
        sed -i "s/^_EASY_HOSTNAME=.*/_EASY_HOSTNAME=${fqdn}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_THIS_DB_HOST=.*/_THIS_DB_HOST=${dbip}/g"   ${vBs}/${filIncB}
        wait
        sed -i "s/^_MY_OWNIP=.*/_MY_OWNIP=${loip}/g"           ${vBs}/${filIncB}
        wait
      fi
    elif [ "${kind}" = "wbhd" ] \
      && [ ! -z "${fqdn}" ] \
      && [ ! -z "${dbip}" ] \
      && [ ! -z "${loip}" ] \
      && [ "${cmmand}" = "in-cluster" ]; then
      touch /root/.wbhd.clstr.cnf
      if [ -e "${vBs}/${filIncB}" ]; then
        sed -i "s/^_EASY_SETUP=.*/_EASY_SETUP=WBHD/g"          ${vBs}/${filIncB}
        wait
        sed -i "s/^_EASY_HOSTNAME=.*/_EASY_HOSTNAME=${fqdn}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_THIS_DB_HOST=.*/_THIS_DB_HOST=${dbip}/g"   ${vBs}/${filIncB}
        wait
        sed -i "s/^_MY_OWNIP=.*/_MY_OWNIP=${loip}/g"           ${vBs}/${filIncB}
        wait
      fi
    else
      if [ -e "${vBs}/${filIncB}" ]; then
        sed -i "s/^_EASY_SETUP=.*/_EASY_SETUP=PUBLIC/g"        ${vBs}/${filIncB}
        wait
        sed -i "s/^_EASY_HOSTNAME=.*/_EASY_HOSTNAME=${fqdn}/g" ${vBs}/${filIncB}
        wait
      fi
      ### Legacy method
      sed -i "s/^_EASY_SETUP=.*/_EASY_SETUP=PUBLIC/g"          ${vBs}/${barName}
      wait
      sed -i "s/^_EASY_HOSTNAME=.*/_EASY_HOSTNAME=${fqdn}/g"   ${vBs}/${barName}
      wait
      ### Legacy variables
      sed -i "s/^_EASY_LOCALHOST=.*/_EASY_LOCALHOST=NO/g"      ${vBs}/${barName}
      wait
      sed -i "s/^_EASY_PUBLIC=.*/_EASY_PUBLIC=YES/g"           ${vBs}/${barName}
      wait
    fi

    if [ ! -z "${fqdn}" ] \
      && [ ! -z "${loip}" ] \
      && [ "${cmmand}" = "in-cluster" ]; then
      if [ "${kind}" = "mstr" ] \
        || [ "${kind}" = "dbhd" ] \
        || [ "${kind}" = "wbhd" ]; then
        sed -i "s/.*${loip}.*${fqdn}.*//g" /etc/hosts
        wait
        echo >>/etc/hosts
        ### echo "${loip} ${fqdn}" >>/etc/hosts
        sed -i "/^$/d" /etc/hosts
        wait
      fi
    fi

    if [ ! -z "${rkey}" ] \
      && [ -e "${vBs}/${filIncB}" ] \
      && [ -e "${vBs}/${filIncO}" ]; then
      if [ "${rkey}" = "php-83" ] || [ "${rkey}" = "php-8.3" ]; then
        sed -i "s/^_PHP_SINGLE_IN.*/_PHP_SINGLE_INSTALL=8.3/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_MULTI_IN.*/_PHP_MULTI_INSTALL=8.3/g"   ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=8.3/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=8.3/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=8.3/g" ${vBs}/${filIncO}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=8.3/g" ${vBs}/${filIncO}
        wait
      elif [ "${rkey}" = "php-82" ] || [ "${rkey}" = "php-8.2" ]; then
        sed -i "s/^_PHP_SINGLE_IN.*/_PHP_SINGLE_INSTALL=8.2/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_MULTI_IN.*/_PHP_MULTI_INSTALL=8.2/g"   ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=8.2/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=8.2/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=8.2/g" ${vBs}/${filIncO}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=8.2/g" ${vBs}/${filIncO}
        wait
      elif [ "${rkey}" = "php-81" ] || [ "${rkey}" = "php-8.1" ]; then
        sed -i "s/^_PHP_SINGLE_IN.*/_PHP_SINGLE_INSTALL=8.1/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_MULTI_IN.*/_PHP_MULTI_INSTALL=8.1/g"   ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=8.1/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=8.1/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=8.1/g" ${vBs}/${filIncO}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=8.1/g" ${vBs}/${filIncO}
        wait
      elif [ "${rkey}" = "php-74" ] || [ "${rkey}" = "php-7.4" ]; then
        sed -i "s/^_PHP_SINGLE_IN.*/_PHP_SINGLE_INSTALL=7.4/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_MULTI_IN.*/_PHP_MULTI_INSTALL=7.4/g"   ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=7.4/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=7.4/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=7.4/g" ${vBs}/${filIncO}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=7.4/g" ${vBs}/${filIncO}
        wait
      elif [ "${rkey}" = "php-all" ] \
        || [ "${rkey}" = "php-min" ] \
        || [ "${rkey}" = "php-max" ]; then
        sed -i "s/^_PHP_SINGLE_IN.*/_PHP_SINGLE_INSTALL=/g"    ${vBs}/${filIncB}
        if [ "${rkey}" = "php-max" ]; then
          pA="5.6 7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2 8.3"
        else
          pA="7.4 8.1 8.2 8.3"
        fi
        sed -i "s/^_PHP_MULT.*/_PHP_MULTI_INSTALL=\"${pA}\"/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=8.1/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=8.1/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=8.1/g" ${vBs}/${filIncO}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=8.1/g" ${vBs}/${filIncO}
        wait
      elif [ "${rkey}" = "nodns" ]; then
        sed -i "s/^_SMTP_RELAY_TEST=.*/_SMTP_RELAY_TEST=NO/g"  ${vBs}/${filIncB}
        wait
        sed -i "s/^_DNS_SETUP_TEST=.*/_DNS_SETUP_TEST=NO/g"    ${vBs}/${filIncB}
        wait
        sed -i "s/^_DNS_SETUP_TEST=.*/_DNS_SETUP_TEST=NO/g"    ${vBs}/${filIncO}
        wait
      else
        sed -i "s/^_NEWRELIC.*/_NEWRELIC_KEY=\"${rkey}\"/g"    ${vBs}/${filIncB}
        wait
      fi
    fi

    if [ ! -z "${rkey}" ] \
      && [ -e "${vBs}/${barName}" ] \
      && [ -e "${vBs}/${octName}" ]; then
      ### Legacy method
      if [ "${rkey}" = "php-83" ] || [ "${rkey}" = "php-8.3" ]; then
        sed -i "s/^_PHP_SINGLE_IN.*/_PHP_SINGLE_INSTALL=8.3/g" ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_MULTI_IN.*/_PHP_MULTI_INSTALL=8.3/g"   ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=8.3/g" ${vBs}/${octName}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=8.3/g" ${vBs}/${octName}
        wait
      elif [ "${rkey}" = "php-82" ] || [ "${rkey}" = "php-8.2" ]; then
        sed -i "s/^_PHP_SINGLE_IN.*/_PHP_SINGLE_INSTALL=8.2/g" ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_MULTI_IN.*/_PHP_MULTI_INSTALL=8.2/g"   ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=8.2/g" ${vBs}/${octName}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=8.2/g" ${vBs}/${octName}
        wait
      elif [ "${rkey}" = "php-81" ] || [ "${rkey}" = "php-8.1" ]; then
        sed -i "s/^_PHP_SINGLE_IN.*/_PHP_SINGLE_INSTALL=8.1/g" ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_MULTI_IN.*/_PHP_MULTI_INSTALL=8.1/g"   ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=8.1/g" ${vBs}/${octName}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=8.1/g" ${vBs}/${octName}
        wait
      elif [ "${rkey}" = "php-74" ] || [ "${rkey}" = "php-7.4" ]; then
        sed -i "s/^_PHP_SINGLE_IN.*/_PHP_SINGLE_INSTALL=7.4/g" ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_MULTI_IN.*/_PHP_MULTI_INSTALL=7.4/g"   ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=7.4/g" ${vBs}/${octName}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=7.4/g" ${vBs}/${octName}
        wait
      elif [ "${rkey}" = "php-all" ] \
        || [ "${rkey}" = "php-min" ] \
        || [ "${rkey}" = "php-max" ]; then
        sed -i "s/^_PHP_SINGLE_IN.*/_PHP_SINGLE_INSTALL=/g"    ${vBs}/${barName}
        if [ "${rkey}" = "php-max" ]; then
          pA="5.6 7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2 8.3"
        else
          pA="7.4 8.1 8.2 8.3"
        fi
        sed -i "s/^_PHP_MULT.*/_PHP_MULTI_INSTALL=\"${pA}\"/g" ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=8.1/g" ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=8.1/g" ${vBs}/${barName}
        wait
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=8.1/g" ${vBs}/${octName}
        wait
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=8.1/g" ${vBs}/${octName}
        wait
      elif [ "${rkey}" = "nodns" ]; then
        sed -i "s/^_SMTP_RELAY_TEST=.*/_SMTP_RELAY_TEST=NO/g"  ${vBs}/${barName}
        wait
        sed -i "s/^_DNS_SETUP_TEST=.*/_DNS_SETUP_TEST=NO/g"    ${vBs}/${barName}
        wait
        sed -i "s/^_DNS_SETUP_TEST=.*/_DNS_SETUP_TEST=NO/g"    ${vBs}/${octName}
        wait
      else
        sed -i "s/^_NEWRELIC.*/_NEWRELIC_KEY=\"${rkey}\"/g"    ${vBs}/${barName}
        wait
      fi
    fi

    if [ "${cmmand}" = "in-dev" ] \
      || [ "${cmmand}" = "in-lite" ] \
      || [ "${cmmand}" = "in-octopus" ] \
      || [ "${cmmand}" = "in-oct" ] \
      || [ "${cmmand}" = "init" ] \
      || [ "${cmmand}" = "init-dev" ]; then
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${brnch}/g"        ${vBs}/${filIncB}
      wait
      sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${tRee}/g"   ${vBs}/${filIncB}
      wait
      sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${tRee}/g"   ${vBs}/${filIncB}
      wait
      sed -i "s/^_X_VERSION=.*/_X_VERSION=${rlse}/g"           ${vBs}/${filIncB}
      wait
    else
      if [ -e "${vBs}/${filIncB}" ]; then
        sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${brnch}/g"      ${vBs}/${filIncB}
        wait
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${tRee}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${tRee}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${rlse}/g"         ${vBs}/${filIncB}
        wait
      fi
      ### Legacy method
      sed -i "s/^_BRANCH_PRN=.*/_BRANCH_PRN=${brnch}/g"        ${vBs}/${barName}
      wait
      sed -i "s/^_BRANCH_PROV.*/_BRANCH_PROVISION=${brnch}/g"  ${vBs}/${barName}
      wait
      if [ "${cmmand}" = "in-2.2" ]; then
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${lgcA}/g" ${vBs}/${barName}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${lgcA}/g" ${vBs}/${barName}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${lgcA}/g"         ${vBs}/${barName}
        wait
      elif [ "${cmmand}" = "in-2.3" ]; then
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${lgcB}/g" ${vBs}/${barName}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${lgcB}/g" ${vBs}/${barName}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${lgcB}/g"         ${vBs}/${barName}
        wait
      elif [ "${cmmand}" = "in-2.4" ]; then
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${lgcC}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${lgcC}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${lgcC}/g"         ${vBs}/${filIncB}
        wait
      elif [ "${cmmand}" = "in-3.2" ]; then
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${lgcD}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${lgcD}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${lgcD}/g"         ${vBs}/${filIncB}
        wait
      else
        sed -i "s/^_AEGIR_VERSION=.*/_AEGIR_VERSION=${tRee}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_AEGIR_XTS_VRN=.*/_AEGIR_XTS_VRN=${tRee}/g" ${vBs}/${filIncB}
        wait
        sed -i "s/^_X_VERSION=.*/_X_VERSION=${rlse}/g"         ${vBs}/${filIncB}
        wait
      fi
    fi

    if [ "${cmmand}" = "in-dev" ] \
      || [ "${cmmand}" = "in-lite" ] \
      || [ "${cmmand}" = "in-octopus" ] \
      || [ "${cmmand}" = "in-oct" ] \
      || [ "${cmmand}" = "init" ] \
      || [ "${cmmand}" = "init-dev" ]; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${brnch}/g"        ${vBs}/${filIncB}
      wait
    elif [ "${cmmand}" = "in-cluster" ]; then
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${cluster}/g"      ${vBs}/${filIncB}
      wait
    else
      if [ -e "${vBs}/${filIncB}" ]; then
        sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${brnch}/g"      ${vBs}/${filIncB}
        wait
      fi
      ### Legacy method
      sed -i "s/^_BRANCH_BOA=.*/_BRANCH_BOA=${brnch}/g"        ${vBs}/${barName}
      wait
    fi

    if [ "${cmmand}" = "init" ] || [ "${cmmand}" = "init-dev" ]; then
      if [ "${mode}" = "devuan" ] || [ "${mode}" = "daedalus" ]; then
        touch /root/.run.devuan.os.upgrade.on.init.cnf
        touch /root/.run.daedalus.os.upgrade.on.init.cnf
      elif [ "${mode}" = "chimaera" ]; then
        touch /root/.run.devuan.os.upgrade.on.init.cnf
        touch /root/.run.chimaera.os.upgrade.on.init.cnf
      fi
    fi

    if [ -e "${vBs}/${barName}" ]; then
      bash ${vBs}/${barName}
      wait
    fi
  else
    echo "${barName} installer not available - try again"
    clean_pid_exit
  fi
}

init_start() {
  if [ -e "/var/run/boa_run.pid" ]; then
    echo
    echo "  Another BOA installer is running probably"
    echo "  because /var/run/boa_run.pid exists"
    echo
    exit 1
  elif [ -e "/var/run/boa_wait.pid" ]; then
    echo
    echo "  Some important system task is running probably"
    echo "  because /var/run/boa_wait.pid exists"
    echo
    exit 1
  else
    touch /var/run/boa_run.pid
    touch /var/run/boa_wait.pid
    mkdir -p ${vBs}
    cd ${vBs}
    rm -f ${vBs}/*.sh.cnf*
    rm -f ${vBs}/BARRACUDA.sh*
    rm -f ${vBs}/OCTOPUS.sh*
  fi
}

set_pin_priority() {
  if [ ! -e "/etc/apt/preferences" ] && [ -e "/etc/issue.net" ]; then
    _IS_DEVUAN=$(grep "Devuan" /etc/issue.net 2>&1)
    _IS_DEBIAN=$(grep "Debian" /etc/issue.net 2>&1)
    if [[ "${_IS_DEVUAN}" =~ "Devuan" ]]; then
      _THIS_OS=Devuan
    elif [[ "${_IS_DEBIAN}" =~ "Debian" ]]; then
      _THIS_OS=Debian
    fi
    if [ "${_THIS_OS}" = "Devuan" ]; then
      curl ${crlGet} "${urlHmr}/conf/etc-apt-preferences-devuan.txt" \
        -o /etc/apt/preferences
    elif [ "${_THIS_OS}" = "Debian" ]; then
      curl ${crlGet} "${urlHmr}/conf/etc-apt-preferences-debian.txt" \
        -o /etc/apt/preferences
    fi
  fi
}

init_finish() {
  rm -f /root/BOA.sh*
  [ -e "/var/run/boa_run.pid" ] && rm -f /var/run/boa_run.pid
  [ -e "/var/run/boa_wait.pid" ] && rm -f /var/run/boa_wait.pid
  [ -e "/var/run/manage_ltd_users.pid" ] && rm -f /var/run/manage_ltd_users.pid
  [ -e "/var/run/manage_rvm_users.pid" ] && rm -f /var/run/manage_rvm_users.pid
  if [ ! -e "/root/.run.devuan.os.upgrade.on.init.cnf" ]; then
    rm -f ${vBs}/*.sh.cnf*
    rm -f ${vBs}/BARRACUDA.sh*
    rm -f ${vBs}/OCTOPUS.sh*
  fi
  echo
  rm -rf /opt/tmp/*
  echo BOA ${cmmand} completed
  echo Bye
  echo
  exit 0
}

init_setup() {
  if [ "${kind}" = "local" ]; then
    if [ "${email}" = "ask" ] \
      || [ "${email}" = "mini" ] \
      || [ "${email}" = "max" ] \
      || [ "${email}" = "none" ]; then
      mode="${email}"
    else
      mode=
    fi
    if [ ! -z "${mode}" ] && [ ! -z "${user}" ]; then
      rkey="${user}"
    else
      rkey="${email}"
    fi
    email="${fqdn}"
    user="o1"
  fi
  if [ "${kind}" = "public" ] \
    || [ "${kind}" = "backdrop" ] \
    || [ "${kind}" = "cluster" ] \
    || [ "${kind}" = "drush" ] \
    || [ "${kind}" = "gravcms" ] \
    || [ "${kind}" = "jessie" ] \
    || [ "${kind}" = "system" ]; then
    if [ "${kind}" != "public" ]; then
      silent="${kind}"
      echo "FEATURE MODE: ${silent}"
      master="feature/${silent}"
      branch="feature/${silent}"
    else
      silent=
    fi
    kind="public"
    if [ "${user}" = "ask" ] \
      || [ "${user}" = "mini" ] \
      || [ "${user}" = "max" ] \
      || [ "${user}" = "none" ]; then
      rkey="${mode}"
      mode="${user}"
      user="o1"
    fi
    satellite_check_id ${user}
  fi

  if [[ "${cmmand}" =~ "in-2." ]] || [ "${copt}" = "2.4" ]; then
    if [ "${cmmand}" = "in-2.4" ] || [ "${copt}" = "2.4" ]; then
      branch="2.4.x-dev"
    elif [ "${cmmand}" = "in-2.3" ]; then
      branch="2.3.x-dev"
    elif [ "${cmmand}" = "in-2.2" ]; then
      branch="2.2.x-legacy"
    fi
  fi
  if [[ "${cmmand}" =~ "in-3." ]] || [ "${copt}" = "3.2" ]; then
    if [ "${cmmand}" = "in-3.2" ] || [ "${copt}" = "3.2" ]; then
      branch="3.2.x-dev"
    fi
  fi

  init_start
  #set_pin_priority

  rlsn="BOA-5.2.0"
  rlse="${rlsn}-${tRee}"
  cluster="${rlse}"
  lgcA="BOA-2.2.9"
  lgcB="BOA-2.3.8"
  lgcC="BOA-2.4.9"
  lgcD="BOA-3.2.2"
  branch="5.x-${tRee}"
  brnch=${branch//\//\\\/}

  export tRee="${tRee}"
  export rlsn="${rlsn}"

  if [ "${cmmand}" = "in-dev" ] \
    || [ "${cmmand}" = "in-lite" ] \
    || [ "${cmmand}" = "init" ] \
    || [ "${cmmand}" = "init-dev" ]; then
    if [ ! -z "${silent}" ]; then
      curl ${crlGet} "${rgUrl}/feature/${silent}/${barName}" -o ${vBs}/${barName}
      curl ${crlGet} "${rgUrl}/feature/${silent}/${octName}" -o ${vBs}/${octName}
      curl ${crlGet} "${rgUrl}/feature/${silent}/${pthIncB}" -o ${vBs}/${filIncB}
      curl ${crlGet} "${rgUrl}/feature/${silent}/${pthIncO}" -o ${vBs}/${filIncO}
    else
      curl ${crlGet} "${rgUrl}/${brnch}/${barName}"  -o ${vBs}/${barName}
      curl ${crlGet} "${rgUrl}/${brnch}/${octName}"  -o ${vBs}/${octName}
      curl ${crlGet} "${rgUrl}/${brnch}/${pthIncB}"  -o ${vBs}/${filIncB}
      curl ${crlGet} "${rgUrl}/${brnch}/${pthIncO}"  -o ${vBs}/${filIncO}
    fi
  elif [ "${cmmand}" = "in-cluster" ]; then
    curl ${crlGet} "${rgUrl}/${cluster}/${barName}" -o ${vBs}/${barName}
    curl ${crlGet} "${rgUrl}/${cluster}/${octName}" -o ${vBs}/${octName}
    curl ${crlGet} "${rgUrl}/${cluster}/${pthIncB}" -o ${vBs}/${filIncB}
    curl ${crlGet} "${rgUrl}/${cluster}/${pthIncO}" -o ${vBs}/${filIncO}
  elif [ "${cmmand}" = "in-octopus" ] \
    || [ "${cmmand}" = "in-oct" ]; then
    if [ "${copt}" = "dev" ]; then
      octb="${brnch}"
    elif [ "${copt}" = "lite" ]; then
      octb="${brnch}"
    elif [ "${copt}" = "3.2" ]; then
      octb="${lgcD}"
    elif [ "${copt}" = "2.4" ]; then
      octb="${lgcC}"
    fi
    curl ${crlGet} "${rgUrl}/${octb}/${barName}"    -o ${vBs}/${barName}
    curl ${crlGet} "${rgUrl}/${octb}/${octName}"    -o ${vBs}/${octName}
    curl ${crlGet} "${rgUrl}/${octb}/${pthIncB}"    -o ${vBs}/${filIncB}
    curl ${crlGet} "${rgUrl}/${octb}/${pthIncO}"    -o ${vBs}/${filIncO}
  elif [ "${cmmand}" = "in-3.2" ]; then
    curl ${crlGet} "${rgUrl}/${lgcD}/${barName}"    -o ${vBs}/${barName}
    curl ${crlGet} "${rgUrl}/${lgcD}/${octName}"    -o ${vBs}/${octName}
    curl ${crlGet} "${rgUrl}/${lgcD}/${pthIncB}"    -o ${vBs}/${filIncB}
    curl ${crlGet} "${rgUrl}/${lgcD}/${pthIncO}"    -o ${vBs}/${filIncO}
  elif [ "${cmmand}" = "in-2.4" ]; then
    curl ${crlGet} "${rgUrl}/${lgcC}/${barName}"    -o ${vBs}/${barName}
    curl ${crlGet} "${rgUrl}/${lgcC}/${octName}"    -o ${vBs}/${octName}
    curl ${crlGet} "${rgUrl}/${lgcC}/${pthIncB}"    -o ${vBs}/${filIncB}
    curl ${crlGet} "${rgUrl}/${lgcC}/${pthIncO}"    -o ${vBs}/${filIncO}
  elif [ "${cmmand}" = "in-2.3" ]; then
    curl ${crlGet} "${rgUrl}/${lgcB}/${barName}"    -o ${vBs}/${barName}
    curl ${crlGet} "${rgUrl}/${lgcB}/${octName}"    -o ${vBs}/${octName}
  elif [ "${cmmand}" = "in-2.2" ]; then
    curl ${crlGet} "${rgUrl}/${lgcA}/${barName}"    -o ${vBs}/${barName}
    curl ${crlGet} "${rgUrl}/${lgcA}/${octName}"    -o ${vBs}/${octName}
  fi
  if [ "${sql}" = "percona" ]; then
    sed -i "s/^_DB_SERIES=.*/_DB_SERIES=5.7/g"         ${vBs}/${filIncB}
    wait
    sed -i "s/^_DB_SERVER=.*/_DB_SERVER=Percona/g"     ${vBs}/${filIncB}
    wait
  elif [ "${sql}" = "mariadb" ]; then
    sed -i "s/^_DB_SERIES=.*/_DB_SERIES=10.2/g"        ${vBs}/${filIncB}
    wait
    sed -i "s/^_DB_SERVER=.*/_DB_SERVER=MariaDB/g"     ${vBs}/${filIncB}
    wait
  fi
  if [ -e "/root/.debug-boa-installer.cnf" ]; then
    sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g"       ${vBs}/${filIncB}
    wait
    sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g"       ${vBs}/${filIncO}
    wait
  else
    sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=NO/g"        ${vBs}/${filIncB}
    wait
    sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=NO/g"        ${vBs}/${filIncO}
    wait
  fi
  if [ -e "/root/.debug-barracuda-installer.cnf" ]; then
    sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g"       ${vBs}/${filIncB}
    wait
  else
    sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=NO/g"        ${vBs}/${filIncB}
    wait
  fi
  if [ -e "/root/.debug-octopus-installer.cnf" ]; then
    sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g"       ${vBs}/${filIncO}
    wait
  else
    sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=NO/g"        ${vBs}/${filIncO}
    wait
  fi
  if [ "${cmmand}" = "in-octopus" ] || [ "${cmmand}" = "in-oct" ]; then
    _OCTOPUS_ONLY=YES
  else
    barracuda_install
  fi
  if [ "${kind}" != "dbhd" ]; then
    if [ "${cmmand}" != "init" ] && [ "${cmmand}" != "init-dev" ]; then
      octopus_install
    fi
  fi
  init_finish
}

find_fast_mirror_early() {
  isNetc=$(which netcat 2>&1)
  if [ ! -x "${isNetc}" ] || [ -z "${isNetc}" ]; then
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
    fi
    apt_clean_update
    apt-get install netcat ${aptYesUnth} &> /dev/null
    apt-get install netcat-traditional ${aptYesUnth} &> /dev/null
    wait
  fi
  ffMirr=$(which ffmirror 2>&1)
  if [ -x "${ffMirr}" ]; then
    ffList="/var/backups/boa-mirrors-2024-01.txt"
    mkdir -p /var/backups
    if [ ! -e "${ffList}" ]; then
      echo "de.files.aegir.cc"  > ${ffList}
      echo "ny.files.aegir.cc" >> ${ffList}
      echo "sg.files.aegir.cc" >> ${ffList}
    fi
    if [ -e "${ffList}" ]; then
      _BROKEN_FFMIRR_TEST=$(grep "stuff" ${ffMirr} 2>&1)
      if [[ "${_BROKEN_FFMIRR_TEST}" =~ "stuff" ]]; then
        _CHECK_MIRROR=$(bash ${ffMirr} < ${ffList} 2>&1)
        _USE_MIR="${_CHECK_MIRROR}"
        [[ "${_USE_MIR}" =~ "printf" ]] && _USE_MIR="files.aegir.cc"
      else
        _USE_MIR="files.aegir.cc"
      fi
    else
      _USE_MIR="files.aegir.cc"
    fi
  else
    _USE_MIR="files.aegir.cc"
  fi
  urlDev="http://${_USE_MIR}/dev"
  urlHmr="http://${_USE_MIR}/versions/${tRee}/boa/aegir"
}

if_reinstall_curl() {
  _CURL_VRN=8.7.1
  isCurl=$(curl --version 2>&1)
  if [[ ! "${isCurl}" =~ "OpenSSL" ]] || [ -z "${isCurl}" ]; then
    echo "OOPS: cURL is broken! Re-installing.."
    rm -f /etc/apt/sources.list.d/openssl.list
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
    fi
    echo "curl install" | dpkg --set-selections &> /dev/null
    apt_clean_update
    apt-get remove curl ${aptYesUnth} &> /dev/null
    apt-get install curl ${aptYesUnth} &> /dev/null
    ldconfig &> /dev/null
    if [ -f "/usr/bin/curl" ]; then
      isCurl=$(/usr/bin/curl --version 2>&1)
      if [[ ! "${isCurl}" =~ "OpenSSL" ]] || [ -z "${isCurl}" ]; then
        echo "OOPS: /usr/bin/curl is still broken, uninstalling.."
        apt-get remove curl ${aptYesUnth} &> /dev/null
      else
        echo "GOOD: /usr/bin/curl works"
      fi
    fi
    mkdir -p /var/opt
    rm -rf /var/opt/curl*
    cd /var/opt
    wget http://files.aegir.cc/dev/src/curl-${_CURL_VRN}.tar.gz &> /dev/null
    tar -xzf curl-${_CURL_VRN}.tar.gz &> /dev/null
    cd /var/opt/curl-${_CURL_VRN}
    sh ./configure --with-ssl --prefix=/usr/local &> /dev/null
    make -j $(nproc) --quiet &> /dev/null
    make --quiet install &> /dev/null
    if [ -f "/usr/local/bin/curl" ]; then
      isCurl=$(/usr/local/bin/curl --version 2>&1)
      if [[ ! "${isCurl}" =~ "OpenSSL" ]] || [ -z "${isCurl}" ]; then
        echo "ERRR: /usr/local/bin/curl is broken, moving to /usr/local/bin/curl--broken"
        rm -f /usr/local/bin/curl--broken
        mv -f /usr/local/bin/curl /usr/local/bin/curl--broken
      else
        echo "GOOD: /usr/local/bin/curl works"
      fi
    fi
  fi
}

check_dns_curl() {
  if [ ! -e "/etc/resolv.conf" ]; then
    rm -f /etc/resolv.conf
    if [ -e "${vBs}/resolv.conf.vanilla" ]; then
      cat ${vBs}/resolv.conf.vanilla >/etc/resolv.conf
    fi
    echo "nameserver 1.1.1.1" >>/etc/resolv.conf
    echo "nameserver 1.0.0.1" >>/etc/resolv.conf
    check_dns_settings
  else
    check_dns_settings
  fi
  if [ -d "/var/cache/pdnsd" ] \
    && [ -e "/etc/resolvconf/run/interface/lo.pdnsd" ]; then
    pdnsd-ctl empty-cache &> /dev/null
  fi
  find_fast_mirror_early
  if_reinstall_curl
  _CURL_TEST=$(curl -L -k -s \
    --max-redirs 10 \
    --retry 3 \
    --retry-delay 10 \
    -I "http://${_USE_MIR}" 2> /dev/null)
  if [[ ! "${_CURL_TEST}" =~ "200 OK" ]]; then
    if [[ "${_CURL_TEST}" =~ "unknown option was passed in to libcurl" ]]; then
      echo "ERROR: cURL libs are out of sync! Re-installing again.."
      if_reinstall_curl
    else
      echo "ERROR: ${_USE_MIR} is not available, please try later"
      clean_pid_exit
    fi
  fi
}

csf_check_fix() {
  if [ -x "/usr/sbin/csf" ] \
    && [ -e "/etc/csf/csf.deny" ] \
    && [ ! -x "/etc/csf/csfpost.sh" ]; then
    echo "" > /etc/csf/csfpost.sh
    echo "iptables -t raw -A PREROUTING -p tcp --dport 21 -j CT --helper ftp" >> /etc/csf/csfpost.sh
    echo "iptables -t raw -A OUTPUT -p tcp --dport 21 -j CT --helper ftp" >> /etc/csf/csfpost.sh
    chmod 700 /etc/csf/csfpost.sh
    sed -i "s/.*aegir.*//g" /etc/csf/csf.allow
    csf -a 94.237.26.49    de.files.aegir.cc  &> /dev/null
    csf -a 209.151.150.175 ny.files.aegir.cc  &> /dev/null
    csf -a 95.111.194.246  sg.files.aegir.cc  &> /dev/null
    service lfd stop &> /dev/null
    wait
    kill -9 $(ps aux | grep '[C]onfigServer' | awk '{print $2}') &> /dev/null
    killall sleep &> /dev/null
    rm -f /etc/csf/csf.error
    csf -x  &> /dev/null
    wait
    service clean-boa-env start &> /dev/null
    wait
    csf -uf &> /dev/null
    wait
    _NFTABLES_TEST=$(iptables -V 2>&1)
    if [[ "${_NFTABLES_TEST}" =~ "nf_tables" ]]; then
      if [ -e "/usr/sbin/iptables-legacy" ]; then
        update-alternatives --set iptables /usr/sbin/iptables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/ip6tables-legacy" ]; then
        update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/arptables-legacy" ]; then
        update-alternatives --set arptables /usr/sbin/arptables-legacy &> /dev/null
      fi
      if [ -e "/usr/sbin/ebtables-legacy" ]; then
        update-alternatives --set ebtables /usr/sbin/ebtables-legacy &> /dev/null
      fi
    fi
    csf -e  &> /dev/null
    wait
    sed -i "s/.*DHCP.*//g" /etc/csf/csf.allow
    wait
    sed -i "/^$/d" /etc/csf/csf.allow
    _DHCP_TEST=$(grep DHCPREQUEST /var/log/syslog | cut -d ' ' -f13 | sort | uniq 2>&1)
    if [[ "${_DHCP_TEST}" =~ "port" ]]; then
      for _IP in `grep DHCPREQUEST /var/log/syslog | cut -d ' ' -f12 | sort | uniq`;do echo "udp|out|d=67|d=${_IP} # Local DHCP out" >> /etc/csf/csf.allow;done
    else
      for _IP in `grep DHCPREQUEST /var/log/syslog | cut -d ' ' -f13 | sort | uniq`;do echo "udp|out|d=67|d=${_IP} # Local DHCP out" >> /etc/csf/csf.allow;done
    fi
    service lfd start &> /dev/null
    wait
    ### Linux kernel TCP SACK CVEs mitigation
    ### CVE-2019-11477 SACK Panic
    ### CVE-2019-11478 SACK Slowness
    ### CVE-2019-11479 Excess Resource Consumption Due to Low MSS Values
    if [ -x "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
      _SACK_TEST=$(ip6tables --list | grep tcpmss 2>&1)
      if [[ ! "${_SACK_TEST}" =~ "tcpmss" ]]; then
        sysctl net.ipv4.tcp_mtu_probing=0 &> /dev/null
        iptables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
        ip6tables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
      fi
    fi
  fi
}

check_root() {
  if [ `whoami` = "root" ]; then
    if [ -e "${barCnf}" ]; then
      if [ -e "/root/.debug-boa-installer.cnf" ] \
        || [ -e "/root/.debug-barracuda-installer.cnf" ]; then
        sed -i "s/^_DEBUG_MODE=.*/_DEBUG_MODE=YES/g" ${barCnf}
      fi
      source ${barCnf}
      _B_NICE=${_B_NICE//[^0-9]/}
    fi
    if [ -z "${_B_NICE}" ]; then
      _B_NICE=10
    fi
    renice ${_B_NICE} -p $$ &> /dev/null
    if [ "${cmmand}" = "in-octopus" ] || [ "${cmmand}" = "in-oct" ]; then
      system_check_ready
    else
      if [ ! -e "/root/.force.reinstall.cnf" ]; then
        system_check_clean
      fi
    fi
    csf_check_fix
    chmod a+w /dev/null
    if [ ! -e "/dev/fd" ]; then
      if [ -e "/proc/self/fd" ]; then
        rm -rf /dev/fd
        ln -s /proc/self/fd /dev/fd
      fi
    fi
    sed -i "s/.*173.231.133.190.*//g" /etc/hosts
    wait
    sed -i "s/^127.0.0.1.*/127.0.0.1 localhost/g" /etc/hosts
    wait
    sed -i "s/.*files.aegir.cc.*//g" /etc/hosts
    wait
    sed -i "s/.*github.*//g" /etc/hosts
    wait
    echo >>/etc/hosts
    sed -i "/^$/d" /etc/hosts
    wait
  else
    echo "ERROR: This script should be ran as a root user"
    clean_pid_exit
  fi
  _DF_TEST=$(df -kTh / -l \
    | grep '/' \
    | sed 's/\%//g' \
    | awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "${_DF_TEST}" ] && [ "${_DF_TEST}" -gt "90" ]; then
    echo "ERROR: Your disk space is almost full !!! ${_DF_TEST}/100"
    echo "ERROR: We can not proceed until it is below 90/100"
    clean_pid_exit
  fi
  if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
    && [ -e "/etc/apt/apt.conf.d" ]; then
    echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
  fi
  if [ "${_VMFAMILY}" = "VS" ]; then
    if [ ! -e "/etc/apt/preferences.d/fuse" ]; then
      mkdir -p /etc/apt/preferences.d/
      echo -e 'Package: fuse\nPin: release *\nPin-Priority: -1' > /etc/apt/preferences.d/fuse
      apt_clean_update
    fi
    if [ ! -e "/etc/apt/preferences.d/udev" ]; then
      mkdir -p /etc/apt/preferences.d/
      echo -e 'Package: udev\nPin: release *\nPin-Priority: -1' > /etc/apt/preferences.d/udev
      apt_clean_update
    fi
    if [ ! -e "/etc/apt/preferences.d/makedev" ]; then
      mkdir -p /etc/apt/preferences.d/
      echo -e 'Package: makedev\nPin: release *\nPin-Priority: -1' > /etc/apt/preferences.d/makedev
      apt_clean_update
    fi
    apt-get remove fuse -y -qq &> /dev/null
    apt-get purge fuse -y -qq &> /dev/null
    apt-get remove udev -y -qq &> /dev/null
    apt-get purge udev -y -qq &> /dev/null
    apt-get remove makedev -y -qq &> /dev/null
    apt-get purge makedev -y -qq &> /dev/null
    if [ -e "/sbin/hdparm" ]; then
      apt-get remove hdparm -y -qq &> /dev/null
      apt-get purge hdparm -y -qq &> /dev/null
    fi
    if [ -e "/sbin/auditd" ]; then
      apt-get remove auditd -y -qq &> /dev/null
      apt-get purge auditd -y -qq &> /dev/null
    fi
    _REMOVE_LINKS="buagent \
                   checkroot.sh \
                   fancontrol \
                   halt \
                   hwclock.sh \
                   hwclockfirst.sh \
                   ifupdown \
                   ifupdown-clean \
                   kerneloops \
                   klogd \
                   mountall-bootclean.sh \
                   mountall.sh \
                   mountdevsubfs.sh \
                   mountkernfs.sh \
                   mountnfs-bootclean.sh \
                   mountnfs.sh \
                   mountoverflowtmp \
                   mountvirtfs \
                   mtab.sh \
                   networking \
                   procps \
                   reboot \
                   sendsigs \
                   setserial \
                   svscan \
                   sysstat \
                   umountfs \
                   umountnfs.sh \
                   umountroot \
                   urandom \
                   vnstat"
    for link in ${_REMOVE_LINKS}; do
      if [ -e "/etc/init.d/${link}" ]; then
        update-rc.d -f ${link} remove &> /dev/null
        mv -f /etc/init.d/${link} /var/backups/init.d.${link}
      fi
    done
    for s in cron dbus ssh; do
      if [ -e "/etc/init.d/${s}" ]; then
        sed -rn -e 's/^(# Default-Stop:).*$/\1 0 1 6/' -e '/^### BEGIN INIT INFO/,/^### END INIT INFO/p' /etc/init.d/${s} > /etc/insserv/overrides/${s}
      fi
    done
    /sbin/insserv -v -d &> /dev/null
  fi
}

display_version() {
  if [ `whoami` = "root" ]; then
    _VIRT_TOOL=$(which virt-what 2> /dev/null)
    if [ -x "${_VIRT_TOOL}" ]; then
      _VIRT_TEST=$(virt-what 2> /dev/null)
      _VIRT_TEST=$(echo -n ${_VIRT_TEST} | fmt -su -w 2500 2>&1)
      if [ ! -e "/root/.allow.any.virt.cnf" ]; then
        if [ -e "/proc/self/status" ]; then
          _VS_GUEST_TEST=$(grep -E "VxID:[[:space:]]*[0-9]{2,}$" /proc/self/status 2> /dev/null)
          _VS_HOST_TEST=$(grep -E "VxID:[[:space:]]*0$" /proc/self/status 2> /dev/null)
        fi
        if [ ! -z "${_VS_HOST_TEST}" ] || [ ! -z "${_VS_GUEST_TEST}" ]; then
          if [ -z "${_VS_HOST_TEST}" ] && [ ! -z "${_VS_GUEST_TEST}" ]; then
            _VIRT_IS="Linux VServer guest"
          else
            if [ ! -z "${_VS_HOST_TEST}" ]; then
              _VIRT_IS="Linux VServer host"
            else
              _VIRT_IS="unknown / not a virtual machine"
            fi
          fi
        else
          if [ -z "${_VIRT_TEST}" ] \
            || [ "${_VIRT_TEST}" = "0" ] \
            || [ "${_VIRT_TEST}" = " " ]; then
            _VIRT_IS="unknown / not a virtual machine"
          elif [[ "${_VIRT_TEST}" =~ "xen-dom0" ]]; then
            _VIRT_IS="Xen privileged domain"
          elif [[ "${_VIRT_TEST}" =~ "linux_vserver-host" ]]; then
            _VIRT_IS="Linux VServer host"
          else
            if [[ "${_VIRT_TEST}" =~ "xen xen-hvm" ]]; then
              _VIRT_TEST="xen-hvm"
            elif [[ "${_VIRT_TEST}" =~ "xen xen-domU" ]]; then
              _VIRT_TEST="xen-domU"
            elif [[ "${_VIRT_TEST}" =~ "virtualbox kvm" ]]; then
              _VIRT_TEST="virtualbox"
            elif [[ "${_VIRT_TEST}" =~ "hyperv qemu" ]]; then
              _VIRT_TEST="hyperv"
            elif [[ "${_VIRT_TEST}" =~ "kvm aws" ]]; then
              _VIRT_TEST="kvm"
            elif [[ "${_VIRT_TEST}" =~ "openvz lxc" ]]; then
              _VIRT_TEST="openvz"
            fi
            case "${_VIRT_TEST}" in
              hyperv)      _VIRT_IS="Microsoft Hyper-V" ;;
              kvm)         _VIRT_IS="Linux KVM guest" ;;
              lxc)         _VIRT_IS="Linux Containers (LXC)" ;;
              openvz)      _VIRT_IS="OpenVZ Containers" ;;
              parallels)   _VIRT_IS="Parallels guest" ;;
              virtualbox)  _VIRT_IS="VirtualBox guest" ;;
              vmware)      _VIRT_IS="VMware ESXi guest" ;;
              xen-domU)    _VIRT_IS="Xen paravirtualized guest domain" ;;
              xen-hvm)     _VIRT_IS="Xen guest fully virtualized (HVM)" ;;
              xen)         _VIRT_IS="Xen guest" ;;
              *)  _VIRT_IS="${_VIRT_TEST} not supported"
              ;;
            esac
          fi
        fi
      else
        if [ -z "${_VIRT_TEST}" ] \
          || [ "${_VIRT_TEST}" = "0" ] \
          || [ "${_VIRT_TEST}" = " " ]; then
          _VIRT_IS="unknown / not a virtual machine"
        fi
        _VIRT_IS="${_VIRT_TEST} not supported"
      fi
    fi
    thiSys="$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)/$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1) $(uname -m 2>&1)"
    if [ -e "/var/log/barracuda_log.txt" ]; then
      crlBoav=`tail --lines=1 /var/log/barracuda_log.txt \
        | cut -d '/' -f4 \
        | sed "s/ Barracuda //g"`
      crlBoav=${crlBoav//[^a-zA-Z0-9-.]/}
    fi
    echo "${crlBoav} on ${thiSys} on ${_VIRT_IS}"
    exit 0
  else
    echo "ERROR: This script should be ran as a root user"
    exit 1
  fi
}

display_info() {
  if [ `whoami` = "root" ]; then
    _CPU_INFO=$(grep -c processor /proc/cpuinfo 2>&1)
    _CPU_INFO=${_CPU_INFO//[^0-9]/}
    _NPROC_TEST=$(which nproc 2>&1)
    if [ -z "${_NPROC_TEST}" ]; then
      _CPU_NR="${_CPU_INFO}"
    else
      _CPU_NR=$(nproc 2>&1)
    fi
    _CPU_NR=${_CPU_NR//[^0-9]/}
    if [ ! -z "${_CPU_NR}" ] \
      && [ ! -z "${_CPU_INFO}" ] \
      && [ "${_CPU_NR}" -gt "${_CPU_INFO}" ] \
      && [ "${_CPU_INFO}" -gt "0" ]; then
      _CPU_NR="${_CPU_INFO}"
    fi
    _DF_TEST=$(df -kTh / -l \
      | grep '/' \
      | sed 's/\%//g' \
      | awk '{print $6}' 2> /dev/null)
    _DF_TEST=${_DF_TEST//[^0-9]/}
    if [ -x "/usr/sbin/nginx" ]; then
      _NGX=$(/usr/sbin/nginx -v 2>&1 \
        | tr -d "\n" \
        | cut -d" " -f4 \
        | awk '{ print $1}' \
        | cut -d"/" -f2 \
        | awk '{ print $1}' 2>&1)
      if [ -z "${_NGX}" ]; then
        _NGX=$(/usr/sbin/nginx -v 2>&1 \
          | tr -d "\n" \
          | cut -d" " -f3 \
          | awk '{ print $1}' \
          | cut -d"/" -f2 \
          | awk '{ print $1}' 2>&1)
      fi
    fi
    if [ -x "/usr/bin/php-cli" ]; then
      _PHP=$(/usr/bin/php-cli -v | grep 'PHP 7' \
        | cut -d: -f1 | awk '{ print $2}' 2>&1)
      if [ -z "${_PHP}" ]; then
        _PHP=$(/usr/bin/php-cli -v | grep 'PHP 5' \
          | cut -d: -f1 | awk '{ print $2}' 2>&1)
      fi
      if [ -z "${_PHP}" ]; then
        _PHP=$(/usr/bin/php-cli -v | grep 'PHP 8' \
          | cut -d: -f1 | awk '{ print $2}' 2>&1)
      fi
    fi
    _DBV=$(mysql -V 2>&1 \
      | tr -d "\n" \
      | cut -d" " -f6 \
      | awk '{ print $1}' \
      | cut -d"-" -f1 \
      | awk '{ print $1}' \
      | sed "s/[\,']//g" 2>&1)
    if [ -x "/usr/bin/proxysql" ]; then
      _PXY=$(proxysql --version 2>&1 \
        | tr -d "\n" \
        | cut -d"-" -f1 \
        | awk '{ print $3}' 2>&1)
    fi
    if [ -x "/usr/bin/redis-server" ]; then
      _RDS=$(redis-server -v 2>&1 \
        | tr -d "\n" \
        | cut -d" " -f4 \
        | awk '{ print $1}' 2>&1)
      if [[ "${_RDS}" =~ "sha" ]]; then
        _RDS=$(redis-server -v 2>&1 \
          | tr -d "\n" \
          | tr -d "v=" \
          | cut -d" " -f3 \
          | awk '{ print $1}' 2>&1)
      fi
    fi
    if [ -e "/root/.install.modern.openssl.cnf" ] \
      && [ -x "/usr/local/ssl3/bin/openssl" ]; then
      _SSL_BINARY=/usr/local/ssl3/bin/openssl
    else
      _SSL_BINARY=/usr/local/ssl/bin/openssl
    fi
    _SSL=$(${_SSL_BINARY} version 2>&1 \
      | tr -d "\n" \
      | cut -d" " -f2 \
      | awk '{ print $1}' 2>&1)
    _CRL=$(curl --version 2>&1 \
      | tr -d "\n" \
      | cut -d" " -f2 \
      | awk '{ print $1}' 2>&1)
    _SHD=$(ssh -V 2>&1 \
      | tr -d "\n" \
      | tr -d "," \
      | cut -d"_" -f2 \
      | awk '{ print $1}' 2>&1)
    _SSH=$(ssh -V 2>&1)
    _RAM=$(free -mt | grep Mem: | awk '{ print $2 }' 2>&1)
    [ "${mode}" = "clear" ] && clear
    echo
    thiSys="$(lsb_release -ar 2>/dev/null | grep -i distributor | cut -s -f2 2>&1)/$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1) $(uname -m 2>&1)"
    if [ -e "/var/log/barracuda_log.txt" ]; then
      _AUT=$(grep _AUTOPILOT ${barCnf} 2>&1)
      _BIL=$(grep _BACKEND_ITEMS_LIST ${barCnf} 2>&1)
      _CCC=$(grep _CUSTOM_CONFIG_CSF ${barCnf} 2>&1)
      _CCL=$(grep _CUSTOM_CONFIG_LSHELL ${barCnf} 2>&1)
      _CCR=$(grep _CUSTOM_CONFIG_REDIS ${barCnf} 2>&1)
      _CCS=$(grep _CUSTOM_CONFIG_SQL ${barCnf} 2>&1)
      _DBG=$(grep _DEBUG_MODE ${barCnf} 2>&1)
      _DBS=$(grep _DB_SERIES ${barCnf} 2>&1)
      _DNS=$(grep _DNS_SETUP_TEST ${barCnf} 2>&1)
      _EXP=$(grep _EXTRA_PACKAGES ${barCnf} 2>&1)
      _MFS=$(grep _MAGICK_FROM_SOURCES ${barCnf} 2>&1)
      _MFX=$(grep _MODULES_FIX ${barCnf} 2>&1)
      _PCV=$(grep _PHP_CLI_VERSION ${barCnf} 2>&1)
      _PEC=$(grep _PHP_EXTRA_CONF ${barCnf} 2>&1)
      _PFD=$(grep _PHP_FPM_DENY ${barCnf} 2>&1)
      _PFV=$(grep _PHP_FPM_VERSION ${barCnf} 2>&1)
      _PFX=$(grep _PERMISSIONS_FIX ${barCnf} 2>&1)
      _PMI=$(grep _PHP_MULTI_INSTALL ${barCnf} 2>&1)
      _PSI=$(grep _PHP_SINGLE_INSTALL ${barCnf} 2>&1)
      _SAR=$(grep _SSH_ARMOUR ${barCnf} 2>&1)
      _SBP=$(grep _STRICT_BIN_PERMISSIONS ${barCnf} 2>&1)
      _SFS=$(grep _SSH_FROM_SOURCES ${barCnf} 2>&1)
      _SKY=$(grep _SKYNET_MODE ${barCnf} 2>&1)
      _STP=$(grep _STRONG_PASSWORDS ${barCnf} 2>&1)
      _SUO=$(grep _SYSTEM_UPGRADE_ONLY ${barCnf} 2>&1)
      _UMY=$(grep _USE_MYSQLTUNER ${barCnf} 2>&1)
      _XTR=$(grep _XTRAS_LIST ${barCnf} 2>&1)
      crlBoav=`tail --lines=1 /var/log/barracuda_log.txt \
        | cut -d '/' -f4 \
        | sed "s/ Barracuda //g"`
      crlBoav=${crlBoav//[^a-zA-Z0-9-.]/}
    else
      crlBoav="BOA Cluster"
    fi
    echo "Aegir ${crlBoav} on ${thiSys}"
    [ "${mode}" = "report" ] && echo "Host `hostname` check on `date`"
    [ "${mode}" = "report" ] && echo "Host uptime `uptime`"
    [ ! -z "${_VIRT_IS}" ] && echo "  VPS ${_VIRT_IS}"
    [ -z "${_VIRT_IS}" ] && echo "  VPS unknown / not a virtual machine"
    echo "  DSK ${_DF_TEST}/100"
    echo "  CPU ${_CPU_NR}"
    echo "  RAM ${_RAM}"
    [ ! -z "${_SKY}" ] && echo "  SKY ${_SKY}"
    [ ! -z "${_NGX}" ] && echo "  NGX ${_NGX}"
    [ ! -z "${_PHP}" ] && echo "  PHP ${_PHP}"
    [ ! -z "${_DBV}" ] && echo "  DBV ${_DBV}"
    [ ! -z "${_RDS}" ] && echo "  RDS ${_RDS}"
    [ ! -z "${_PXY}" ] && echo "  PXY ${_PXY}"
    [ ! -z "${_SHD}" ] && echo "  SHD ${_SHD}"
    [ ! -z "${_SSH}" ] && echo "  SSH ${_SSH}"
    [ ! -z "${_SSL}" ] && echo "  SSL ${_SSL}"
    [ ! -z "${_CRL}" ] && echo "  CRL ${_CRL}"
    if [ -e "/root/.use.curl.from.packages.cnf" ]; then
      echo "  CRL_From_Packages YES"
    else
      echo "  CRL_From_Packages NO"
    fi
    if [ -e "/usr/local/bin/curl" ]; then
      echo "  CRL_Local_Bin YES"
    else
      echo "  CRL_Local_Bin NO"
    fi
    [ "${mode}" != "report" ] && [ ! -z "${_AUT}" ] && echo "  _AUT ${_AUT}"
    [ "${mode}" != "report" ] && [ ! -z "${_BIL}" ] && echo "  _BIL ${_BIL}"
    [ "${mode}" != "report" ] && [ ! -z "${_CCC}" ] && echo "  _CCC ${_CCC}"
    [ "${mode}" != "report" ] && [ ! -z "${_CCL}" ] && echo "  _CCL ${_CCL}"
    [ "${mode}" != "report" ] && [ ! -z "${_CCR}" ] && echo "  _CCR ${_CCR}"
    [ "${mode}" != "report" ] && [ ! -z "${_CCS}" ] && echo "  _CCS ${_CCS}"
    [ "${mode}" != "report" ] && [ ! -z "${_DBG}" ] && echo "  _DBG ${_DBG}"
    [ "${mode}" != "report" ] && [ ! -z "${_DBS}" ] && echo "  _DBS ${_DBS}"
    [ "${mode}" != "report" ] && [ ! -z "${_DNS}" ] && echo "  _DNS ${_DNS}"
    [ "${mode}" != "report" ] && [ ! -z "${_EXP}" ] && echo "  _EXP ${_EXP}"
    [ "${mode}" != "report" ] && [ ! -z "${_MFS}" ] && echo "  _MFS ${_MFS}"
    [ "${mode}" != "report" ] && [ ! -z "${_MFX}" ] && echo "  _MFX ${_MFX}"
    [ "${mode}" != "report" ] && [ ! -z "${_PCV}" ] && echo "  _PCV ${_PCV}"
    [ "${mode}" != "report" ] && [ ! -z "${_PEC}" ] && echo "  _PEC ${_PEC}"
    [ "${mode}" != "report" ] && [ ! -z "${_PFD}" ] && echo "  _PFD ${_PFD}"
    [ "${mode}" != "report" ] && [ ! -z "${_PFV}" ] && echo "  _PFV ${_PFV}"
    [ "${mode}" != "report" ] && [ ! -z "${_PFX}" ] && echo "  _PFX ${_PFX}"
    [ "${mode}" != "report" ] && [ ! -z "${_PMI}" ] && echo "  _PMI ${_PMI}"
    [ "${mode}" != "report" ] && [ ! -z "${_PSI}" ] && echo "  _PSI ${_PSI}"
    [ "${mode}" != "report" ] && [ ! -z "${_SAR}" ] && echo "  _SAR ${_SAR}"
    [ "${mode}" != "report" ] && [ ! -z "${_SBP}" ] && echo "  _SBP ${_SBP}"
    [ "${mode}" != "report" ] && [ ! -z "${_SFS}" ] && echo "  _SFS ${_SFS}"
    [ "${mode}" != "report" ] && [ ! -z "${_STP}" ] && echo "  _STP ${_STP}"
    [ "${mode}" != "report" ] && [ ! -z "${_SUO}" ] && echo "  _SUO ${_SUO}"
    [ "${mode}" != "report" ] && [ ! -z "${_UMY}" ] && echo "  _UMY ${_UMY}"
    [ "${mode}" != "report" ] && [ ! -z "${_XTR}" ] && echo "  _XTR ${_XTR}"
    [ "${mode}" != "report" ] && [ ! -z "${_AUT}" ] && echo "  _AUT ${_AUT}"
    echo
    if [ -e "/var/log/barracuda_log.txt" ]; then
      if [ "${mode}" = "report" ]; then
        display="system"
        if [ "${extra}" = "octopus" ]; then
          grep _PHP_CLI_VERSION /root/.*.octopus.cnf
          echo
          grep _PHP_FPM_VERSION /root/.*.octopus.cnf
          echo
          _OCT_NR=$(ls /data/disk | wc -l)
          _OCT_NR=$(( _OCT_NR - 1 ))
          echo ALL _OCT_NR is ${_OCT_NR}
          echo
          for _OCT in `find /data/disk/ -maxdepth 1 -mindepth 1 | sort`; do
            _SITES_NR=0
            if [ -e "${_OCT}/config/server_master/nginx/vhost.d" ]; then
              _SITES_NR=$(ls ${_OCT}/config/server_master/nginx/vhost.d | wc -l)
              if [ "${_SITES_NR}" -gt "0" ]; then
                echo _SITES_NR in ${_OCT} is ${_SITES_NR}
              else
                _OCT_NR=$(( _OCT_NR - 1 ))
              fi
            fi
          done
          echo
          echo ACTIVE _OCT_NR is ${_OCT_NR}
          _ALL_SITES_NR=$(ls /data/disk/*/config/server_master/nginx/vhost.d | wc -l)
          _ALL_SITES_NR=$(( _ALL_SITES_NR - _OCT_NR ))
          echo
          echo _ALL_SITES_NR is ${_ALL_SITES_NR}
        fi
        if [ "${extra}" = "backups" ]; then
          tail --lines=19 /var/xdrago/log/*.archive.log
          echo
        fi
        if [ "${extra}" = "both" ]; then
          grep _PHP_CLI_VERSION /root/.*.octopus.cnf
          echo
          grep _PHP_FPM_VERSION /root/.*.octopus.cnf
          echo
          tail --lines=19 /var/xdrago/log/*.archive.log
          echo
        fi
      elif [ "${mode}" = "full" ] || [ "${mode}" = "more" ]; then
        display="default"
        cat /var/log/barracuda_log.txt | grep $(date +'%Y' -d 'last year')
        cat /var/log/barracuda_log.txt | grep $(date +%Y)
      else
        display="default"
        tail --lines=3 /var/log/barracuda_log.txt
      fi
    fi
    if [ "${display}" = "default" ]; then
      echo
      echo "Please link this information in your submission,"
      echo "but only in a form of Gist snippet and not inline,"
      echo "along with your hosting provider name"
      echo "in the BOA issue queue on GitHub."
      echo
    fi
    exit 0
  else
    echo "ERROR: This script should be ran as a root user"
    exit 1
  fi
}

octopus_cleanup() {
  if [ `whoami` = "root" ]; then
    if [ "${action}" = "detect" ]; then
      echo
      echo "Accounts marked for cleanup or active"
      echo
      rm -f /root/.cleanup.detect.txt
      for Usr in `find /data/disk/ -maxdepth 1 -mindepth 1 | sort`
      do
        if [ -d "${Usr}/config/server_master/nginx/vhost.d" ] \
          && [ -e "${Usr}/log/cores.txt" ] \
          && [ -e "${Usr}/log/CANCELLED" ]; then
          sIze=$(du -s -h ${Usr} | cut -d' ' -f1 | awk '{ print $1}' 2>&1)
          echo "CANCELLED ${Usr} ${sIze}"
          iUsr=$(echo ${Usr} | cut -d'/' -f4 | awk '{ print $1}' 2>&1)
          echo "CANCELLED ${iUsr}" >> /root/.cleanup.detect.txt
        else
          if [ -d "${Usr}/config/server_master/nginx/vhost.d" ] \
            && [ -e "${Usr}/log/cores.txt" ]; then
            echo "ACTIVE ${Usr}"
          fi
        fi
      done
    elif [ "${action}" = "purge" ] \
      && [ "${user}" = "batch" ] \
      && [ -e "/root/.cleanup.detect.txt" ]; then
        IFS=$'\12'
        for p in $(cat /root/.cleanup.detect.txt 2>&1);do
          usr_purge=`echo $p | cut -d' ' -f2 | awk '{ print $1}'`
          boa cleanup purge ${usr_purge}
          wait
        done
    elif [ "${action}" = "purge" ] \
      && [ ! -z "${user}" ] \
      && [ "${user}" != "batch" ] \
      && [ -e "/root/.cleanup.detect.txt" ]; then
      zombie_dir="/var/backups/zombie/purged/${user}/home/"
      nginx_inc="/var/aegir/config/server_master/nginx/platform.d"
      nginx_ssl="/var/aegir/config/server_master/nginx/pre.d"
      nginx_prx=$(ls ${nginx_ssl}/z_${user}.*_ssl_proxy.conf 2>&1)
      sites_nr=$(ls /data/disk/${user}/config/server_master/nginx/vhost.d | wc -l)
      if [ -d "/data/disk/${user}/config/server_master/nginx/vhost.d" ] \
        && [ "${sites_nr}" = "0" ] \
        && [ -e "/data/disk/${user}/log/cores.txt" ] \
        && [ -e "/data/disk/${user}/log/CANCELLED" ]; then
        echo
        echo "Account to purge: ${user}"
        echo
        mkdir -p ${zombie_dir}
        mv -f "${nginx_inc}/${user}.conf" ${zombie_dir}
        mv -f "${nginx_prx}" ${zombie_dir}
        echo "${user}:/data/disk/${user}" > ${zombie_dir}.purge.list
        echo "${user}.ftp:/home/${user}.ftp" >> ${zombie_dir}.purge.list
        echo "${user}.web:/home/${user}.web" >> ${zombie_dir}.purge.list
        _PHP_V="83 82 81 80 74 73 72 71 70 56"
        for e in ${_PHP_V}; do
          if [ -e "/opt/php${e}/etc/pool.d/${user}.${e}.conf" ] \
            || [ -e "/home/${user}.${e}.web" ]; then
            rm -f /opt/php${e}/etc/pool.d/${user}.${e}.conf
            echo "${user}.${e}.web:/home/${user}.${e}.web" >> ${zombie_dir}.purge.list
          fi
          if [ -e "/opt/php${e}/etc/pool.d/${user}.conf" ] \
            || [ -e "/home/${user}.web" ]; then
            rm -f /opt/php${e}/etc/pool.d/${user}.conf
            echo "${user}.web:/home/${user}.web" >> ${zombie_dir}.purge.list
          fi
        done
        kill -9 $(ps aux | grep '[g]pg-agent' | awk '{print $2}') &> /dev/null
        IFS=$'\12'
          for p in $(cat ${zombie_dir}.purge.list | grep "${user}" 2>&1);do
            usr_name=`echo $p | cut -d':' -f1 | awk '{ print $1}'`
            usr_home=`echo $p | cut -d':' -f2 | awk '{ print $1}'`
            echo disabling chattr for ${usr_name} in ${usr_home}..
            chattr -i -R ${usr_home}/ &> /dev/null
            if [ -d "${usr_home}/.drush/" ]; then
              chattr -i ${usr_home}/.drush/
            fi
            rm -rf ${usr_home}/.gnupg
            echo purging ${usr_name}..
            if [ -d "${usr_home}/static" ]; then
              rm -rf ${usr_home}/backups
              rm -rf ${usr_home}/distro
              rm -rf ${usr_home}/src
              rm -rf ${usr_home}/static
              rm -rf ${usr_home}/undo
            fi
            deluser \
              --remove-home \
              --backup-to /var/backups/zombie/purged/${user}/home/ ${usr_name} &> /dev/null
          done;
        echo
        echo "Cleanup complete"
      else
        echo
        echo "OOPS.. ${user} is either active, with existing vhosts or does not exist"
      fi
    fi
    echo
    exit 0
  fi
}

check_root_direct
os_detection_minimal

case "$1" in
  info)      cmmand="$1"
             mode="$2"
             extra="$3"
             check_virt
             display_info
  ;;
  version)   cmmand="$1"
             kind="$2"
             display_version
  ;;
  reboot)    service clean-boa-env stop
             wait
             reboot
             exit 0
  ;;
  init)      cmmand="$1"
             tRee=lite
             check_root
             check_root_keys_pwd
             check_virt
             check_dns_curl
             mode="$2"
             init_setup
  ;;
  init-dev)  cmmand="$1"
             tRee=dev
             check_root
             check_root_keys_pwd
             check_virt
             check_dns_curl
             mode="$2"
             init_setup
  ;;
  cleanup)   cmmand="$1"
             action="$2"
             user="$3"
             octopus_cleanup
  ;;
  in-lite)   cmmand="$1"
             tRee=lite
             kind="$2"
             fqdn="$3"
             email="$4"
             user="$5"
             mode="$6"
             rkey="$7"
             sql="$8"
             check_root
             check_root_keys_pwd
             check_virt
             check_dns_curl
             init_setup
  ;;
  in-dev)    cmmand="$1"
             tRee=dev
             kind="$2"
             fqdn="$3"
             email="$4"
             user="$5"
             mode="$6"
             rkey="$7"
             sql="$8"
             check_root
             check_root_keys_pwd
             check_virt
             check_dns_curl
             init_setup
  ;;
  in-cluster) cmmand="$1"
             tRee=lite
             kind="$2"
             fqdn="$3"
             email="$4"
             user="$5"
             mode="$6"
             dbip="$7"
             loip="$8"
             check_root
             check_root_keys_pwd
             check_virt
             check_dns_curl
             init_setup
  ;;
  in-3.2)    cmmand="$1"
             tRee=lite
             kind="$2"
             fqdn="$3"
             email="$4"
             user="$5"
             mode="$6"
             rkey="$7"
             check_root
             check_root_keys_pwd
             check_virt
             check_dns_curl
             init_setup
  ;;
  in-2.4)    cmmand="$1"
             tRee=lite
             kind="$2"
             fqdn="$3"
             email="$4"
             user="$5"
             mode="$6"
             rkey="$7"
             check_root
             check_root_keys_pwd
             check_virt
             check_dns_curl
             init_setup
  ;;
  in-2.3)    cmmand="$1"
             tRee=lite
             kind="$2"
             fqdn="$3"
             email="$4"
             user="$5"
             mode="$6"
             rkey="$7"
             check_root
             check_root_keys_pwd
             check_virt
             check_dns_curl
             init_setup
  ;;
  in-2.2)    cmmand="$1"
             tRee=lite
             kind="$2"
             fqdn="$3"
             email="$4"
             user="$5"
             mode="$6"
             rkey="$7"
             check_root
             check_root_keys_pwd
             check_virt
             check_dns_curl
             init_setup
  ;;
  in-octopus) cmmand="$1"
             tRee=lite
             email="$2"
             user="$3"
             mode="$4"
             copt="$5"
             csub="$6"
             ccor="$7"
             check_root
             check_root_keys_pwd
             check_virt
             check_dns_curl
             init_setup
  ;;
  in-oct)    cmmand="$1"
             tRee=lite
             email="$2"
             user="$3"
             mode="$4"
             copt="$5"
             csub="$6"
             ccor="$7"
             pxyc="6033"
             pxyi="127.0.0.1"
             check_root
             check_root_keys_pwd
             check_virt
             check_dns_curl
             init_setup
  ;;
  *)         echo
             echo "Installation commands"
             echo "Usage: $(basename "$0") {init} {debian|daedalus|chimaera}"
             echo "Usage: $(basename "$0") {version} {mode} {fqdn} {email} {user} {extra} {mysql}"
             echo "Usage: $(basename "$0") {in-octopus} {email} {o2} {lite|dev}"
             echo
             echo "Other available commands"
             echo "Usage: $(basename "$0") version"
             echo "Usage: $(basename "$0") info {more}"
             echo "Usage: $(basename "$0") info report {octopus|backups|both}"
             echo "Usage: $(basename "$0") cleanup {detect|purge} {user|batch}"
             echo "Usage: $(basename "$0") reboot"
             echo
             cat <<EOF

  Accepted keywords and values for installation and other commands:

  {other}
      version <------ display BOA and OS version
      info <--------- generate various system reports
      cleanup <------ (detect|purge) cancelled Octopus instances files (no dbs)
      reboot <------- run accelerated system reboot

  {version}
      init <--------- initialize system before installation (debian|devuan|daedalus|chimaera)
      in-lite <------ install BOA Lite release (no license)
      in-dev <------- install BOA Cutting Edge (requires license)
      in-octopus <--- install extra Octopus instance (lite|dev)

  {mode}
      public <------- recommended for general use
      local <-------- experimental

  {fqdn}
      my.fqdn <------ valid subdomain to use as a hostname

  {email}
      my@email <----- your valid email address

  {user}
      o1 <----------- default Octopus system account

  {extra}
      license <------ valid new relic license key
      php-8.1 <------ enable single-PHP mode (8.1 or 8.2 or 8.3 or 7.4)
      php-min <------ install PHP 8.1, 8.2, 8.3, 7.4, use 8.1 by default (php-all)
      php-max <------ install PHP 8.1, 8.2, 8.3, 8.0, 7.4, 7.3, 7.2, 7.1, 7.0, 5.6
      nodns <-------- disable DNS/SMTP checks on the fly

  {mysql}
      percona <------ database server to install (default)
      mariadb <------ database server to install (deprecated)

  See docs/INSTALL.txt for more details.

EOF
             clean_pid_exit
  ;;
esac
