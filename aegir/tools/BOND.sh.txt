#!/bin/bash


###----------------------------------------###
###
###  Barracuda-Octopus-Nginx-Drupal Tuner
###
###  Copyright (C) 2010-2020 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###  This program is free software. You can
###  redistribute it and/or modify it under
###  the terms of the GNU GPL as published by
###  the Free Software Foundation, version 2
###  or later.
###
###  This program is distributed in the hope
###  that it will be useful, but WITHOUT ANY
###  WARRANTY; without even the implied
###  warranty of MERCHANTABILITY or FITNESS
###  FOR A PARTICULAR PURPOSE. See the GNU GPL
###  for more details.
###
###  You should have received a copy of the
###  GNU GPL along with this program.
###  If not, see http://www.gnu.org/licenses/
###
###  Code: https://github.com/omega8cc/boa
###
###----------------------------------------###


###----------------------------------------###
### HOW-TO: run it with bash, not with sh  ###
###----------------------------------------###
###
### $ bash BOND.sh.txt
###
### Note: to restore default values it is
###       enough to start this script with
###       any values defined below and answer
###       NO when it prompts for confirmation
###       "Are you ready to tune your Aegir".
###


###----------------------------------------###
### EDITME                                 ###
###----------------------------------------###
###
### Enter below the settings you wish to use.
###


###----------------------------------------###
### Hostmaster root directory - /var/aegir
###
### Note: most of values tuned by this script
###       are server-vide, while some, like
###       mod_evasive settings will affect
###       only sites hosted on the Aegir
###       Satellite Instance defined below.
###
_TUNE_HOSTMASTER=/data/disk/o1


###----------------------------------------###
### Nginx server mod_evasive - default ON
###
### Note: running verify task on any SITE
###       will restore default value ON
###       for that site only, while TUNER
###       will turn OFF/ON this feature
###       for all sites hosted on the
###       Hostmaster defined above.
###
_TUNE_NGINX_CONNECT=OFF


###----------------------------------------###
### Nginx server fastcgi timeout - default 180
###
### Note: running verify task on the SERVER
###       in the Hostmaster created
###       by Barracuda (not Octopus!)
###       will restore default value
###       for the server and all existing
###       Aegir Satellite Instances.
###
_TUNE_NGINX_TIMEOUT=9999


###----------------------------------------###
### Nginx server firewall limit - default 300
###
### Note: don't change the default value
###       if you are the only visitor, or
###       you will lock yourself easily.
###
###       The default value 300 means the
###       firewall limit is OFF because
###       it scans only the last 300 lines
###       of your web server log file.
###
###       If you will set this value to 100
###       then every visitor IP with more
###       than 100 out of the last 300
###       requests will be locked.
###
###       Only dynamic requests (pages) are
###       counted because static files like
###       images are generally not logged.
###
_TUNE_NGINX_FIREWALL=300


###----------------------------------------###
### Database server timeout - default 9999
###
_TUNE_SQL_TIMEOUT=9999


###----------------------------------------###
### PHP-FPM server timeout - default 180
###
_TUNE_PHP_FPM_TIMEOUT=9999


###----------------------------------------###
### PHP-CLI server timeout - default 9999
###
_TUNE_PHP_CLI_TIMEOUT=9999


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###

_AEGIR_VERSION="BOA-4.0.1"
_BRANCH_BOA="4.x"
_X_VERSION="BOA-4.0.1"
_MYSQLTUNER_VRN=1.7.15

_NOW=$(date +%y%m%d-%H%M%S 2>&1)
_NOW=${_NOW//[^0-9-]/}
_RAM=$(free -mt | grep Mem: | awk '{ print $2 }' 2>&1)
_THISHOST=$(uname -n 2>&1)
_SPINNER=YES
PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin
SHELL=/bin/bash
if [ -n "${STY+x}" ]; then
  _SPINNER=NO
fi
_PHP56_API=20131226
_PHP56_VRN=5.6.40
_PHP70_API=20151012
_PHP70_VRN=7.0.33
_PHP71_API=20160303
_PHP71_VRN=7.1.33
_PHP72_API=20170718
_PHP72_VRN=7.2.30
_PHP73_API=20180731
_PHP73_VRN=7.3.17

###
### Helper variables
###
bldPth="/opt/tmp/boa"
crlGet="-L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab"
forCer="-fuy --allow-unauthenticated --reinstall"
gCb="git clone --branch"
gitHub="https://github.com/omega8cc"
gitLab="https://gitlab.com/omega8cc"
libFnc="${bldPth}/lib/functions"
locCnf="${bldPth}/aegir/conf"
vBs="/var/backups"

###---### Functions
#
# Clean pid files on exit.
clean_pid_exit() {
  rm -f /var/run/boa_wait.pid
  rm -f /var/run/boa_run.pid
  service cron start &> /dev/null
  exit 1
}
#
# Noticeable messages.
msg() {
  echo "Tuner [$(date 2>&1)] ==> $*"
}
# Simple prompt.
prompt_yes_no() {
if [ "${_AUTOPILOT}" = "YES" ]; then
  return 0
else
  while true; do
    printf "$* [Y/n] "
    read answer
    if [ -z "${answer}" ]; then
      return 0
    fi
    case ${answer} in
      [Yy]|[Yy][Ee][Ss])
        return 0
        ;;
      [Nn]|[Nn][Oo])
        return 1
        ;;
      *)
        echo "Please answer yes or no"
        ;;
    esac
  done
fi
}
#
# Small spinner.
mrun() {
  CMD="$1"
  touch busy
  if [ "${_SPINNER}" = "YES" ]; then
    bash ${_SRCDIR}/spinner busy &
  fi
  if ${CMD} >> ${_LOG}; then
    rm busy
    sleep 1
    return 0
  fi
}
#
# Find the fastest mirror.
find_fast_mirror() {
  isNetc=$(which netcat 2>&1)
  if [ ! -x "${isNetc}" ] || [ -z "${isNetc}" ]; then
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxtmp" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxtmp
    fi
    apt-get update -qq &> /dev/null
    apt-get install netcat ${forCer} &> /dev/null
    sleep 3
  fi
  ffMirr=$(which ffmirror 2>&1)
  if [ -x "${ffMirr}" ]; then
    ffList="/var/backups/boa-mirrors-2020-02.txt"
    mkdir -p /var/backups
    if [ ! -e "${ffList}" ]; then
      echo "jp.files.aegir.cc"  > ${ffList}
      echo "nl.files.aegir.cc" >> ${ffList}
      echo "uk.files.aegir.cc" >> ${ffList}
      echo "us.files.aegir.cc" >> ${ffList}
    fi
    if [ -e "${ffList}" ]; then
      _CHECK_MIRROR=$(bash ${ffMirr} < ${ffList} 2>&1)
      _USE_MIR="${_CHECK_MIRROR}"
      [[ "${_USE_MIR}" =~ "printf" ]] && _USE_MIR="files.aegir.cc"
    else
      _USE_MIR="files.aegir.cc"
    fi
  else
    _USE_MIR="files.aegir.cc"
  fi
  if ! netcat -w 10 -z "${_USE_MIR}" 80; then
    echo "INFO: The mirror ${_USE_MIR} doesn't respond, let's try default"
    _USE_MIR="104.245.208.226"
  fi
  urlDev="http://${_USE_MIR}/dev"
  urlHmr="http://${_USE_MIR}/versions/master/aegir"
  urlStb="http://${_USE_MIR}/versions/stable"
}
#
# Find correct IP.
find_correct_ip() {
  _LOC_IP=$(curl ${crlGet} https://api.ipify.org \
    | sed 's/[^0-9\.]//g' 2>&1)
  if [ -z "${_LOC_IP}" ]; then
    _LOC_IP=$(curl ${crlGet} http://ip4.icanhazip.com \
      | sed 's/[^0-9\.]//g' 2>&1)
  fi
  if [ -z "${_LOC_IP}" ]; then
    _LOC_IP=$(echo $(getent ahostsv4 $_LOC_DOM) \
      | cut -d: -f2 \
      | awk '{ print $1}' 2>&1)
  fi
}
#
# Fix php.ini files to remove ionCube
fix_php_ini_ioncube() {
  if [ -e "${_THIS_FILE}" ] && [ "${_PHP_IONCUBE}" = "NO" ]; then
    _IONCUBE_INI_TEST=$(grep "ioncube_loader" ${_THIS_FILE} 2>&1)
    if [[ "$_IONCUBE_INI_TEST" =~ "ioncube_loader" ]]; then
      sed -i "s/.*ioncube_loader.*//g" ${_THIS_FILE} &> /dev/null
      wait
    fi
  fi
}
#
# Fix php.ini files to remove suhosin.so
fix_php_ini_suhosin() {
  if [ -e "${_THIS_FILE}" ]; then
    _SUHOSIN_INI_TEST=$(grep "^extension=suhosin.so" ${_THIS_FILE} 2>&1)
    if [[ "$_SUHOSIN_INI_TEST" =~ "extension=suhosin.so" ]]; then
      sed -i "s/.*suhosin.*//g" ${_THIS_FILE} &> /dev/null
      wait
    fi
  fi
}
#
# Fix php.ini files to add mailparse.so
fix_php_ini_mailparse() {
  if [ -e "${_THIS_FILE}" ]; then
    _MAILPARSE_INI_TEST=$(grep "^extension=mailparse.so" ${_THIS_FILE} 2>&1)
    if [[ "$_MAILPARSE_INI_TEST" =~ "extension=mailparse.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=mailparse.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini files to add yaml.so
fix_php_ini_yaml() {
  if [ -e "${_THIS_FILE}" ]; then
    _YAML_INI_TEST=$(grep "^extension=yaml.so" ${_THIS_FILE} 2>&1)
    if [[ "$_YAML_INI_TEST" =~ "extension=yaml.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=yaml.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini files to add jsmin.so
fix_php_ini_jsmin() {
  if [ -e "${_THIS_FILE}" ]; then
    _JSMIN_INI_TEST=$(grep "^extension=jsmin.so" ${_THIS_FILE} 2>&1)
    if [[ "$_JSMIN_INI_TEST" =~ "extension=jsmin.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=jsmin.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini files to add twig.so
fix_php_ini_twig() {
  if [ -e "${_THIS_FILE}" ]; then
    _TWIG_INI_TEST=$(grep "^extension=twig.so" ${_THIS_FILE} 2>&1)
    if [[ "$_TWIG_INI_TEST" =~ "extension=twig.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=twig.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini files to add redis.so
fix_php_ini_redis() {
  if [ -e "${_THIS_FILE}" ]; then
    _REDIS_INI_TEST=$(grep "^extension=redis.so" ${_THIS_FILE} 2>&1)
    if [[ "$_REDIS_INI_TEST" =~ "extension=redis.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=redis.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini file to add newrelic.ini
fix_php_ini_newrelic() {
  _NR_TPL="${locCnf}/newrelic.ini"
  if [ -e "${_THIS_FILE}" ]; then
    _NEWRELIC_INI_TEST_A=$(grep "^extension=newrelic.so" ${_THIS_FILE} 2>&1)
    if [[ "$_NEWRELIC_INI_TEST_A" =~ "extension=newrelic.so" ]]; then
      _DO_NOTHING=YES
    else
      cat $_NR_TPL >> ${_THIS_FILE}
    fi
    _NEWRELIC_INI_TEST_B=$(grep "newrelic.framework.drupal.modules" ${_THIS_FILE} 2>&1)
    if [[ "$_NEWRELIC_INI_TEST_B" =~ "newrelic.framework.drupal.modules" ]]; then
      _DO_NOTHING=YES
    else
      echo "newrelic.framework.drupal.modules = 1" >> ${_THIS_FILE}
    fi
    sed -i "/REPLACE_WITH_REAL_KEY//g" ${_THIS_FILE} &> /dev/null
    wait
    sed -i "s/license_key=//g" ${_THIS_FILE} &> /dev/null
    wait
  fi
}
#
# Fix all php.ini files to add newrelic.ini
fix_php_ini_newrelic_all() {
  if [ -e "/etc/newrelic/newrelic.cfg" ]; then
    if [ -z "${_NEWRELIC_KEY}" ]; then
      _NEWRELIC_KEY=$(grep license_key /etc/newrelic/newrelic.cfg 2>&1)
      _NEWRELIC_KEY=$(echo -n ${_NEWRELIC_KEY} | tr -d "\n" 2>&1)
    fi
    _PHP_V="73 72 71 70 56"
    for e in ${_PHP_V}; do
      _THIS_FILE=/opt/php${e}/etc/php${e}.ini
      fix_php_ini_newrelic
      _THIS_FILE=/opt/php${e}/lib/php.ini
      fix_php_ini_newrelic
    done
  fi
}
#
# Fix FMP php.ini file to add opcache.so
fix_php_ini_opcache() {
  if [ -e "${_THIS_FILE}" ]; then
    _OPCACHE_INI_TEST=$(grep "opcache.so" ${_THIS_FILE} 2>&1)
    if [[ "$_OPCACHE_INI_TEST" =~ "opcache.so" ]]; then
      _DO_NOTHING=YES
    else
      echo ";"                                    >> ${_THIS_FILE}
      echo "; Zend OPcache"                       >> ${_THIS_FILE}
      echo "zend_extension=\"$_OPCACHE_SO\""      >> ${_THIS_FILE}
      echo "opcache.enable=1"                     >> ${_THIS_FILE}
      echo "opcache.memory_consumption=181"       >> ${_THIS_FILE}
      echo "opcache.revalidate_freq=300"          >> ${_THIS_FILE}
      echo ";"                                    >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix all FMP php.ini files to add Zend OPcache
fix_php_ini_opcache_all() {
  _PHP_V="73 72 71 70 56"
  for e in ${_PHP_V}; do
    case "${e}" in
      72) _P_API="${_PHP72_API}" ;;
      71) _P_API="${_PHP71_API}" ;;
      70) _P_API="${_PHP70_API}" ;;
      56) _P_API="${_PHP56_API}" ;;
      *)  msg "WARN: Unknown PHP API version for PHP ${e}"
      ;;
    esac
    _THIS_FILE=/opt/php${e}/etc/php${e}.ini
    _OPCACHE_LP="/opt/php${e}/lib/php/extensions/no-debug-non-zts"
    _OPCACHE_SO="${_OPCACHE_LP}-${_P_API}/opcache.so"
    fix_php_ini_opcache "${e}"
  done
}
#
# Fix php.ini file to add php_tet.so
fix_php_ini_tet() {
  if [ -e "${_THIS_FILE}" ]; then
    _TET_INI_TEST=$(grep "^extension=php_tet.so" ${_THIS_FILE} 2>&1)
    if [[ "$_TET_INI_TEST" =~ "extension=php_tet.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=php_tet.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix all php.ini files to add php_tet.so
fix_php_ini_tet_all() {
  if [ "${_PHP_TET}" = "YES" ] || [[ "${_XTRAS_LIST}" =~ "TET" ]]; then
    _PHP_V="56 55"
    for e in ${_PHP_V}; do
      _THIS_FILE=/opt/php${e}/etc/php${e}.ini
      fix_php_ini_tet
      _THIS_FILE=/opt/php${e}/lib/php.ini
      fix_php_ini_tet
    done
  fi
}
#
# Fix php.ini file to add geos.so
fix_php_ini_geos() {
  if [ -e "${_THIS_FILE}" ]; then
    _GEOS_INI_TEST=$(grep "^extension=geos.so" ${_THIS_FILE} 2>&1)
    if [[ "$_GEOS_INI_TEST" =~ "extension=geos.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=geos.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix all php.ini files to add geos.so
fix_php_ini_geos_all() {
  if [ "${_PHP_GEOS}" = "YES" ] || [[ "${_XTRAS_LIST}" =~ "GEO" ]]; then
    _PHP_V="56"
    for e in ${_PHP_V}; do
      _THIS_FILE=/opt/php${e}/etc/php${e}.ini
      fix_php_ini_geos
      _THIS_FILE=/opt/php${e}/lib/php.ini
      fix_php_ini_geos
    done
  fi
}
#
# Fix php.ini file to add mongo.so
fix_php_ini_mongo() {
  if [ -e "${_THIS_FILE}" ]; then
    _MONGO_INI_TEST=$(grep "^extension=mongo.so" ${_THIS_FILE} 2>&1)
    if [[ "$_MONGO_INI_TEST" =~ "extension=mongo.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=mongo.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini file to add mongodb.so
fix_php_ini_mongodb() {
  if [ -e "${_THIS_FILE}" ]; then
    _MONGODB_INI_TEST=$(grep "^extension=mongodb.so" ${_THIS_FILE} 2>&1)
    if [[ "$_MONGODB_INI_TEST" =~ "extension=mongodb.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=mongodb.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix all php.ini files to add mongo.so or mongodb.so
fix_php_ini_mongo_all() {
  if [ "${_PHP_MONGODB}" = "YES" ] || [[ "${_XTRAS_LIST}" =~ "MNG" ]]; then
    _PHP_V="56"
    for e in ${_PHP_V}; do
      _THIS_FILE=/opt/php${e}/etc/php${e}.ini
      fix_php_ini_mongo
      _THIS_FILE=/opt/php${e}/lib/php.ini
      fix_php_ini_mongo
    done
    _PHP_V="72 71 70"
    for e in ${_PHP_V}; do
      _THIS_FILE=/opt/php${e}/etc/php${e}.ini
      fix_php_ini_mongodb
      _THIS_FILE=/opt/php${e}/lib/php.ini
      fix_php_ini_mongodb
    done
  fi
}
#
# Update PHP Config.
update_php_conf() {
  if [ -z "${_THISHTIP}" ]; then
    _LOC_DOM="${_THISHOST}"
    find_correct_ip
    _THISHTIP="${_LOC_IP}"
  fi
  if [ ! -e "/opt/etc/fpm" ] \
    || [ ! -e "/opt/etc/fpm/fpm-pool-common.conf" ]; then
    mkdir -p /opt/etc/fpm
  fi
  cp -af ${locCnf}/fpm-pool-common.conf /opt/etc/fpm/fpm-pool-common.conf
  sed -i "s/127.0.0.1/127.0.0.1,${_THISHTIP}/g" /opt/etc/fpm/fpm-pool-common.conf
  wait
  sed -i "s/mode =.*/mode = 0660/g" /opt/etc/fpm/fpm-pool-common.conf
  wait
  _PHP_V="73 72 71 70 56"
  for e in ${_PHP_V}; do
    if [ ! -e "/var/www/www${e}" ]; then
      adduser --system --group --home /var/www/www${e} www${e} &> /dev/null
      usermod -aG www-data www${e}
    fi
    if [ ! -e "/opt/php${e}/etc/php${e}.ini" ] \
      || [ ! -e "/opt/php${e}/etc/pool.d/www${e}.conf" ]; then
      mkdir -p /opt/php${e}/etc/pool.d
      cp -af ${locCnf}/php${e}.ini /opt/php${e}/etc/php${e}.ini
    fi
    cp -af ${locCnf}/fpm${e}-pool-www.conf /opt/php${e}/etc/pool.d/www${e}.conf
    if [ ! -e "/opt/php${e}/lib/php.ini" ]; then
      mkdir -p /opt/php${e}/lib
      cp -af ${locCnf}/php${e}-cli.ini /opt/php${e}/lib/php.ini
    fi
    cp -af ${locCnf}/php${e}.ini /opt/php${e}/etc/php${e}.ini
    cp -af ${locCnf}/php${e}-cli.ini /opt/php${e}/lib/php.ini
    cp -af ${locCnf}/php${e}-fpm.conf /opt/php${e}/etc/php${e}-fpm.conf
    _THIS_FILE=/opt/php${e}/etc/php${e}.ini
    if [ "${e}" = "56" ]; then
      fix_php_ini_mailparse
      fix_php_ini_twig
    fi
    fix_php_ini_jsmin
    fix_php_ini_redis
    fix_php_ini_ioncube
    fix_php_ini_suhosin
    fix_php_ini_yaml
    _THIS_FILE=/opt/php${e}/lib/php.ini
    if [ "${e}" = "56" ]; then
      fix_php_ini_mailparse
      fix_php_ini_twig
    fi
    fix_php_ini_jsmin
    fix_php_ini_redis
    fix_php_ini_ioncube
    fix_php_ini_suhosin
    fix_php_ini_yaml
    if [ -e "/opt/php${e}/etc/php${e}.ini" ]; then
      sed -i "s/^zlib.output_compression.*/zlib.output_compression = Off/g"       /opt/php${e}/etc/php${e}.ini
      wait
      sed -i "s/.*zlib.output_compression_level/;zlib.output_compression_level/g" /opt/php${e}/etc/php${e}.ini
      wait
    fi
    if [ -e "/opt/php${e}/lib/php.ini" ]; then
      sed -i "s/^zlib.output_compression.*/zlib.output_compression = Off/g"       /opt/php${e}/lib/php.ini
      wait
      sed -i "s/.*zlib.output_compression_level/;zlib.output_compression_level/g" /opt/php${e}/lib/php.ini
      wait
    fi
  done
  rm -f /etc/php5/conf.d/{opcache.ini,apc.ini,imagick.ini,memcached.ini}
  rm -f /etc/php5/conf.d/{redis.ini,suhosin.ini,newrelic.ini}
  fix_php_ini_newrelic_all
  fix_php_ini_geos_all
  fix_php_ini_mongo_all
  fix_php_ini_tet_all
  fix_php_ini_opcache_all
}
#
restore_default_php() {
  msg "INFO: Restoring default PHP configuration"
  cp -af ${locCnf}/php73-cli.ini /opt/php73/lib/php.ini &> /dev/null
  cp -af ${locCnf}/php73.ini /opt/php73/etc/php73.ini   &> /dev/null
  cp -af ${locCnf}/php72-cli.ini /opt/php72/lib/php.ini &> /dev/null
  cp -af ${locCnf}/php72.ini /opt/php72/etc/php72.ini   &> /dev/null
  cp -af ${locCnf}/php71-cli.ini /opt/php71/lib/php.ini &> /dev/null
  cp -af ${locCnf}/php71.ini /opt/php71/etc/php71.ini   &> /dev/null
  cp -af ${locCnf}/php70-cli.ini /opt/php70/lib/php.ini &> /dev/null
  cp -af ${locCnf}/php70.ini /opt/php70/etc/php70.ini   &> /dev/null
  cp -af ${locCnf}/php56-cli.ini /opt/php56/lib/php.ini &> /dev/null
  cp -af ${locCnf}/php56.ini /opt/php56/etc/php56.ini   &> /dev/null
}
#
tune_php() {
  msg "INFO: Tuning PHP configuration"
  if [ "${_TUNE_PHP_FPM_TIMEOUT}" -lt "60" ]; then
    _TUNE_PHP_FPM_TIMEOUT=60
  fi
  # PHP-FPM pools
  sed -i "s/180s/${_TUNE_PHP_FPM_TIMEOUT}s/g" /opt/php*/etc/pool.d/*.conf                                           &> /dev/null
  wait
  sed -i "s/180s/${_TUNE_PHP_FPM_TIMEOUT}s/g" /opt/php*/etc/php*-fpm.conf                                           &> /dev/null
  wait
  sed -i "s/180/${_TUNE_PHP_FPM_TIMEOUT}/g" /opt/etc/fpm/fpm-pool-common.conf                                       &> /dev/null
  wait
  # PHP-FPM INI
  sed -i "s/^default_socket_timeout =.*/default_socket_timeout = ${_TUNE_PHP_FPM_TIMEOUT}/g" /opt/php*/etc/php*.ini &> /dev/null
  wait
  sed -i "s/^max_execution_time =.*/max_execution_time = ${_TUNE_PHP_FPM_TIMEOUT}/g" /opt/php*/etc/php*.ini         &> /dev/null
  wait
  sed -i "s/^max_input_time =.*/max_input_time = ${_TUNE_PHP_FPM_TIMEOUT}/g" /opt/php*/etc/php*.ini                 &> /dev/null
  wait
  # PHP-CLI INI
  sed -i "s/^max_execution_time =.*/max_execution_time = ${_TUNE_PHP_CLI_TIMEOUT}/g" /opt/php*/lib/php.ini          &> /dev/null
  wait
  sed -i "s/^max_input_time =.*/max_input_time = ${_TUNE_PHP_CLI_TIMEOUT}/g" /opt/php*/lib/php.ini                  &> /dev/null
  wait
  sed -i "s/^default_socket_timeout =.*/default_socket_timeout = ${_TUNE_PHP_CLI_TIMEOUT}/g" /opt/php*/lib/php.ini  &> /dev/null
  wait
  # Redis config should sync with PHP-CLI
  sed -i "s/^timeout .*/timeout ${_TUNE_PHP_CLI_TIMEOUT}/g" /etc/redis/redis.conf                                   &> /dev/null
  wait
}
#
# Update innodb_log_file_size.
update_innodb_log_file_size() {
  msg "INFO: InnoDB log file will be set to ${_INNODB_LOG_FILE_SIZE_MB}..."
  if [ "${_DB_SERIES}" = "10.3" ] \
    || [ "${_DB_SERIES}" = "10.2" ] \
    || [ "${_DB_SERIES}" = "10.1" ] \
    || [ "${_DB_SERIES}" = "5.7" ]; then
    mysql -u root -e "SET GLOBAL innodb_max_dirty_pages_pct = 0;" &> /dev/null
    mysql -u root -e "SET GLOBAL innodb_buffer_pool_dump_at_shutdown = 1;" &> /dev/null
    mysql -u root -e "SET GLOBAL innodb_io_capacity = 2000;" &> /dev/null
    mysql -u root -e "SET GLOBAL innodb_io_capacity_max = 4000;" &> /dev/null
    mysql -u root -e "SET GLOBAL innodb_buffer_pool_dump_pct = 100;" &> /dev/null
    mysql -u root -e "SET GLOBAL innodb_fast_shutdown = 0;" &> /dev/null
  fi
  mrun "service mysql stop" &> /dev/null
  echo "Waiting 15 seconds..."
  mrun "sleep 15"
  if [ ! -e "/var/run/mysqld/mysqld.sock" ] \
    && [ ! -e "/var/run/mysqld/mysqld.pid" ]; then
    mkdir -p ${vBs}/old-sql-ib-log-${_NOW}
    mrun "sleep 5"
    mv -f /var/lib/mysql/ib_logfile0 ${vBs}/old-sql-ib-log-${_NOW}/ &> /dev/null
    mv -f /var/lib/mysql/ib_logfile1 ${vBs}/old-sql-ib-log-${_NOW}/ &> /dev/null
    sed -i "s/.*innodb_log_file_size.*/innodb_log_file_size    = ${_INNODB_LOG_FILE_SIZE_MB}/g" /etc/mysql/my.cnf
    wait
    echo "Waiting 15 seconds..."
    mrun "sleep 15"
  fi
  if [ ! -e "/var/run/mysqld/mysqld.sock" ]; then
    service mysql start &> /dev/null
  fi
}
#
restore_default_sql() {
  msg "INFO: Restoring default SQL configuration"
  sed -i "s/.*check_for_crashed_tables/#check_for_crashed_tables/g" /etc/mysql/debian-start &> /dev/null
  wait
  if [ "${_CUSTOM_CONFIG_SQL}" = "NO" ] \
    || [[ "${_THISHOST}" =~ ".host8." ]] \
    || [[ "${_THISHOST}" =~ ".boa.io" ]] \
    || [ "${_VMFAMILY}" = "VS" ]; then
    if [ "${_CUSTOM_CONFIG_SQL}" = "YES" ]; then
      _DO_NOTHING=YES
    else
      cp -af /etc/mysql/my.cnf \
        /var/backups/dragon/t/my.cnf-pre-${_X_VERSION}-${_NOW} &> /dev/null
      cp -af ${locCnf}/my.cnf.txt /etc/mysql/my.cnf
      _INNODB_LOG_FILE_SIZE=${_INNODB_LOG_FILE_SIZE//[^0-9]/}
      if [ ! -z "${_INNODB_LOG_FILE_SIZE}" ]; then
        if [ "${_INNODB_LOG_FILE_SIZE}" -ge "50" ]; then
          _INNODB_LOG_FILE_SIZE_MB="${_INNODB_LOG_FILE_SIZE}M"
          _INNODB_LOG_FILE_SIZE_TEST=$(grep "^innodb_log_file_size" \
            /var/backups/dragon/t/my.cnf-pre-${_X_VERSION}-${_NOW} 2>&1)
          if [[ "${_INNODB_LOG_FILE_SIZE_TEST}" =~ "= ${_INNODB_LOG_FILE_SIZE_MB}" ]]; then
            _INNODB_LOG_FILE_SIZE_SAME=YES
          else
            _INNODB_LOG_FILE_SIZE_SAME=NO
          fi
        fi
      fi
      sed -i "s/.*slow_query_log/#slow_query_log/g"           /etc/mysql/my.cnf
      wait
      sed -i "s/.*long_query_time/#long_query_time/g"         /etc/mysql/my.cnf
      wait
      sed -i "s/.*slow_query_log_file/#slow_query_log_file/g" /etc/mysql/my.cnf
      wait
      if [ ! -e "/etc/mysql/skip-name-resolve.txt" ]; then
        sed -i "s/.*skip-name-resolve/#skip-name-resolve/g"   /etc/mysql/my.cnf
        wait
      fi
    fi
  fi
  mv -f /etc/mysql/my.cnf-pre* /var/backups/dragon/t/ &> /dev/null
  sed -i "s/.*default-table-type/#default-table-type/g" /etc/mysql/my.cnf &> /dev/null
  wait
  sed -i "s/.*language/#language/g" /etc/mysql/my.cnf &> /dev/null
  wait
  sed -i "s/.*innodb_lazy_drop_table.*//g" /etc/mysql/my.cnf &> /dev/null
  wait
  if [ "${_CUSTOM_CONFIG_SQL}" = "NO" ]; then
    if [ "${_DB_BINARY_LOG}" = "NO" ]; then
      sed -i "s/.*purge_binlogs.*//g" /var/spool/cron/crontabs/root
      wait
      sed -i "/^$/d" /var/spool/cron/crontabs/root
      bash /var/xdrago/purge_binlogs.sh                                  &> /dev/null
      wait
      sed -i "s/^log_bin/#log_bin/g"                   /etc/mysql/my.cnf
      wait
      sed -i "s/^expire_logs_days/#expire_logs_days/g" /etc/mysql/my.cnf
      wait
      sed -i "s/^max_binlog_size/#max_binlog_size/g"   /etc/mysql/my.cnf
      wait
      sed -i "s/^binlog_row_image/#binlog_row_image/g" /etc/mysql/my.cnf
      wait
      sed -i "s/^binlog_format/#binlog_format/g"       /etc/mysql/my.cnf
      wait
    elif [ "${_DB_BINARY_LOG}" = "YES" ]; then
      sed -i "s/.*log_bin/log_bin/g"                   /etc/mysql/my.cnf
      wait
      sed -i "s/.*expire_logs_days/expire_logs_days/g" /etc/mysql/my.cnf
      wait
      sed -i "s/.*max_binlog_size/max_binlog_size/g"   /etc/mysql/my.cnf
      wait
      sed -i "s/.*binlog_row_image/binlog_row_image/g" /etc/mysql/my.cnf
      wait
      sed -i "s/.*binlog_format/binlog_format/g"       /etc/mysql/my.cnf
      wait
    fi
    if [ ! -z "${_INNODB_LOG_FILE_SIZE}" ]; then
      if [ "${_INNODB_LOG_FILE_SIZE}" -ge "50" ]; then
        _INNODB_LOG_FILE_SIZE_MB="${_INNODB_LOG_FILE_SIZE}M"
        _INNODB_LOG_FILE_SIZE_TEST=$(grep "^innodb_log_file_size" /etc/mysql/my.cnf 2>&1)
        if [[ "${_INNODB_LOG_FILE_SIZE_TEST}" =~ "= ${_INNODB_LOG_FILE_SIZE_MB}" ]]; then
          _DO_NOTHING=YES
        else
          if [ "${_INNODB_LOG_FILE_SIZE_SAME}" = "YES" ]; then
            sed -i "s/.*innodb_log_file_size.*/innodb_log_file_size    = ${_INNODB_LOG_FILE_SIZE_MB}/g" \
              /etc/mysql/my.cnf &> /dev/null
            wait
          else
            update_innodb_log_file_size
          fi
        fi
      fi
    fi
  fi
}
#
tune_sql() {
  msg "INFO: Tuning SQL configuration"
  sed -i "s/9999/${_TUNE_SQL_TIMEOUT}/g" /etc/mysql/my.cnf     &> /dev/null
  wait
  sed -i "s/9999/${_TUNE_SQL_TIMEOUT}/g" /var/xdrago/minute.sh &> /dev/null
  wait
}
#
restore_default_nginx() {
  msg "INFO: Restoring default Nginx configuration"
  cd /var/xdrago/monitor/check
  cp -af ${bldPth}/aegir/tools/system/monitor/check/scan_nginx ./
  if [ -d "${_TUNE_HOSTMASTER}" ]; then
    for Files in `find ${_TUNE_HOSTMASTER}/config/server_master/nginx/vhost.d -type f`; do
      sed -i "s/#limit_conn /limit_conn /g" $Files &> /dev/null
      wait
    done
  fi
  su -s /bin/bash - aegir -c "drush @server_master provision-verify" &> /dev/null
  mrun "sleep 8"
}
#
tune_nginx() {
  msg "INFO: Tuning Nginx configuration"
  sed -i "s/ = 300/ = ${_TUNE_NGINX_FIREWALL}/g" /var/xdrago/monitor/check/scan_nginx  &> /dev/null
  wait
  sed -i "s/60/${_TUNE_NGINX_TIMEOUT}/g" /var/aegir/config/server_master/nginx.conf    &> /dev/null
  wait
  sed -i "s/300/${_TUNE_NGINX_TIMEOUT}/g" /var/aegir/config/server_master/nginx.conf   &> /dev/null
  wait
  sed -i "s/180/${_TUNE_NGINX_TIMEOUT}/g" /var/aegir/config/server_master/nginx.conf   &> /dev/null
  wait
  if [ "${_TUNE_NGINX_CONNECT}" = "OFF" ]; then
    sed -i "s/limit_conn /#limit_conn /g" /var/aegir/config/server_master/nginx.conf &> /dev/null
    wait
    if [ -d "${_TUNE_HOSTMASTER}" ]; then
      for Files in `find ${_TUNE_HOSTMASTER}/config/server_master/nginx/vhost.d -type f`; do
        sed -i "s/limit_conn /#limit_conn /g" $Files &> /dev/null
        wait
      done
    fi
  fi
}
#
restart_services() {
  msg "INFO: Reloading services"
  if [ -e "/etc/init.d/php73-fpm" ]; then
    mrun "service php73-fpm reload" &> /dev/null
  fi
  if [ -e "/etc/init.d/php72-fpm" ]; then
    mrun "service php72-fpm reload" &> /dev/null
  fi
  if [ -e "/etc/init.d/php71-fpm" ]; then
    mrun "service php71-fpm reload" &> /dev/null
  fi
  if [ -e "/etc/init.d/php70-fpm" ]; then
    mrun "service php70-fpm reload" &> /dev/null
  fi
  if [ -e "/etc/init.d/php56-fpm" ]; then
    mrun "service php56-fpm reload" &> /dev/null
  fi
  mrun "bash /var/xdrago/move_sql.sh" &> /dev/null
  mrun "service nginx reload" &> /dev/null
  service redis-server stop &> /dev/null
  killall -9 redis-server &> /dev/null
  service redis-server start &> /dev/null
  if [ -e "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
    mrun "csf -q" &> /dev/null
    sleep 8
    ### Linux kernel TCP SACK CVEs mitigation
    ### CVE-2019-11477 SACK Panic
    ### CVE-2019-11478 SACK Slowness
    ### CVE-2019-11479 Excess Resource Consumption Due to Low MSS Values
    if [ -e "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
      _SACK_TEST=$(ip6tables --list | grep tcpmss 2>&1)
      if [[ ! "${_SACK_TEST}" =~ "tcpmss" ]]; then
        sysctl net.ipv4.tcp_mtu_probing=0 &> /dev/null
        iptables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
        ip6tables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
      fi
    fi
  fi
}
#
# Tune Web Sever configuration.
tune_web_server_config() {
  _LIM_FPM="${_L_PHP_FPM_WORKERS}"
  if [ "${_LIM_FPM}" -lt "48" ]; then
    if [[ "${_THISHOST}" =~ ".host8." ]] \
      || [[ "${_THISHOST}" =~ ".boa.io" ]] \
      || [ "${_VMFAMILY}" = "VS" ]; then
      _LIM_FPM=48
    fi
  fi
  _PROCESS_MAX_FPM=$(( _LIM_FPM * 5 ))
  _CHILD_MAX_FPM=$(( _LIM_FPM * 2 ))
  if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
    _DO_NOTHING=YES
  else
    _PHP_FPM_WORKERS=${_PHP_FPM_WORKERS//[^0-9]/}
    if [ ! -z "${_PHP_FPM_WORKERS}" ] && [ "${_PHP_FPM_WORKERS}" -gt "0" ]; then
      _CHILD_MAX_FPM="${_PHP_FPM_WORKERS}"
    fi
  fi
  _PHP_V="73 72 71 70 56"
  for e in ${_PHP_V}; do
    sed -i "s/process.max =.*/process.max = ${_PROCESS_MAX_FPM}/g" \
      /opt/php${e}/etc/php${e}-fpm.conf &> /dev/null
    wait
    sed -i "s/pm.max_children =.*/pm.max_children = ${_CHILD_MAX_FPM}/g" \
      /opt/php${e}/etc/pool.d/www${e}.conf &> /dev/null
    wait
    if [ ! -z "${_PHP_FPM_DENY}" ]; then
      sed -i "s/passthru,/${_PHP_FPM_DENY},/g" \
        /opt/php${e}/etc/pool.d/www${e}.conf &> /dev/null
      wait
    fi
  done
  # PHP-FPM INI
  sed -i "s/^default_socket_timeout =.*/default_socket_timeout = 180/g" /opt/php*/etc/php*.ini &> /dev/null
  wait
  sed -i "s/^max_execution_time =.*/max_execution_time = 180/g" /opt/php*/etc/php*.ini         &> /dev/null
  wait
  sed -i "s/^max_input_time =.*/max_input_time = 180/g" /opt/php*/etc/php*.ini                 &> /dev/null
  wait
  # PHP-CLI INI
  sed -i "s/^default_socket_timeout =.*/default_socket_timeout = 9999/g" /opt/php*/lib/php.ini &> /dev/null
  wait
  sed -i "s/^max_execution_time =.*/max_execution_time = 9999/g" /opt/php*/lib/php.ini         &> /dev/null
  wait
  sed -i "s/^max_input_time =.*/max_input_time = 9999/g" /opt/php*/lib/php.ini                 &> /dev/null
  wait
  # Redis config should sync with PHP-CLI
  sed -i "s/^timeout .*/timeout 9999/g" /etc/redis/redis.conf                                  &> /dev/null
  wait
}
#
# Tune memory limits for SQL server.
tune_sql_memory_limits() {
  # https://raw.githubusercontent.com/major/MySQLTuner-perl/master/mysqltuner.pl
  pthTun="/var/opt/mysqltuner.pl"
  outTun="/var/opt/mysqltuner-${_X_VERSION}-${_NOW}.txt"
  if [ -e "/root/.mstr.clstr.cnf" ] \
    || [ -e "/root/.wbhd.clstr.cnf" ] \
    || [ -e "/root/.dbhd.clstr.cnf" ]; then
    _GALERA_COMP=NO
  fi
  if [ ! -e "${outTun}" ] \
    && [ "${_STATUS}" = "UPGRADE" ] \
    && [ -z "${_GALERA_COMP}" ]; then
    msg "INFO: Running MySQLTuner check on all databases..."
    msg "NOTE! This step may take a LONG time, please wait..."
    _MYSQLTUNER_TEST_RESULT=OK
    rm -f /var/opt/mysqltuner*
    curl ${crlGet} "${urlDev}/mysqltuner.pl.${_MYSQLTUNER_VRN}" -o ${pthTun}
    if [ ! -e "${pthTun}" ]; then
      curl ${crlGet} "${urlDev}/mysqltuner.pl" -o ${pthTun}
    fi
    if [ -e "${pthTun}" ]; then
      perl ${pthTun} > ${outTun} 2>&1
    fi
  fi
  if [ -e "${pthTun}" ] \
    && [ -e "${outTun}" ] \
    && [ "${_STATUS}" = "UPGRADE" ]; then
    _REC_MYISAM_MEM=$(cat ${outTun} \
      | grep "Data in MyISAM tables" \
      | cut -d: -f2 \
      | awk '{ print $1}' 2>&1)
    _REC_INNODB_MEM=$(cat ${outTun} \
      | grep "data size:" \
      | cut -d/ -f3 \
      | awk '{ print $1}' 2>&1)
    _MYSQLTUNER_TEST=$(cat ${outTun} 2>&1)
    cp -a ${outTun} ${pthLog}/
    if [ -z "${_REC_INNODB_MEM}" ] \
      || [[ "${_MYSQLTUNER_TEST}" =~ "Cannot calculate MyISAM index" ]] \
      || [[ "${_MYSQLTUNER_TEST}" =~ "InnoDB is enabled but isn" ]]; then
      _MYSQLTUNER_TEST_RESULT=FAIL
      msg "ALRT! The MySQLTuner test failed!"
      msg "ALRT! Please review ${outTun}"
      msg "ALRT! We will use some sane SQL defaults instead, do not worry!"
    fi
    ###--------------------###
    if [ ! -z "${_REC_MYISAM_MEM}" ] \
      && [ "${_MYSQLTUNER_TEST_RESULT}" = "OK" ]; then
      _RAW_MYISAM_MEM=$(echo ${_REC_MYISAM_MEM} | sed "s/[A-Z]//g" 2>&1)
      if [[ "${_REC_MYISAM_MEM}" =~ "G" ]]; then
        _RAW_MYISAM_MEM=$(( _RAW_MYISAM_MEM * 1024 ))
      fi
      if [ "${_RAW_MYISAM_MEM}" -gt "${_USE_SQL}" ]; then
        _USE_MYISAM_MEM="${_USE_SQL}"
      else
        _USE_MYISAM_MEM="${_RAW_MYISAM_MEM}"
      fi
      if [ "${_USE_MYISAM_MEM}" -lt "256" ] || [ -z "${_USE_MYISAM_MEM}" ]; then
        _USE_MYISAM_MEM="${_USE_SQL}"
      fi
      _USE_MYISAM_MEM="${_USE_MYISAM_MEM}M"
      # sed -i "s/^key_buffer_size.*/key_buffer_size         = ${_USE_MYISAM_MEM}/g"  /etc/mysql/my.cnf
      wait
    else
      _USE_MYISAM_MEM="${_USE_SQL}M"
      if [ "${_MYSQLTUNER_TEST_RESULT}" = "FAIL" ]; then
        msg "ALRT! _USE_MYISAM_MEM is ${_USE_MYISAM_MEM} because _REC_MYISAM_MEM was empty!"
      fi
      # sed -i "s/^key_buffer_size.*/key_buffer_size         = ${_USE_MYISAM_MEM}/g"  /etc/mysql/my.cnf
      wait
    fi
    ###--------------------###
    if [ ! -z "${_REC_INNODB_MEM}" ] && [ "${_MYSQLTUNER_TEST_RESULT}" = "OK" ]; then
      _RAW_INNODB_MEM=$(echo ${_REC_INNODB_MEM} | sed "s/[A-Z]//g" 2>&1)
      if [[ "${_REC_INNODB_MEM}" =~ "G" ]]; then
        _RAW_INNODB_MEM=$(echo ${_RAW_INNODB_MEM} | awk '{print int($1+0.6)}' 2>&1)
        _RAW_INNODB_MEM=$(echo "${_RAW_INNODB_MEM} * 1024" | bc -l 2>&1)
      elif [[ "${_REC_INNODB_MEM}" =~ "M" ]]; then
        _RAW_INNODB_MEM=$(echo ${_RAW_INNODB_MEM} | awk '{print int($1+0.6)}' 2>&1)
        _RAW_INNODB_MEM=$(echo "${_RAW_INNODB_MEM} * 1" | bc -l 2>&1)
      fi
      _RAW_INNODB_MEM=$(echo "(${_RAW_INNODB_MEM}+0.5)/1" | bc 2>&1)
      if [ "${_RAW_INNODB_MEM}" -gt "${_USE_SQL}" ] \
        || [ -z "${_USE_INNODB_MEM}" ] \
        || [ "${_RAW_INNODB_MEM}" -lt "512" ]; then
        _USE_INNODB_MEM="${_USE_SQL}"
      else
        _RAW_INNODB_MEM=$(echo "scale=2; (${_RAW_INNODB_MEM} * 1.1)" | bc 2>&1)
        _USE_INNODB_MEM=$(echo "(${_RAW_INNODB_MEM}+0.5)/1" | bc 2>&1)
      fi
      _INNODB_BPI=$(echo "scale=0; ${_USE_INNODB_MEM}/1024" | bc 2>&1)
      if [ "${_INNODB_BPI}" -lt "1" ] || [ -z "${_INNODB_BPI}" ]; then
        _INNODB_BPI="1"
      fi
      sed -i "s/^innodb_buffer_pool_instances.*/innodb_buffer_pool_instances = ${_INNODB_BPI}/g" /etc/mysql/my.cnf
      wait
      sed -i "s/^innodb_page_cleaners.*/innodb_page_cleaners = ${_INNODB_BPI}/g" /etc/mysql/my.cnf
      wait
      _USE_INNODB_MEM="${_USE_INNODB_MEM}M"
      sed -i "s/^innodb_buffer_pool_size.*/innodb_buffer_pool_size = ${_USE_INNODB_MEM}/g"  /etc/mysql/my.cnf
      wait
    else
      _USE_INNODB_MEM="${_USE_SQL}M"
      msg "ALRT! _USE_INNODB_MEM is ${_USE_INNODB_MEM} because _REC_INNODB_MEM was empty!"
      sed -i "s/^innodb_buffer_pool_size.*/innodb_buffer_pool_size = ${_USE_INNODB_MEM}/g"  /etc/mysql/my.cnf
      wait
    fi
  else
    _THIS_USE_MEM="${_USE_SQL}M"
    if [ "${_MYSQLTUNER_TEST_RESULT}" = "FAIL" ] \
      && [ "${_STATUS}" = "UPGRADE" ] \
      && [ -z "${_GALERA_COMP}" ]; then
      msg "ALRT! _USE_MYISAM_MEM is ${_THIS_USE_MEM} because _REC_MYISAM_MEM was empty!"
      msg "ALRT! _USE_INNODB_MEM is ${_THIS_USE_MEM} because _REC_INNODB_MEM was empty!"
    fi
    sed -i "s/= 181/= ${_USE_SQL}/g"  /etc/mysql/my.cnf
    wait
  fi
}
#
# Tune memory limits for PHP, Nginx and MariaDB.
tune_memory_limits() {
  msg "INFO: Default Memory Tuning"
  _VM_TEST=$(uname -a 2>&1)
  _AWS_TEST_A=$(dmidecode -s bios-version 2>&1)
  _AWS_TEST_B=$(head -c 3 /sys/hypervisor/uuid 2>&1)
  if [ -e "/proc/bean_counters" ]; then
    _VMFAMILY="VZ"
  else
    _VMFAMILY="XEN"
  fi
  if [[ "${_VM_TEST}" =~ "-beng" ]]; then
    _VMFAMILY="VS"
  fi
  if [[ "${_AWS_TEST_A}" =~ "amazon" ]] \
    || [[ "${_AWS_TEST_B}" =~ "ec2" ]]; then
    _VMFAMILY="AWS"
  fi
  _CPU_INFO=$(grep -c processor /proc/cpuinfo 2>&1)
  _CPU_INFO=${_CPU_INFO//[^0-9]/}
  _NPROC_TEST=$(which nproc 2>&1)
  if [ -z "${_NPROC_TEST}" ]; then
    _CPU_NR="${_CPU_INFO}"
  else
    _CPU_NR=$(nproc 2>&1)
  fi
  _CPU_NR=${_CPU_NR//[^0-9]/}
  if [ ! -z "${_CPU_NR}" ] && [ ! -z "${_CPU_INFO}" ] \
    && [ "${_CPU_NR}" -gt "${_CPU_INFO}" ] && [ "${_CPU_INFO}" -gt "0" ]; then
    _CPU_NR="${_CPU_INFO}"
  fi
  if [ -z "${_CPU_NR}" ] || [ "${_CPU_NR}" -lt "1" ]; then
    _CPU_NR=1
  fi
  _CPU_MX=$(( _CPU_NR * 2 ))
  if [ "${_CPU_MX}" -lt "4" ]; then
    _CPU_MX=4
  fi
  _CPU_TG=$(( _CPU_NR / 2 ))
  if [ "${_CPU_TG}" -lt "4" ]; then
    _CPU_TG=4
  fi
  _CPU_VS=$(( _CPU_NR / 12 ))
  if [ "${_CPU_VS}" -lt "2" ]; then
    _CPU_VS=2
  fi
  PrTest=$(grep "POWER" /root/.*.octopus.cnf 2>&1)
  if [[ "${PrTest}" =~ "POWER" ]]; then
    if [ "${_CPU_VS}" -lt "8" ]; then
      _CPU_VS=8
    fi
  fi
  PrTest=$(grep "CLUSTER" /root/.*.octopus.cnf 2>&1)
  if [[ "${PrTest}" =~ "CLUSTER" ]]; then
    if [ "${_CPU_VS}" -lt "8" ]; then
      _CPU_VS=8
    fi
  fi
  _RAM=$(free -mt | grep Mem: | awk '{ print $2 }' 2>&1)
  if [ "${_RESERVED_RAM}" -gt "0" ]; then
    _RAM=$(( _RAM - _RESERVED_RAM ))
  fi
  _USE=$(( _RAM / 4 ))
  if [ "${_VMFAMILY}" = "VS" ] \
    || [[ "${_THISHOST}" =~ ".boa.io" ]] \
    || [[ "${_THISHOST}" =~ ".host8." ]]; then
    if [ "${_VMFAMILY}" = "VS" ]; then
      if [ -e "/root/.tg.cnf" ]; then
        _USE_SQL=$(( _RAM / 12 ))
      else
        _USE_SQL=$(( _RAM / 24 ))
      fi
    else
      _USE_SQL=$(( _RAM / 8 ))
    fi
  else
    _USE_SQL=$(( _RAM / 8 ))
  fi
  if [ "${_USE_SQL}" -lt "1024" ]; then
    _USE_SQL=1024
  fi
  _TMP_SQL="${_USE_SQL}M"
  _SRT_SQL=$(( _USE_SQL * 2 ))
  _SRT_SQL="${_SRT_SQL}K"
  if [ "${_USE}" -ge "512" ] && [ "${_USE}" -lt "2048" ]; then
    _USE_PHP=4096
    _USE_OPC=4096
    _USE_CLI=8192
    _QCE_SQL=64M
    _RND_SQL=8M
    _JBF_SQL=4M
    if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
      _L_PHP_FPM_WORKERS=24
    else
      _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
    fi
    _MXC_SQL=$(( _L_PHP_FPM_WORKERS * 4 ))
    if [ "${_NGINX_WORKERS}" = "AUTO" ]; then
      _L_NGX_WRKS=${_CPU_MX}
    else
      _L_NGX_WRKS=${_NGINX_WORKERS}
    fi
  elif [ "${_USE}" -ge "2048" ]; then
    if [ "${_VMFAMILY}" = "XEN" ] || [ "${_VMFAMILY}" = "AWS" ]; then
      _USE_PHP=4096
      _USE_OPC=4096
      _USE_CLI=8192
      _QCE_SQL=64M
      _RND_SQL=8M
      _JBF_SQL=4M
      if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
        _L_PHP_FPM_WORKERS=48
      else
        _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
      fi
      _MXC_SQL=$(( _L_PHP_FPM_WORKERS * 4 ))
      if [ "${_NGINX_WORKERS}" = "AUTO" ]; then
        _L_NGX_WRKS=${_CPU_MX}
      else
        _L_NGX_WRKS=${_NGINX_WORKERS}
      fi
    elif [ "${_VMFAMILY}" = "VS" ] || [ "${_VMFAMILY}" = "TG" ]; then
      if [ -e "/boot/grub/grub.cfg" ] \
        || [ -e "/boot/grub/menu.lst" ] \
        || [ -e "/root/.tg.cnf" ]; then
        _USE_PHP=8192
        _USE_OPC=8192
        _USE_CLI=24576
        _QCE_SQL=64M
        _RND_SQL=8M
        _JBF_SQL=4M
        if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
          _L_PHP_FPM_WORKERS=48
        else
          _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
        fi
        _MXC_SQL=$(( _L_PHP_FPM_WORKERS * 4 ))
        if [ "${_MXC_SQL}" -lt "48" ]; then
          _MXC_SQL=48
        fi
        if [ "${_NGINX_WORKERS}" = "AUTO" ]; then
          _L_NGX_WRKS=${_CPU_TG}
        else
          _L_NGX_WRKS=${_NGINX_WORKERS}
        fi
        sed -i "s/64000/128000/g"  /opt/php73/etc/php73.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php72/etc/php72.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php71/etc/php71.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php70/etc/php70.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php56/etc/php56.ini &> /dev/null
      else
        _USE_PHP=2048
        _USE_OPC=2048
        _USE_CLI=4096
        _QCE_SQL=64M
        _RND_SQL=2M
        _JBF_SQL=2M
        if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
          _L_PHP_FPM_WORKERS=24
        else
          _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
        fi
        _MXC_SQL=$(( _L_PHP_FPM_WORKERS * 4 ))
        if [ "${_NGINX_WORKERS}" = "AUTO" ]; then
          _L_NGX_WRKS=${_CPU_VS}
        else
          _L_NGX_WRKS=${_NGINX_WORKERS}
        fi
      fi
    else
      _USE_PHP=2048
      _USE_OPC=2048
      _USE_CLI=4096
      _QCE_SQL=64M
      _RND_SQL=2M
      _JBF_SQL=2M
      if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
        _L_PHP_FPM_WORKERS=24
      else
        _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
      fi
      _MXC_SQL=$(( _L_PHP_FPM_WORKERS * 4 ))
      if [ "${_NGINX_WORKERS}" = "AUTO" ]; then
        _L_NGX_WRKS=${_CPU_MX}
      else
        _L_NGX_WRKS=${_NGINX_WORKERS}
      fi
    fi
  else
    _USE_PHP="${_USE}"
    _USE_OPC="${_USE}"
    _USE_CLI="${_USE}"
    _QCE_SQL=64M
    _RND_SQL=1M
    _JBF_SQL=1M
    if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
      _L_PHP_FPM_WORKERS=6
    else
      _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
    fi
    _MXC_SQL=$(( _L_PHP_FPM_WORKERS * 4 ))
    if [ "${_NGINX_WORKERS}" = "AUTO" ]; then
      _L_NGX_WRKS=${_CPU_MX}
    else
      _L_NGX_WRKS=${_NGINX_WORKERS}
    fi
  fi
  _USE_JETTY="-Xmx${_USE_OPC}m"
  if [ "${_VMFAMILY}" = "VZ" ]; then
    _USE_OPC=64
  fi
  _USE_FPM=$(( _USE_PHP / 2 ))
  if [ "${_USE_FPM}" -lt "256" ]; then
    _USE_FPM=256
  fi
  if [ "${_USE_PHP}" -lt "2048" ]; then
    _USE_PHP=2048
  fi
  if [ ! -e "/var/xdrago/conf/fpm-pool-foo-multi.conf" ]; then
    mkdir -p /var/xdrago/conf
  fi
  if [ ! -e "/data/conf" ]; then
    mkdir -p /data/conf
  fi
  cp -af ${locCnf}/fpm-pool-foo-multi.conf /var/xdrago/conf/
  cp -af ${locCnf}/fpm-pool-foo.conf /var/xdrago/conf/
  cp -af ${locCnf}/hhvm /var/xdrago/conf/
  cp -af ${locCnf}/hhvm/hhvm_intercept.php /data/conf/hhvm_intercept.php
  chmod 644 /data/conf/hhvm_intercept.php
  if [ -e "/opt/etc/fpm/fpm-pool-common.conf" ]; then
    sed -i "s/256/${_USE_FPM}/g" /opt/etc/fpm/fpm-pool-common.conf &> /dev/null
    wait
  fi
  if [ -e "/opt/php73/etc/php73.ini" ]; then
    sed -i "s/256/${_USE_FPM}/g" /opt/php73/etc/php73.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php73/etc/php73.ini &> /dev/null
    sed -i "s/256/${_USE_CLI}/g" /opt/php73/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php72/etc/php72.ini" ]; then
    sed -i "s/256/${_USE_FPM}/g" /opt/php72/etc/php72.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php72/etc/php72.ini &> /dev/null
    sed -i "s/256/${_USE_CLI}/g" /opt/php72/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php71/etc/php71.ini" ]; then
    sed -i "s/256/${_USE_FPM}/g" /opt/php71/etc/php71.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php71/etc/php71.ini &> /dev/null
    sed -i "s/256/${_USE_CLI}/g" /opt/php71/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php70/etc/php70.ini" ]; then
    sed -i "s/256/${_USE_FPM}/g" /opt/php70/etc/php70.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php70/etc/php70.ini &> /dev/null
    sed -i "s/256/${_USE_CLI}/g" /opt/php70/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php56/etc/php56.ini" ]; then
    sed -i "s/256/${_USE_FPM}/g" /opt/php56/etc/php56.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php56/etc/php56.ini &> /dev/null
    sed -i "s/256/${_USE_CLI}/g" /opt/php56/lib/php.ini   &> /dev/null
  fi
  if [ "${_CUSTOM_CONFIG_SQL}" = "NO" ]; then
    tune_sql_memory_limits
    if [[ "${PrTest}" =~ "POWER" ]] \
      || [[ "${PrTest}" =~ "CLUSTER" ]]; then
      _UXC_SQL="${_MXC_SQL}"
    else
      _UXC_SQL=$(( _MXC_SQL / 2 ))
    fi
    sed -i "s/= 191/= ${_UXC_SQL}/g"                                              /etc/mysql/my.cnf
    wait
    sed -i "s/= 292/= ${_MXC_SQL}/g"                                              /etc/mysql/my.cnf
    wait
    sed -i "s/^tmp_table_size.*/tmp_table_size          = ${_TMP_SQL}/g"          /etc/mysql/my.cnf
    wait
    sed -i "s/^max_heap_table_size.*/max_heap_table_size     = ${_TMP_SQL}/g"     /etc/mysql/my.cnf
    wait
    sed -i "s/^myisam_sort_buffer_size.*/myisam_sort_buffer_size = ${_SRT_SQL}/g" /etc/mysql/my.cnf
    wait
    sed -i "s/^read_rnd_buffer_size.*/read_rnd_buffer_size    = ${_RND_SQL}/g"    /etc/mysql/my.cnf
    wait
    sed -i "s/^join_buffer_size.*/join_buffer_size        = ${_JBF_SQL}/g"        /etc/mysql/my.cnf
    wait
  fi
  if [ "${_USE_OPC}" -gt "4096" ]; then
    _MAX_MEM_REDIS=4096
  else
    _MAX_MEM_REDIS="${_USE_OPC}"
  fi
  _MAX_MEM_REDIS="${_MAX_MEM_REDIS}MB"
  sed -i "s/^maxmemory .*/maxmemory ${_MAX_MEM_REDIS}/g" \
    /etc/redis/redis.conf &> /dev/null
  wait
  if [ -e "/etc/default/jetty9" ] && [ -e "/opt/solr4" ]; then
    sed -i "s/^JAVA_OPTIONS.*/JAVA_OPTIONS=\"-Xms8m ${_USE_JETTY} -Djava.awt.headless=true -Dsolr.solr.home=\/opt\/solr4 \$JAVA_OPTIONS\" # Options/g" /etc/default/jetty9
    wait
  fi
  if [ -e "/etc/default/jetty8" ] && [ -e "/opt/solr3" ]; then
    sed -i "s/^JAVA_OPTIONS.*/JAVA_OPTIONS=\"-Xms8m ${_USE_JETTY} -Djava.awt.headless=true -Dsolr.solr.home=\/opt\/solr3 \$JAVA_OPTIONS\" # Options/g" /etc/default/jetty8
    wait
  fi
  if [ -e "/etc/default/jetty7" ] && [ -e "/opt/solr1" ]; then
    sed -i "s/^JAVA_OPTIONS.*/JAVA_OPTIONS=\"-Xms8m ${_USE_JETTY} -Djava.awt.headless=true -Dsolr.solr.home=\/opt\/solr1 \$JAVA_OPTIONS\" # Options/g" /etc/default/jetty7
    wait
  fi
  tune_web_server_config
}
#
check_git_repos() {
  _GITHUB_WORKS=NO
  _GITLAB_WORKS=NO
  if [ "${_FORCE_GIT_MIRROR}" = "drupal" ]; then
    _FORCE_GIT_MIRROR=github
  fi
  if [ "${_FORCE_GIT_MIRROR}" = "gitorious" ]; then
    _FORCE_GIT_MIRROR=gitlab
  fi
  if [ "${_FORCE_GIT_MIRROR}" = "github" ]; then
    msg "INFO: We will use forced GitHub repository without testing connection"
    _GITHUB_WORKS=YES
    _GITLAB_WORKS=NO
    sleep 1
  elif [ "${_FORCE_GIT_MIRROR}" = "gitlab" ]; then
    msg "INFO: We will use forced GitLab mirror without testing connection"
    _GITHUB_WORKS=NO
    _GITLAB_WORKS=YES
    sleep 1
  else
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      msg "INFO: Testing repository mirror servers availability..."
    fi
    sleep 1
    _GITHUB_WORKS=YES
    _GITLAB_WORKS=YES
    if ! netcat -w 10 -z github.com 443 ; then
      _GITHUB_WORKS=NO
      msg "WARN: The GitHub master repository server doesn't respond..."
    elif ! netcat -w 10 -z gitlab.com 443 ; then
      _GITLAB_WORKS=NO
      msg "WARN: The GitLab mirror repository server doesn't respond..."
    fi
  fi
  if [ "$_GITHUB_WORKS" = "YES" ]; then
    _BOA_REPO_NAME="boa"
    _BOA_REPO_GIT_URL="https://github.com/omega8cc"
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      msg "INFO: GitHub master repository will be used"
    fi
  elif [ "$_GITLAB_WORKS" = "YES" ]; then
    _BOA_REPO_NAME="boa"
    _BOA_REPO_GIT_URL="${gitLab}"
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      msg "INFO: GitLab mirror repository will be used"
    fi
  else
    cat <<EOF

    None of repository servers responded in 8 seconds,
    so we can't continue this installation.

    Please try again later or check if your firewall has port 443 open.

    Bye.

EOF
    clean_pid_exit
  fi
}


###---### init
#
touch /var/run/boa_run.pid
#
_BOA_REPO_NAME="boa"
_BOA_REPO_GIT_URL="https://github.com/omega8cc"
if [ "${_AEGIR_VERSION}" = "HEAD" ]; then
  check_git_repos
fi
#
#
if [ `whoami` = "root" ]; then
  chmod a+w /dev/null
  if [ ! -e "/dev/fd" ]; then
    if [ -e "/proc/self/fd" ]; then
      rm -rf /dev/fd
      ln -s /proc/self/fd /dev/fd
    fi
  fi
  msg "INFO: This script is ran as a root user"
  find_fast_mirror
else
  msg "ERROR: This script should be ran as a root user"
  msg "Bye"
  clean_pid_exit
fi
#
#
if [ ! -f "/var/log/barracuda_log.txt" ]; then
  msg "ERROR: Please upgrade this system to BOA version ${_X_VERSION} first"
  msg "Bye"
  clean_pid_exit
else
  _VERSIONS_TEST=$(cat /var/log/barracuda_log.txt 2>&1)
  if [[ "${_VERSIONS_TEST}" =~ "${_X_VERSION}" ]]; then
    _VERSIONS_TEST_RESULT=OK
  else
    msg "ERROR: Please upgrade this system to BOA version ${_X_VERSION} first"
    msg "Bye"
    clean_pid_exit
  fi
fi
#
#
rm -f /var/run/aegir_upgrade.pid
rm -f /opt/tmp/testecho*
_SRCDIR="/opt/tmp/files"
mkdir -p ${_SRCDIR}
chmod -R 777 /opt/tmp &> /dev/null
cd /opt/tmp
rm -rf /opt/tmp/boa
if [ "${_AEGIR_VERSION}" = "HEAD" ]; then
  ${gCb} ${_BRANCH_BOA} ${_BOA_REPO_GIT_URL}/${_BOA_REPO_NAME}.git &> /dev/null
else
  curl ${crlGet} "${urlDev}/${_AEGIR_VERSION}/boa.tar.gz" | tar -xzf -
  _BOA_REPO_NAME="boa"
fi
#
# Get spinner
cd ${_SRCDIR}
rm -f spinner*
cp -af ${bldPth}/aegir/helpers/spinner ./
chmod +x spinner &> /dev/null
#
# Create tmp stuff
_LOG=/var/backups/bond-${_NOW}.log
#
#


###---### Tune Your Aegir Hosting System
#
echo " "
if [ "${_DEBUG_MODE}" = "YES" ]; then
  msg "TUNER START -> checkpoint: "
  cat <<EOF

  * Aegir Satellite Instance to tune: ${_TUNE_HOSTMASTER}
  * Nginx server mod_evasive will be set to ${_TUNE_NGINX_CONNECT}
  * Nginx server fastcgi timeout will be set to ${_TUNE_NGINX_TIMEOUT} seconds
  * Nginx firewall limit of allowed requests will be set to ${_TUNE_NGINX_FIREWALL}/300
  * Database server timeout will be set to ${_TUNE_SQL_TIMEOUT} seconds
  * PHP-FPM server timeout will be set to ${_TUNE_PHP_FPM_TIMEOUT} seconds
  * PHP-CLI drush timeout will be set to ${_TUNE_PHP_CLI_TIMEOUT} seconds

EOF
  echo " "
fi
tPrmt="Are you ready to tune your system"
tPrmt="${tPrmt} with values shown above"
tPrmt=$(echo -n ${tPrmt} | fmt -su -w 2500 2>&1)
if prompt_yes_no "${tPrmt}?" ; then
  true
  if [ ! -e "/root/.upstart.cnf" ]; then
    msg "INFO: We will stop cron and then wait 30 seconds..."
    service cron stop &> /dev/null
    mrun "sleep 30"
  fi
  msg "INFO: Tuning in progress, please wait..."
  if [ -e "/root/.barracuda.cnf" ]; then
    source /root/.barracuda.cnf
  fi
  restore_default_php
  update_php_conf
  tune_php
  restore_default_sql
  tune_sql
  restore_default_nginx
  tune_nginx
  tune_memory_limits
  restart_services
  msg "INFO: Tuning completed"
else
  if [ ! -e "/root/.upstart.cnf" ]; then
    msg "INFO: We will stop cron and then wait 30 seconds..."
    service cron stop &> /dev/null
    mrun "sleep 30"
  fi
  if [ -e "/root/.barracuda.cnf" ]; then
    source /root/.barracuda.cnf
  fi
  restore_default_php
  update_php_conf
  restore_default_sql
  restore_default_nginx
  tune_memory_limits
  restart_services
  msg "INFO: Tuning stopped and default settings restored"
fi
rm -rf /var/opt/*
rm -rf /opt/tmp/*
rm -f /var/run/boa_run.pid
if [ ! -e "/root/.upstart.cnf" ]; then
  service cron start &> /dev/null
fi
if [ "${_DEBUG_MODE}" = "YES" ]; then
  msg "INFO: Cron started again"
fi
msg "BYE!"

###----------------------------------------###
###
###  Barracuda-Octopus-Nginx-Drupal Tuner
###  Copyright (C) 2010-2020 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###----------------------------------------###
