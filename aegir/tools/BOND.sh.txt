#!/bin/bash


###----------------------------------------###
###
###  Barracuda-Octopus-Nginx-Drupal Tuner
###
###  Copyright (C) 2010-2024 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###  This program is free software. You can
###  redistribute it and/or modify it under
###  the terms of the GNU GPL as published by
###  the Free Software Foundation, version 2
###  or later.
###
###  This program is distributed in the hope
###  that it will be useful, but WITHOUT ANY
###  WARRANTY; without even the implied
###  warranty of MERCHANTABILITY or FITNESS
###  FOR A PARTICULAR PURPOSE. See the GNU GPL
###  for more details.
###
###  You should have received a copy of the
###  GNU GPL along with this program.
###  If not, see http://www.gnu.org/licenses/
###
###  Code: https://github.com/omega8cc/boa
###
###----------------------------------------###


###----------------------------------------###
### How To: run it with bash, not with sh  ###
###----------------------------------------###
###
### $ bash BOND.sh.txt
###
### Note: to restore default values it is
###       enough to start this script with
###       any values defined below and answer
###       NO when it prompts for confirmation
###       "Are you ready to tune your Aegir".
###


###----------------------------------------###
### EDITME                                 ###
###----------------------------------------###
###
### Enter below the settings you wish to use.
###


###----------------------------------------###
### Hostmaster root directory - /var/aegir
###
### Note: most of values tuned by this script
###       are server-vide, while some, like
###       mod_evasive settings will affect
###       only sites hosted on the Aegir
###       Satellite Instance defined below.
###
_TUNE_HOSTMASTER=/data/disk/o1


###----------------------------------------###
### Nginx server mod_evasive - default ON
###
### Note: running verify task on any SITE
###       will restore default value ON
###       for that site only, while TUNER
###       will turn OFF/ON this feature
###       for all sites hosted on the
###       Hostmaster defined above.
###
_TUNE_NGINX_CONNECT=OFF


###----------------------------------------###
### Nginx server fastcgi timeout - default 180
###
### Note: running verify task on the SERVER
###       in the Hostmaster created
###       by Barracuda (not Octopus!)
###       will restore default value
###       for the server and all existing
###       Aegir Satellite Instances.
###
_TUNE_NGINX_TIMEOUT=9999


###----------------------------------------###
### Nginx server firewall limit - default 300
###
### Note: don't change the default value
###       if you are the only visitor, or
###       you will lock yourself easily.
###
###       The default value 300 means the
###       firewall limit is OFF because
###       it scans only the last 300 lines
###       of your web server log file.
###
###       If you will set this value to 100
###       then every visitor IP with more
###       than 100 out of the last 300
###       requests will be locked.
###
###       Only dynamic requests (pages) are
###       counted because static files like
###       images are generally not logged.
###
_TUNE_NGINX_FIREWALL=300


###----------------------------------------###
### Database server timeout - default 9999
###
_TUNE_SQL_TIMEOUT=9999


###----------------------------------------###
### PHP-FPM server timeout - default 180
###
_TUNE_PHP_FPM_TIMEOUT=9999


###----------------------------------------###
### PHP-CLI server timeout - default 9999
###
_TUNE_PHP_CLI_TIMEOUT=9999


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###

export HOME=/root
export SHELL=/bin/bash
export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin
export _tRee=dev
export _xSrl=540devT02

_AEGIR_VERSION="${_tRee}"
_BRANCH_BOA="5.x-${_tRee}"
_X_VERSION="BOA-5.4.0-${_tRee}"
_MYSQLTUNER_VRN=1.9.4

_NOW=$(date +%y%m%d-%H%M%S 2>&1)
_NOW=${_NOW//[^0-9-]/}
_RAM=$(free -mt | grep Mem: | awk '{ print $2 }' 2>&1)
_CHECK_HOST=$(uname -n 2>&1)
_SPINNER=NO
if [ -n "${STY+x}" ]; then
  _SPINNER=NO
fi
_PHP56_API=20131226
_PHP56_VRN=5.6.40
_PHP70_API=20151012
_PHP70_VRN=7.0.33
_PHP71_API=20160303
_PHP71_VRN=7.1.33
_PHP72_API=20170718
_PHP72_VRN=7.2.34
_PHP73_API=20180731
_PHP73_VRN=7.3.33
_PHP74_API=20190902
_PHP74_VRN=7.4.33
_PHP80_API=20200930
_PHP80_VRN=8.0.30
_PHP81_API=20210902
_PHP81_VRN=8.1.30
_PHP82_API=20220829
_PHP82_VRN=8.2.24
_PHP83_API=20230831
_PHP83_VRN=8.3.12

###
### Helper variables
###
_bldPth="/opt/tmp/boa"
_crlGet="-L --max-redirs 3 -k -s --retry 3 --retry-delay 5 -A iCab"
_aptYesUnth="-y --allow-unauthenticated"
_gCb="git clone --branch"
_gitHub="https://github.com/omega8cc"
_gitLab="https://gitlab.com/omega8cc"
_libFnc="${_bldPth}/lib/functions"
_locCnf="${_bldPth}/aegir/conf"
_vBs="/var/backups"

###
### Avoid too many questions
###
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi

###---### Functions
#
# Clean pid files on exit.
_clean_pid_exit() {
  echo "REASON ${e} on $(date 2>&1)" >> /root/.bond.sh.exit.exceptions.log
  [ -e "/run/boa_wait.pid" ] && rm -f /run/boa_wait.pid
  [ -e "/run/boa_run.pid" ] && rm -f /run/boa_run.pid
  service cron start &> /dev/null
  exit 1
}

_check_root() {
  if [ `whoami` = "root" ]; then
    [ -e "/root/.barracuda.cnf" ] && source /root/.barracuda.cnf
    export _B_NICE=${_B_NICE//[^0-9]/}
    : "${_B_NICE:=10}"
    renice ${_B_NICE} -p $$ &> /dev/null
    ionice -c2 -n7 -p $$
  else
    echo "ERROR: This script should be run as a root user"
    _clean_pid_exit _check_root_a
  fi
}
_check_root

_os_detection_minimal() {
  _APT_UPDATE="apt-get update"
  _OS_CODE=$(lsb_release -ar 2>/dev/null | grep -i codename | cut -s -f2 2>&1)
  _OS_LIST="daedalus chimaera beowulf buster bullseye bookworm"
  for e in ${_OS_LIST}; do
    if [ "${e}" = "${_OS_CODE}" ]; then
      _APT_UPDATE="apt-get update --allow-releaseinfo-change"
    fi
  done
}
_os_detection_minimal

_apt_clean_update() {
  #apt-get clean -qq 2> /dev/null
  #rm -rf /var/lib/apt/lists/* &> /dev/null
  _mrun "${_APT_UPDATE} -qq" 2> /dev/null
}

_if_hosted_sys() {
  if [ -e "/root/.host8.cnf" ] \
    || [[ "${_CHECK_HOST}" =~ ".aegir.cc"($) ]]; then
    _hostedSys=YES
  else
    _hostedSys=NO
  fi
}

_check_sql_running() {
  while [ -z "${_IS_MYSQLD_RUNNING}" ] \
    || [ ! -e "/run/mysqld/mysqld.sock" ]; do
    _IS_MYSQLD_RUNNING=$(ps aux | grep '[m]ysqld' | awk '{print $2}' 2>&1)
    echo "INFO: Waiting for MySQLD availability..."
    sleep 3
  done
}
_check_sql_running

_check_sql_access() {
  if [ -e "/root/.my.pass.txt" ] && [ -e "/root/.my.cnf" ]; then
    _SQL_PSWD=$(cat /root/.my.pass.txt 2>&1)
    _SQL_PSWD=$(echo -n ${_SQL_PSWD} | tr -d "\n" 2>&1)
    _IS_SYNC_SQL_PSWD=$(grep "${_SQL_PSWD}" /root/.my.cnf 2>&1)
  else
    echo "ALERT: /root/.my.cnf or /root/.my.pass.txt not found."
    echo "ALERT: Please fix this before trying again, giving up."
    echo "Bye"
    echo " "
    _clean_pid_exit _check_sql_access_a
  fi
  if [ -z "${_IS_SYNC_SQL_PSWD}" ] \
    || [[ ! "${_IS_SYNC_SQL_PSWD}" =~ "password=${_SQL_PSWD}" ]]; then
    echo "ALERT: SQL password is out of sync between"
    echo "ALERT: /root/.my.cnf and /root/.my.pass.txt"
    echo "ALERT: Please fix this before trying again, giving up."
    echo "Bye"
    echo " "
    _clean_pid_exit _check_sql_access_b
  else
    _IS_MYSQLD_RUNNING=$(ps aux | grep '[m]ysqld' | awk '{print $2}' 2>&1)
    if [ -z "${_IS_MYSQLD_RUNNING}" ]; then
      echo "ALERT: SQL server on this system is not running at all."
      echo "ALERT: Please fix this before trying again, giving up."
      echo "Bye"
      echo " "
      _clean_pid_exit _check_sql_access_c
    else
      _MYSQL_CONN_TEST=$(mysql -u root -e "status" 2>&1)
      if [ -z "${_MYSQL_CONN_TEST}" ] \
        || [[ "${_MYSQL_CONN_TEST}" =~ "Access denied" ]]; then
        echo "ALERT: SQL password in /root/.my.cnf does not work."
        echo "ALERT: Please fix this before trying again, giving up."
        echo "Bye"
        echo " "
        _clean_pid_exit _check_sql_access_d
      fi
    fi
  fi
}
_check_sql_access

#
# Noticeable messages.
_msg() {
  echo "Tuner [$(date 2>&1)] ==> $*"
}
# Simple prompt.
_prompt_yes_no() {
if [ "${_AUTOPILOT}" = "YES" ]; then
  return 0
else
  while true; do
    printf "$* [Y/n] "
    read _answer
    if [ -z "${_answer}" ]; then
      return 0
    fi
    case ${_answer} in
      [Yy]|[Yy][Ee][Ss])
        return 0
        ;;
      [Nn]|[Nn][Oo])
        return 1
        ;;
      *)
        echo "Please answer yes or no"
        ;;
    esac
  done
fi
}
#
# Small spinner.
_mrun() {
  CMD="$1"
  touch busy
  if [ "${_SPINNER}" = "YES" ]; then
    bash ${_SRCDIR}/spinner busy &
  fi
  if ${CMD} >> ${_LOG}; then
    rm busy
    sleep 1
    return 0
  fi
}
#
# Count system CPUs.
_count_cpu() {
  _CPU_INFO=$(grep -c processor /proc/cpuinfo 2>&1)
  _CPU_INFO=${_CPU_INFO//[^0-9]/}
  _NPROC_TEST=$(which nproc 2>&1)
  if [ -z "${_NPROC_TEST}" ]; then
    _CPU_NR="${_CPU_INFO}"
  else
    _CPU_NR=$(nproc 2>&1)
  fi
  _CPU_NR=${_CPU_NR//[^0-9]/}
  if [ ! -z "${_CPU_NR}" ] \
    && [ ! -z "${_CPU_INFO}" ] \
    && [ "${_CPU_NR}" -gt "${_CPU_INFO}" ] \
    && [ "${_CPU_INFO}" -gt "0" ]; then
    _CPU_NR="${_CPU_INFO}"
  fi
  if [ -z "${_CPU_NR}" ] || [ "${_CPU_NR}" -lt "1" ]; then
    _CPU_NR=1
  fi
}
#
# Find the fastest mirror.
_find_fast_mirror_early() {
  _isNetc=$(which netcat 2>&1)
  if [ ! -x "${_isNetc}" ] || [ -z "${_isNetc}" ]; then
    if [ ! -e "/etc/apt/apt.conf.d/00sandboxoff" ] \
      && [ -e "/etc/apt/apt.conf.d" ]; then
      echo "APT::Sandbox::User \"root\";" > /etc/apt/apt.conf.d/00sandboxoff
    fi
    _apt_clean_update
    apt-get install netcat ${_aptYesUnth} 2> /dev/null
    apt-get install netcat-traditional ${_aptYesUnth} 2> /dev/null
    wait
  fi
  _ffMirr=$(which ffmirror 2>&1)
  if [ -x "${_ffMirr}" ]; then
    _ffList="/var/backups/boa-mirrors-2024-01.txt"
    mkdir -p /var/backups
    if [ ! -e "${_ffList}" ]; then
      echo "de.files.aegir.cc"  > ${_ffList}
      echo "ny.files.aegir.cc" >> ${_ffList}
      echo "sg.files.aegir.cc" >> ${_ffList}
    fi
    if [ -e "${_ffList}" ]; then
      _BROKEN_FFMIRR_TEST=$(grep "stuff" ${_ffMirr} 2>&1)
      if [[ "${_BROKEN_FFMIRR_TEST}" =~ "stuff" ]]; then
        _CHECK_MIRROR=$(bash ${_ffMirr} < ${_ffList} 2>&1)
        _USE_MIR="${_CHECK_MIRROR}"
        [[ "${_USE_MIR}" =~ "printf" ]] && _USE_MIR="files.aegir.cc"
      else
        _USE_MIR="files.aegir.cc"
      fi
    else
      _USE_MIR="files.aegir.cc"
    fi
  else
    _USE_MIR="files.aegir.cc"
  fi
  _urlDev="http://${_USE_MIR}/dev"
  _urlHmr="http://${_USE_MIR}/versions/${_tRee}/boa/aegir"
}
#
# Find correct IP.
_find_correct_ip() {
  if [ -e "/root/.found_correct_ipv4.cnf" ]; then
    _LOC_IP=$(cat /root/.found_correct_ipv4.cnf 2>&1)
    _LOC_IP=$(echo -n ${_LOC_IP} | tr -d "\n" 2>&1)
  else
    _LOC_IP=$(curl ${_crlGet} https://api.ipify.org \
      | sed 's/[^0-9\.]//g' 2>&1)
    if [ -z "${_LOC_IP}" ]; then
      _LOC_IP=$(curl ${_crlGet} http://ipv4.icanhazip.com \
        | sed 's/[^0-9\.]//g' 2>&1)
    fi
    if [ ! -z "${_LOC_IP}" ]; then
      echo ${_LOC_IP} > /root/.found_correct_ipv4.cnf
    fi
  fi
}
#
# Fix php.ini files to remove ionCube
_fix_php_ini_ioncube() {
  if [ -e "${_THIS_FILE}" ] && [ "${_PHP_IONCUBE}" = "NO" ]; then
    _IONCUBE_INI_TEST=$(grep "ioncube_loader" ${_THIS_FILE} 2>&1)
    if [[ "${_IONCUBE_INI_TEST}" =~ "ioncube_loader" ]]; then
      sed -i "s/.*ioncube_loader.*//g" ${_THIS_FILE} &> /dev/null
      wait
    fi
  fi
}
#
# Fix php.ini files to remove jsmin.so
_remove_php_ini_jsmin() {
  if [ -e "${_THIS_FILE}" ]; then
    _JSMIN_INI_TEST=$(grep "^extension=jsmin.so" ${_THIS_FILE} 2>&1)
    if [[ "${_JSMIN_INI_TEST}" =~ "extension=jsmin.so" ]]; then
      sed -i "s/.*jsmin.*//g" ${_THIS_FILE} &> /dev/null
      wait
    fi
  fi
}
#
# Fix php.ini files to remove suhosin.so
_remove_php_ini_suhosin() {
  if [ -e "${_THIS_FILE}" ]; then
    _SUHOSIN_INI_TEST=$(grep "^extension=suhosin.so" ${_THIS_FILE} 2>&1)
    if [[ "${_SUHOSIN_INI_TEST}" =~ "extension=suhosin.so" ]]; then
      sed -i "s/.*suhosin.*//g" ${_THIS_FILE} &> /dev/null
      wait
    fi
  fi
}
#
# Fix php.ini files to add mailparse.so
_fix_php_ini_mailparse() {
  if [ -e "${_THIS_FILE}" ]; then
    _MAILPARSE_INI_TEST=$(grep "^extension=mailparse.so" ${_THIS_FILE} 2>&1)
    if [[ "${_MAILPARSE_INI_TEST}" =~ "extension=mailparse.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=mailparse.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini files to add yaml.so
_fix_php_ini_yaml() {
  if [ -e "${_THIS_FILE}" ]; then
    _YAML_INI_TEST=$(grep "^extension=yaml.so" ${_THIS_FILE} 2>&1)
    if [[ "${_YAML_INI_TEST}" =~ "extension=yaml.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=yaml.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini files to add jsmin.so
_add_php_ini_jsmin() {
  if [ -e "${_THIS_FILE}" ]; then
    _JSMIN_INI_TEST=$(grep "^extension=jsmin.so" ${_THIS_FILE} 2>&1)
    if [[ "${_JSMIN_INI_TEST}" =~ "extension=jsmin.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=jsmin.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini files to add twig.so
_fix_php_ini_twig() {
  if [ -e "${_THIS_FILE}" ]; then
    _TWIG_INI_TEST=$(grep "^extension=twig.so" ${_THIS_FILE} 2>&1)
    if [[ "${_TWIG_INI_TEST}" =~ "extension=twig.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=twig.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini files to add redis.so
_fix_php_ini_redis() {
  if [ -e "${_THIS_FILE}" ]; then
    _REDIS_INI_TEST=$(grep "^extension=redis.so" ${_THIS_FILE} 2>&1)
    if [[ "${_REDIS_INI_TEST}" =~ "extension=redis.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=redis.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini files to add mcrypt.so
_fix_php_ini_mcrypt() {
  if [ -e "${_THIS_FILE}" ]; then
    _MCRYPT_INI_TEST=$(grep "^extension=mcrypt.so" ${_THIS_FILE} 2>&1)
    if [[ "${_MCRYPT_INI_TEST}" =~ "extension=mcrypt.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=mcrypt.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini files to add apcu.so
_fix_php_ini_apcu() {
  if [ -e "${_THIS_FILE}" ]; then
    _APCU_INI_TEST=$(grep "^apc.shm_size" ${_THIS_FILE} 2>&1)
    if [[ "${_APCU_INI_TEST}" =~ "apc.shm_size" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=apcu.so" >> ${_THIS_FILE}
      echo "apc.shm_size=395M" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini files to add igbinary.so
_fix_php_ini_igbinary() {
  if [ -e "${_THIS_FILE}" ]; then
    _IGBINARY_INI_TEST=$(grep "^extension=igbinary.so" ${_THIS_FILE} 2>&1)
    if [[ "${_IGBINARY_INI_TEST}" =~ "extension=igbinary.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=igbinary.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini file to add newrelic.ini
_fix_php_ini_newrelic() {
  _NR_TPL="${_locCnf}/php/newrelic.ini"
  if [ -e "${_THIS_FILE}" ]; then
    _NEWRELIC_INI_TEST_A=$(grep "^extension=newrelic.so" ${_THIS_FILE} 2>&1)
    if [[ "${_NEWRELIC_INI_TEST_A}" =~ "extension=newrelic.so" ]]; then
      _DO_NOTHING=YES
    else
      cat ${_NR_TPL} >> ${_THIS_FILE}
    fi
    _NEWRELIC_INI_TEST_B=$(grep "newrelic.framework.drupal.modules" ${_THIS_FILE} 2>&1)
    if [[ "${_NEWRELIC_INI_TEST_B}" =~ "newrelic.framework.drupal.modules" ]]; then
      _DO_NOTHING=YES
    else
      echo "newrelic.framework.drupal.modules = 1" >> ${_THIS_FILE}
    fi
    sed -i "/REPLACE_WITH_REAL_KEY//g" ${_THIS_FILE} &> /dev/null
    wait
    sed -i "s/license_key=//g" ${_THIS_FILE} &> /dev/null
    wait
  fi
}
#
# Fix all php.ini files to add newrelic.ini
_fix_php_ini_newrelic_all() {
  if [ -e "/etc/newrelic/newrelic.cfg" ]; then
    if [ -z "${_NEWRELIC_KEY}" ]; then
      _NEWRELIC_KEY=$(grep license_key /etc/newrelic/newrelic.cfg 2>&1)
      _NEWRELIC_KEY=$(echo -n ${_NEWRELIC_KEY} | tr -d "\n" 2>&1)
    fi
    _PHP_V="83 82 81 80 74 73 72 71 70"
    for e in ${_PHP_V}; do
      _THIS_FILE=/opt/php${e}/etc/php${e}.ini
      _fix_php_ini_newrelic
      _THIS_FILE=/opt/php${e}/lib/php.ini
      _fix_php_ini_newrelic
    done
  fi
}
#
# Fix FMP php.ini file to add opcache.so
_fix_php_ini_opcache() {
  if [ -e "${_THIS_FILE}" ]; then
    _OPCACHE_INI_TEST=$(grep "opcache.so" ${_THIS_FILE} 2>&1)
    if [[ "${_OPCACHE_INI_TEST}" =~ "opcache.so" ]]; then
      _DO_NOTHING=YES
    else
      echo ";"                                    >> ${_THIS_FILE}
      echo "; Zend OPcache"                       >> ${_THIS_FILE}
      echo "zend_extension=\"${_OPCACHE_SO}\""    >> ${_THIS_FILE}
      echo "opcache.enable=1"                     >> ${_THIS_FILE}
      echo "opcache.memory_consumption=181"       >> ${_THIS_FILE}
      echo "opcache.revalidate_freq=10"           >> ${_THIS_FILE}
      echo ";"                                    >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix all FMP php.ini files to add Zend OPcache
_fix_php_ini_opcache_all() {
  _PHP_V="83 82 81 80 74 73 72 71 70 56"
  for e in ${_PHP_V}; do
    _P_API=
    case "${e}" in
      83) _P_API="${_PHP83_API}" ;;
      82) _P_API="${_PHP82_API}" ;;
      81) _P_API="${_PHP81_API}" ;;
      80) _P_API="${_PHP80_API}" ;;
      74) _P_API="${_PHP74_API}" ;;
      73) _P_API="${_PHP73_API}" ;;
      72) _P_API="${_PHP72_API}" ;;
      71) _P_API="${_PHP71_API}" ;;
      70) _P_API="${_PHP70_API}" ;;
      56) _P_API="${_PHP56_API}" ;;
      *)  _msg "WARN: Unknown PHP API version for PHP ${e}"
      ;;
    esac
    _THIS_FILE=/opt/php${e}/etc/php${e}.ini
    _OPCACHE_LP="/opt/php${e}/lib/php/extensions/no-debug-non-zts"
    _OPCACHE_SO="${_OPCACHE_LP}-${_P_API}/opcache.so"
    _fix_php_ini_opcache "${e}"
  done
}
#
# Fix php.ini file to add php_tet.so
_fix_php_ini_tet() {
  if [ -e "${_THIS_FILE}" ]; then
    _TET_INI_TEST=$(grep "^extension=php_tet.so" ${_THIS_FILE} 2>&1)
    if [[ "${_TET_INI_TEST}" =~ "extension=php_tet.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=php_tet.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix all php.ini files to add php_tet.so
_fix_php_ini_tet_all() {
  if [ "${_PHP_TET}" = "YES" ] || [[ "${_XTRAS_LIST}" =~ "TET" ]]; then
    _PHP_V="83 82 81 80 74 73 72 71 70 56"
    for e in ${_PHP_V}; do
      _P_API=
      case "${e}" in
        83) _P_API="${_PHP83_API}" ;;
        82) _P_API="${_PHP82_API}" ;;
        81) _P_API="${_PHP81_API}" ;;
        80) _P_API="${_PHP80_API}" ;;
        74) _P_API="${_PHP74_API}" ;;
        73) _P_API="${_PHP73_API}" ;;
        72) _P_API="${_PHP72_API}" ;;
        71) _P_API="${_PHP71_API}" ;;
        70) _P_API="${_PHP70_API}" ;;
        56) _P_API="${_PHP56_API}" ;;
        *)  _msg "WARN: Unknown PHP API version for PHP ${e}"
        ;;
      esac
      _TET_BASE="/opt/php${e}/lib/php/extensions/no-debug-non-zts"
      _TET_SO="${_TET_BASE}-${_P_API}/php_tet.so"
      if [ ! -e "${_TET_SO}" ]; then
        if [[ "${e}" =~ "80" ]] || [[ "${e}" =~ "74" ]] || [[ "${e}" =~ "73" ]]; then
          _TET_VRN="5.3-Linux-x64-Perl-PHP-Python-Ruby"
        else
          _TET_VRN="5.2-Linux-x86_64-Perl-PHP-Python-Ruby"
        fi
        if [ ! -e "/var/opt/TET-${_TET_VRN}/bind/php" ]; then
          mkdir -p  /var/opt
          cd /var/opt
          _get_dev_src "TET-${_TET_VRN}.tar.gz"
        fi
        if [ -e "/var/opt/TET-${_TET_VRN}/bind/php/php-${e}0-nts" ]; then
          cd /var/opt/TET-${_TET_VRN}/bind/php/php-${e}0-nts/
          cp -a php_tet.so ${_TET_SO}
        fi
      fi
      if [ -e "${_TET_SO}" ]; then
        _THIS_FILE=/opt/php${e}/etc/php${e}.ini
        _fix_php_ini_tet
        _THIS_FILE=/opt/php${e}/lib/php.ini
        _fix_php_ini_tet
      fi
    done
  fi
}
#
# Fix php.ini file to add geos.so
_fix_php_ini_geos() {
  if [ -e "${_THIS_FILE}" ]; then
    _GEOS_INI_TEST=$(grep "^extension=geos.so" ${_THIS_FILE} 2>&1)
    if [[ "${_GEOS_INI_TEST}" =~ "extension=geos.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=geos.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix all php.ini files to add geos.so
_fix_php_ini_geos_all() {
  if [ "${_PHP_GEOS}" = "YES" ] || [[ "${_XTRAS_LIST}" =~ "GEO" ]]; then
    _PHP_V="56"
    for e in ${_PHP_V}; do
      _THIS_FILE=/opt/php${e}/etc/php${e}.ini
      _fix_php_ini_geos
      _THIS_FILE=/opt/php${e}/lib/php.ini
      _fix_php_ini_geos
    done
  fi
}
#
# Fix php.ini file to add mongo.so
_fix_php_ini_mongo() {
  if [ -e "${_THIS_FILE}" ]; then
    _MONGO_INI_TEST=$(grep "^extension=mongo.so" ${_THIS_FILE} 2>&1)
    if [[ "${_MONGO_INI_TEST}" =~ "extension=mongo.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=mongo.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix php.ini file to add mongodb.so
_fix_php_ini_mongodb() {
  if [ -e "${_THIS_FILE}" ]; then
    _MONGODB_INI_TEST=$(grep "^extension=mongodb.so" ${_THIS_FILE} 2>&1)
    if [[ "${_MONGODB_INI_TEST}" =~ "extension=mongodb.so" ]]; then
      _DO_NOTHING=YES
    else
      echo "extension=mongodb.so" >> ${_THIS_FILE}
    fi
  fi
}
#
# Fix all php.ini files to add mongo.so or mongodb.so
_fix_php_ini_mongo_all() {
  if [ "${_PHP_MONGODB}" = "YES" ] || [[ "${_XTRAS_LIST}" =~ "MNG" ]]; then
    _PHP_V="56"
    for e in ${_PHP_V}; do
      _THIS_FILE=/opt/php${e}/etc/php${e}.ini
      _fix_php_ini_mongo
      _THIS_FILE=/opt/php${e}/lib/php.ini
      _fix_php_ini_mongo
    done
    _PHP_V="72 71 70"
    for e in ${_PHP_V}; do
      _THIS_FILE=/opt/php${e}/etc/php${e}.ini
      _fix_php_ini_mongodb
      _THIS_FILE=/opt/php${e}/lib/php.ini
      _fix_php_ini_mongodb
    done
  fi
}
#
# Update PHP Config.
_php_conf_update() {
  if [ -z "${_THISHTIP}" ]; then
    _LOC_DOM="${_CHECK_HOST}"
    _find_correct_ip
    _THISHTIP="${_LOC_IP}"
  fi
  if [ ! -e "/opt/etc/fpm" ] \
    || [ ! -e "/opt/etc/fpm/fpm-pool-common.conf" ]; then
    mkdir -p /opt/etc/fpm
  fi
  cp -af ${_locCnf}/php/fpm-pool-common.conf /opt/etc/fpm/fpm-pool-common.conf
  sed -i "s/127.0.0.1/127.0.0.1,${_THISHTIP}/g" /opt/etc/fpm/fpm-pool-common.conf
  wait
  sed -i "s/mode =.*/mode = 0660/g" /opt/etc/fpm/fpm-pool-common.conf
  wait
  _PHP_V="83 82 81 80 74 73 72 71 70 56"
  for e in ${_PHP_V}; do
    if [ ! -e "/var/www/www${e}" ]; then
      adduser --system --group --home /var/www/www${e} www${e} &> /dev/null
      usermod -aG www-data www${e}
    fi
    if [ ! -e "/opt/php${e}/etc/php${e}.ini" ] \
      || [ ! -e "/opt/php${e}/etc/pool.d/www${e}.conf" ]; then
      mkdir -p /opt/php${e}/etc/pool.d
      cp -af ${_locCnf}/php/php${e}.ini /opt/php${e}/etc/php${e}.ini
    fi
    cp -af ${_locCnf}/php/fpm${e}-pool-www.conf /opt/php${e}/etc/pool.d/www${e}.conf
    if [ ! -e "/opt/php${e}/lib/php.ini" ]; then
      mkdir -p /opt/php${e}/lib
      cp -af ${_locCnf}/php/php${e}-cli.ini /opt/php${e}/lib/php.ini
    fi
    cp -af ${_locCnf}/php/php${e}.ini /opt/php${e}/etc/php${e}.ini
    cp -af ${_locCnf}/php/php${e}-cli.ini /opt/php${e}/lib/php.ini
    cp -af ${_locCnf}/php/php${e}-fpm.conf /opt/php${e}/etc/php${e}-fpm.conf

    _THIS_FILE=/opt/php${e}/etc/php${e}.ini
    if [ "${e}" != "56" ]; then
      _fix_php_ini_apcu
    fi
    if [ "${e}" != "56" ] && [ "${e}" != "70" ] && [ "${e}" != "71" ]; then
      _fix_php_ini_mcrypt
    fi
    if [ "${e}" = "56" ]; then
      _fix_php_ini_mailparse
      _fix_php_ini_twig
    fi
    if [ "${e}" != "80" ] && [ "${e}" != "81" ]; then
      _add_php_ini_jsmin
    fi
    if [ "${e}" = "80" ] || [ "${e}" = "81" ]; then
      _remove_php_ini_jsmin
    fi
    _fix_php_ini_igbinary
    _fix_php_ini_redis
    _fix_php_ini_ioncube
    _remove_php_ini_suhosin
    _fix_php_ini_yaml

    _THIS_FILE=/opt/php${e}/lib/php.ini
    if [ "${e}" != "56" ]; then
      _fix_php_ini_apcu
    fi
    if [ "${e}" != "56" ] && [ "${e}" != "70" ] && [ "${e}" != "71" ]; then
      _fix_php_ini_mcrypt
    fi
    if [ "${e}" = "56" ]; then
      _fix_php_ini_mailparse
      _fix_php_ini_twig
    fi
    if [ "${e}" != "80" ] && [ "${e}" != "81" ]; then
      _add_php_ini_jsmin
    fi
    if [ "${e}" = "80" ] || [ "${e}" = "81" ]; then
      _remove_php_ini_jsmin
    fi
    _fix_php_ini_igbinary
    _fix_php_ini_redis
    _fix_php_ini_ioncube
    _remove_php_ini_suhosin
    _fix_php_ini_yaml

    if [ -e "/opt/php${e}/etc/php${e}.ini" ]; then
      sed -i "s/^zlib.output_compression.*/zlib.output_compression = Off/g"       /opt/php${e}/etc/php${e}.ini
      wait
      sed -i "s/.*zlib.output_compression_level/;zlib.output_compression_level/g" /opt/php${e}/etc/php${e}.ini
      wait
    fi
    if [ -e "/opt/php${e}/lib/php.ini" ]; then
      sed -i "s/^zlib.output_compression.*/zlib.output_compression = Off/g"       /opt/php${e}/lib/php.ini
      wait
      sed -i "s/.*zlib.output_compression_level/;zlib.output_compression_level/g" /opt/php${e}/lib/php.ini
      wait
    fi
  done
  rm -f /etc/php5/conf.d/{opcache.ini,apc.ini,imagick.ini,memcached.ini}
  rm -f /etc/php5/conf.d/{redis.ini,suhosin.ini,newrelic.ini}
  _fix_php_ini_newrelic_all
  _fix_php_ini_geos_all
  _fix_php_ini_mongo_all
  _fix_php_ini_tet_all
  _fix_php_ini_opcache_all
}
#
_restore_default_php() {
  _msg "INFO: Restoring default PHP configuration"
  cp -af ${_locCnf}/php/php83-cli.ini /opt/php83/lib/php.ini &> /dev/null
  cp -af ${_locCnf}/php/php83.ini /opt/php83/etc/php83.ini   &> /dev/null
  cp -af ${_locCnf}/php/php82-cli.ini /opt/php82/lib/php.ini &> /dev/null
  cp -af ${_locCnf}/php/php82.ini /opt/php82/etc/php82.ini   &> /dev/null
  cp -af ${_locCnf}/php/php81-cli.ini /opt/php81/lib/php.ini &> /dev/null
  cp -af ${_locCnf}/php/php81.ini /opt/php81/etc/php81.ini   &> /dev/null
  cp -af ${_locCnf}/php/php80-cli.ini /opt/php80/lib/php.ini &> /dev/null
  cp -af ${_locCnf}/php/php80.ini /opt/php80/etc/php80.ini   &> /dev/null
  cp -af ${_locCnf}/php/php74-cli.ini /opt/php74/lib/php.ini &> /dev/null
  cp -af ${_locCnf}/php/php74.ini /opt/php74/etc/php74.ini   &> /dev/null
  cp -af ${_locCnf}/php/php73-cli.ini /opt/php73/lib/php.ini &> /dev/null
  cp -af ${_locCnf}/php/php73.ini /opt/php73/etc/php73.ini   &> /dev/null
  cp -af ${_locCnf}/php/php72-cli.ini /opt/php72/lib/php.ini &> /dev/null
  cp -af ${_locCnf}/php/php72.ini /opt/php72/etc/php72.ini   &> /dev/null
  cp -af ${_locCnf}/php/php71-cli.ini /opt/php71/lib/php.ini &> /dev/null
  cp -af ${_locCnf}/php/php71.ini /opt/php71/etc/php71.ini   &> /dev/null
  cp -af ${_locCnf}/php/php70-cli.ini /opt/php70/lib/php.ini &> /dev/null
  cp -af ${_locCnf}/php/php70.ini /opt/php70/etc/php70.ini   &> /dev/null
  cp -af ${_locCnf}/php/php56-cli.ini /opt/php56/lib/php.ini &> /dev/null
  cp -af ${_locCnf}/php/php56.ini /opt/php56/etc/php56.ini   &> /dev/null
}
#
_tune_php() {
  _msg "INFO: Tuning PHP configuration"
  if [ "${_TUNE_PHP_FPM_TIMEOUT}" -lt "60" ]; then
    _TUNE_PHP_FPM_TIMEOUT=60
  fi
  # PHP-FPM pools
  sed -i "s/180s/${_TUNE_PHP_FPM_TIMEOUT}s/g" /opt/php*/etc/pool.d/*.conf                                           &> /dev/null
  wait
  sed -i "s/180s/${_TUNE_PHP_FPM_TIMEOUT}s/g" /opt/php*/etc/php*-fpm.conf                                           &> /dev/null
  wait
  sed -i "s/180/${_TUNE_PHP_FPM_TIMEOUT}/g" /opt/etc/fpm/fpm-pool-common.conf                                       &> /dev/null
  wait
  # PHP-FPM INI
  sed -i "s/^default_socket_timeout =.*/default_socket_timeout = ${_TUNE_PHP_FPM_TIMEOUT}/g" /opt/php*/etc/php*.ini &> /dev/null
  wait
  sed -i "s/^max_execution_time =.*/max_execution_time = ${_TUNE_PHP_FPM_TIMEOUT}/g" /opt/php*/etc/php*.ini         &> /dev/null
  wait
  sed -i "s/^max_input_time =.*/max_input_time = ${_TUNE_PHP_FPM_TIMEOUT}/g" /opt/php*/etc/php*.ini                 &> /dev/null
  wait
  # PHP-CLI INI
  sed -i "s/^max_execution_time =.*/max_execution_time = ${_TUNE_PHP_CLI_TIMEOUT}/g" /opt/php*/lib/php.ini          &> /dev/null
  wait
  sed -i "s/^max_input_time =.*/max_input_time = ${_TUNE_PHP_CLI_TIMEOUT}/g" /opt/php*/lib/php.ini                  &> /dev/null
  wait
  sed -i "s/^default_socket_timeout =.*/default_socket_timeout = ${_TUNE_PHP_CLI_TIMEOUT}/g" /opt/php*/lib/php.ini  &> /dev/null
  wait
  # Redis config should sync with PHP-CLI
  sed -i "s/^timeout .*/timeout ${_TUNE_PHP_CLI_TIMEOUT}/g" /etc/redis/redis.conf                                   &> /dev/null
  wait
}
#
# Update innodb_log_file_size.
_innodb_log_file_size_update() {
  _msg "INFO: InnoDB log file will be set to ${_INNODB_LOG_FILE_SIZE_MB}..."
  _DBS_TEST=$(which mysql 2>&1)
  if [ ! -z "${_DBS_TEST}" ]; then
    _DB_SERVER_TEST=$(mysql -V 2>&1)
  fi
  if [[ "${_DB_SERVER_TEST}" =~ "Ver 8.4." ]]; then
    _DB_V=8.4
  elif [[ "${_DB_SERVER_TEST}" =~ "Ver 8.3." ]]; then
    _DB_V=8.3
  elif [[ "${_DB_SERVER_TEST}" =~ "Ver 8.0." ]]; then
    _DB_V=8.0
  elif [[ "${_DB_SERVER_TEST}" =~ "Distrib 5.7." ]]; then
    _DB_V=5.7
  fi
  _IS_MYSQLD_RUNNING=$(ps aux | grep '[m]ysqld' | awk '{print $2}' 2>&1)
  if [ ! -z "${_IS_MYSQLD_RUNNING}" ] && [ "${_DB_V}" = "5.7" ]; then
    _SQL_PSWD=$(cat /root/.my.pass.txt 2>&1)
    _SQL_PSWD=$(echo -n ${_SQL_PSWD} | tr -d "\n" 2>&1)
    mysql -u root -e "SET GLOBAL innodb_max_dirty_pages_pct = 0;" &> /dev/null
    mysql -u root -e "SET GLOBAL innodb_change_buffering = 'none';" &> /dev/null
    mysql -u root -e "SET GLOBAL innodb_buffer_pool_dump_at_shutdown = 1;" &> /dev/null
    mysql -u root -e "SET GLOBAL innodb_io_capacity = 2000;" &> /dev/null
    mysql -u root -e "SET GLOBAL innodb_io_capacity_max = 4000;" &> /dev/null
    if [ "${_DB_V}" = "5.7" ]; then
      mysql -u root -e "SET GLOBAL innodb_buffer_pool_dump_pct = 100;" &> /dev/null
      mysql -u root -e "SET GLOBAL innodb_buffer_pool_dump_now = ON;" &> /dev/null
    fi
    mysql -u root -e "SET GLOBAL innodb_fast_shutdown = 0;" &> /dev/null
  fi
  _mrun "service mysql stop" 2> /dev/null
  echo "Waiting 15 seconds..."
  _mrun "sleep 15"
  if [ ! -e "/run/mysqld/mysqld.sock" ] \
    && [ ! -e "/run/mysqld/mysqld.pid" ]; then
    mkdir -p ${_vBs}/old-sql-ib-log-${_NOW}
    _mrun "sleep 5"
    mv -f /var/lib/mysql/ib_logfile0 ${_vBs}/old-sql-ib-log-${_NOW}/ &> /dev/null
    mv -f /var/lib/mysql/ib_logfile1 ${_vBs}/old-sql-ib-log-${_NOW}/ &> /dev/null
    sed -i "s/.*innodb_log_file_size.*/innodb_log_file_size    = ${_INNODB_LOG_FILE_SIZE_MB}/g" /etc/mysql/my.cnf
    wait
    echo "Waiting 15 seconds..."
    _mrun "sleep 15"
  fi
  if [ ! -e "/run/mysqld/mysqld.sock" ]; then
    service mysql start &> /dev/null
  fi
}
#
_restore_default_sql() {
  _msg "INFO: Restoring default SQL configuration"
  sed -i "s/.*check_for_crashed_tables/#check_for_crashed_tables/g" /etc/mysql/debian-start &> /dev/null
  wait
  _if_hosted_sys
  if [ "${_CUSTOM_CONFIG_SQL}" = "NO" ] \
    || [ "${_hostedSys}" = "YES" ]; then
    if [ "${_CUSTOM_CONFIG_SQL}" = "YES" ]; then
      _DO_NOTHING=YES
    else
      cp -af /etc/mysql/my.cnf \
        /var/backups/dragon/t/my.cnf-pre-${_xSrl}-${_X_VERSION}-${_NOW} &> /dev/null
      cp -af ${_locCnf}/var/my.cnf.txt /etc/mysql/my.cnf
      _INNODB_LOG_FILE_SIZE=${_INNODB_LOG_FILE_SIZE//[^0-9]/}
      if [ ! -z "${_INNODB_LOG_FILE_SIZE}" ]; then
        if [ "${_INNODB_LOG_FILE_SIZE}" -ge "50" ]; then
          _INNODB_LOG_FILE_SIZE_MB="${_INNODB_LOG_FILE_SIZE}M"
          _INNODB_LOG_FILE_SIZE_TEST=$(grep "innodb_log_file_size" \
            /var/backups/dragon/t/my.cnf-pre-${_xSrl}-${_X_VERSION}-${_NOW} 2>&1)
          if [[ "${_INNODB_LOG_FILE_SIZE_TEST}" =~ "= ${_INNODB_LOG_FILE_SIZE_MB}" ]]; then
            _INNODB_LOG_FILE_SIZE_SAME=YES
          else
            _INNODB_LOG_FILE_SIZE_SAME=NO
          fi
        fi
      fi
      sed -i "s/.*slow_query_log/#slow_query_log/g"           /etc/mysql/my.cnf
      wait
      sed -i "s/.*long_query_time/#long_query_time/g"         /etc/mysql/my.cnf
      wait
      sed -i "s/.*slow_query_log_file/#slow_query_log_file/g" /etc/mysql/my.cnf
      wait
      if [ ! -e "/etc/mysql/skip-name-resolve.txt" ]; then
        sed -i "s/.*skip-name-resolve/#skip-name-resolve/g"   /etc/mysql/my.cnf
        wait
      fi
    fi
  fi
  mv -f /etc/mysql/my.cnf-pre* /var/backups/dragon/t/ &> /dev/null
  sed -i "s/.*default-table-type/#default-table-type/g" /etc/mysql/my.cnf &> /dev/null
  wait
  sed -i "s/.*language/#language/g" /etc/mysql/my.cnf &> /dev/null
  wait
  sed -i "s/.*innodb_lazy_drop_table.*//g" /etc/mysql/my.cnf &> /dev/null
  wait
  if [ "${_CUSTOM_CONFIG_SQL}" = "NO" ]; then
    if [ "${_DB_BINARY_LOG}" = "NO" ]; then
      sed -i "s/.*purge_binlogs.*//g" /var/spool/cron/crontabs/root
      wait
      sed -i "/^$/d" /var/spool/cron/crontabs/root
      bash /var/xdrago/purge_binlogs.sh &> /dev/null
      wait
      sed -i "s/^log_bin/#log_bin/g"                   /etc/mysql/my.cnf
      wait
      sed -i "s/^expire_logs_days/#expire_logs_days/g" /etc/mysql/my.cnf
      wait
      sed -i "s/^max_binlog_size/#max_binlog_size/g"   /etc/mysql/my.cnf
      wait
      sed -i "s/^binlog_row_image/#binlog_row_image/g" /etc/mysql/my.cnf
      wait
      sed -i "s/^binlog_format/#binlog_format/g"       /etc/mysql/my.cnf
      wait
    elif [ "${_DB_BINARY_LOG}" = "YES" ]; then
      sed -i "s/.*log_bin/log_bin/g"                   /etc/mysql/my.cnf
      wait
      sed -i "s/.*expire_logs_days/expire_logs_days/g" /etc/mysql/my.cnf
      wait
      sed -i "s/.*max_binlog_size/max_binlog_size/g"   /etc/mysql/my.cnf
      wait
      sed -i "s/.*binlog_row_image/binlog_row_image/g" /etc/mysql/my.cnf
      wait
      sed -i "s/.*binlog_format/binlog_format/g"       /etc/mysql/my.cnf
      wait
    fi
    if [ ! -z "${_INNODB_LOG_FILE_SIZE}" ]; then
      if [ "${_INNODB_LOG_FILE_SIZE}" -ge "50" ]; then
        _INNODB_LOG_FILE_SIZE_MB="${_INNODB_LOG_FILE_SIZE}M"
        _INNODB_LOG_FILE_SIZE_TEST=$(grep "innodb_log_file_size" /etc/mysql/my.cnf 2>&1)
        if [[ "${_INNODB_LOG_FILE_SIZE_TEST}" =~ "= ${_INNODB_LOG_FILE_SIZE_MB}" ]]; then
          _DO_NOTHING=YES
        else
          if [ "${_INNODB_LOG_FILE_SIZE_SAME}" = "YES" ]; then
            sed -i "s/.*innodb_log_file_size.*/innodb_log_file_size    = ${_INNODB_LOG_FILE_SIZE_MB}/g" \
              /etc/mysql/my.cnf &> /dev/null
            wait
          else
            _innodb_log_file_size_update
          fi
        fi
      fi
    fi
  fi
}
#
_tune_sql() {
  _msg "INFO: Tuning SQL configuration"
  sed -i "s/9999/${_TUNE_SQL_TIMEOUT}/g" /etc/mysql/my.cnf     &> /dev/null
  wait
  sed -i "s/9999/${_TUNE_SQL_TIMEOUT}/g" /var/xdrago/minute.sh &> /dev/null
  wait
}
#
_restore_default_nginx() {
  _msg "INFO: Restoring default Nginx configuration"
  cd /var/xdrago/monitor/check
  cp -af ${_bldPth}/aegir/tools/system/monitor/check/scan_nginx.pl ./
  if [ -d "${_TUNE_HOSTMASTER}" ]; then
    for _Files in `find ${_TUNE_HOSTMASTER}/config/server_master/nginx/vhost.d -type f`; do
      sed -i "s/#limit_conn /limit_conn /g" ${_Files} &> /dev/null
      wait
    done
  fi
  su -s /bin/bash - aegir -c "drush8 @server_master provision-verify" &> /dev/null
  wait
  _mrun "sleep 8"
}
#
_tune_nginx() {
  _msg "INFO: Tuning Nginx configuration"
  sed -i "s/default_critnumber =.*/default_critnumber = ${_TUNE_NGINX_FIREWALL};/g" /var/xdrago/monitor/check/scan_nginx.pl
  wait
  sed -i "s/60/${_TUNE_NGINX_TIMEOUT}/g" /var/aegir/config/server_master/nginx.conf    &> /dev/null
  wait
  sed -i "s/300/${_TUNE_NGINX_TIMEOUT}/g" /var/aegir/config/server_master/nginx.conf   &> /dev/null
  wait
  sed -i "s/180/${_TUNE_NGINX_TIMEOUT}/g" /var/aegir/config/server_master/nginx.conf   &> /dev/null
  wait
  if [ "${_TUNE_NGINX_CONNECT}" = "OFF" ]; then
    sed -i "s/limit_conn /#limit_conn /g" /var/aegir/config/server_master/nginx.conf &> /dev/null
    wait
    if [ -d "${_TUNE_HOSTMASTER}" ]; then
      for _Files in `find ${_TUNE_HOSTMASTER}/config/server_master/nginx/vhost.d -type f`; do
        sed -i "s/limit_conn /#limit_conn /g" ${_Files} &> /dev/null
        wait
      done
    fi
  fi
}
#
_restart_services() {
  _msg "INFO: Reloading services"
  _PHP_V="83 82 81 80 74 73 72 71 70 56"
  for e in ${_PHP_V}; do
    if [ -e "/etc/init.d/php${e}-fpm" ]; then
      service php${e}-fpm reload &> /dev/null
    fi
  done
  bash /var/xdrago/move_sql.sh &> /dev/null
  wait
  service nginx reload &> /dev/null
  service redis-server reload &> /dev/null
  if [ -x "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
    _mrun "csf -q" &> /dev/null
    ### Linux kernel TCP SACK CVEs mitigation
    ### CVE-2019-11477 SACK Panic
    ### CVE-2019-11478 SACK Slowness
    ### CVE-2019-11479 Excess Resource Consumption Due to Low MSS Values
    if [ -x "/usr/sbin/csf" ] && [ -e "/etc/csf/csf.deny" ]; then
      _SACK_TEST=$(ip6tables --list | grep tcpmss 2>&1)
      if [[ ! "${_SACK_TEST}" =~ "tcpmss" ]]; then
        sysctl net.ipv4.tcp_mtu_probing=0 &> /dev/null
        iptables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
        ip6tables -A INPUT -p tcp -m tcpmss --mss 1:500 -j DROP &> /dev/null
      fi
    fi
  fi
}
#
# Tune Web Sever configuration.
_tune_web_server_config() {
  _LIM_FPM="${_L_PHP_FPM_WORKERS}"
  if [ "${_LIM_FPM}" -lt "48" ]; then
    _if_hosted_sys
    if [ "${_hostedSys}" = "YES" ]; then
      _LIM_FPM=48
    fi
  fi
  _CHILD_MAX_FPM=$(( _LIM_FPM * 2 ))
  if [ "${_PHP_FPM_WORKERS}" != "AUTO" ]; then
    _PHP_FPM_WORKERS=${_PHP_FPM_WORKERS//[^0-9]/}
    if [ ! -z "${_PHP_FPM_WORKERS}" ] && [ "${_PHP_FPM_WORKERS}" -gt "0" ]; then
      _CHILD_MAX_FPM="${_PHP_FPM_WORKERS}"
    fi
  fi
  _PHP_V="83 82 81 80 74 73 72 71 70 56"
  for e in ${_PHP_V}; do
    sed -i "s/pm.max_children =.*/pm.max_children = ${_CHILD_MAX_FPM}/g" \
      /opt/php${e}/etc/pool.d/www${e}.conf &> /dev/null
    wait
    if [ ! -z "${_PHP_FPM_DENY}" ]; then
      sed -i "s/passthru,/${_PHP_FPM_DENY},/g" \
        /opt/php${e}/etc/pool.d/www${e}.conf &> /dev/null
      wait
    fi
  done
  # PHP-FPM INI
  sed -i "s/^default_socket_timeout =.*/default_socket_timeout = 180/g" /opt/php*/etc/php*.ini &> /dev/null
  wait
  sed -i "s/^max_execution_time =.*/max_execution_time = 180/g" /opt/php*/etc/php*.ini         &> /dev/null
  wait
  sed -i "s/^max_input_time =.*/max_input_time = 180/g" /opt/php*/etc/php*.ini                 &> /dev/null
  wait
  # PHP-CLI INI
  sed -i "s/^default_socket_timeout =.*/default_socket_timeout = 3600/g" /opt/php*/lib/php.ini &> /dev/null
  wait
  sed -i "s/^max_execution_time =.*/max_execution_time = 3600/g" /opt/php*/lib/php.ini         &> /dev/null
  wait
  sed -i "s/^max_input_time =.*/max_input_time = 3600/g" /opt/php*/lib/php.ini                 &> /dev/null
  wait
  # Redis config should sync with PHP-CLI
  sed -i "s/^timeout .*/timeout 3600/g" /etc/redis/redis.conf                                  &> /dev/null
  wait
}
#
#
_check_mysqld_running() {
  while [ -z "${_IS_MYSQLD_RUNNING}" ] \
    || [ ! -e "/run/mysqld/mysqld.sock" ]; do
    _IS_MYSQLD_RUNNING=$(ps aux | grep '[m]ysqld' | awk '{print $2}' 2>&1)
    _msg "INFO: Waiting for MySQLD availability before _tune_sql_memory_limits..."
    sleep 5
    service mysql start &> /dev/null
  done
}
#
# Tune memory limits for SQL server.
_tune_sql_memory_limits() {
  _check_mysqld_running
  # https://raw.githubusercontent.com/major/MySQLTuner-perl/master/mysqltuner.pl
  _pthTun="/var/opt/mysqltuner.pl"
  _outTun="/var/opt/mysqltuner-${_xSrl}-${_X_VERSION}-${_NOW}.txt"
  if [ ! -e "${_outTun}" ] \
    && [ "${_STATUS}" = "UPGRADE" ]; then
    _msg "INFO: Running MySQLTuner check on all databases"
    _msg "WAIT: This may take a while, please wait..."
    _MYSQLTUNER_TEST_RESULT=OK
    rm -f /var/opt/mysqltuner*
    curl ${_crlGet} "${_urlDev}/mysqltuner.pl.${_MYSQLTUNER_VRN}" -o ${_pthTun}
    if [ ! -e "${_pthTun}" ]; then
      curl ${_crlGet} "${_urlDev}/mysqltuner.pl" -o ${_pthTun}
    fi
    if [ -e "${_pthTun}" ]; then
      perl ${_pthTun} > ${_outTun} 2>&1
    fi
  fi
  if [ -e "${_pthTun}" ] \
    && [ -e "${_outTun}" ] \
    && [ "${_STATUS}" = "UPGRADE" ]; then
    _REC_MYISAM_MEM=$(cat ${_outTun} \
      | grep "Data in MyISAM tables" \
      | cut -d: -f2 \
      | awk '{ print $1}' 2>&1)
    _REC_INNODB_MEM=$(cat ${_outTun} \
      | grep "data size:" \
      | cut -d/ -f3 \
      | awk '{ print $1}' 2>&1)
    _MYSQLTUNER_TEST=$(cat ${_outTun} 2>&1)
    cp -a ${_outTun} ${_pthLog}/
    if [ -z "${_REC_INNODB_MEM}" ] \
      || [[ "${_MYSQLTUNER_TEST}" =~ "Cannot calculate MyISAM index" ]] \
      || [[ "${_MYSQLTUNER_TEST}" =~ "InnoDB is enabled but isn" ]]; then
      _MYSQLTUNER_TEST_RESULT=FAIL
      _msg "NOTE: The MySQLTuner test failed!"
      _msg "NOTE: Please review ${_outTun}"
      _msg "NOTE: We will use some sane SQL defaults instead, do not worry!"
    fi
    ###--------------------###
    if [ ! -z "${_REC_MYISAM_MEM}" ] \
      && [ "${_MYSQLTUNER_TEST_RESULT}" = "OK" ]; then
      _RAW_MYISAM_MEM=$(echo ${_REC_MYISAM_MEM} | sed "s/[A-Z]//g" 2>&1)
      if [[ "${_REC_MYISAM_MEM}" =~ "G" ]]; then
        _RAW_MYISAM_MEM=$(( _RAW_MYISAM_MEM * 1024 ))
      fi
      if [ "${_RAW_MYISAM_MEM}" -gt "${_USE_SQL}" ]; then
        _USE_MYISAM_MEM="${_USE_SQL}"
      else
        _USE_MYISAM_MEM="${_RAW_MYISAM_MEM}"
      fi
      if [ "${_USE_MYISAM_MEM}" -lt "256" ] || [ -z "${_USE_MYISAM_MEM}" ]; then
        _USE_MYISAM_MEM="${_USE_SQL}"
      fi
      _USE_MYISAM_MEM="${_USE_MYISAM_MEM}M"
      sed -i "s/^key_buffer_size.*/key_buffer_size         = ${_USE_MYISAM_MEM}/g"  /etc/mysql/my.cnf
      wait
    else
      _USE_MYISAM_MEM="${_USE_SQL}M"
      if [ "${_MYSQLTUNER_TEST_RESULT}" = "FAIL" ]; then
        _msg "NOTE: _USE_MYISAM_MEM is ${_USE_MYISAM_MEM} because _REC_MYISAM_MEM was empty!"
      fi
      sed -i "s/^key_buffer_size.*/key_buffer_size         = ${_USE_MYISAM_MEM}/g"  /etc/mysql/my.cnf
      wait
    fi
    ###--------------------###
    if [ ! -z "${_REC_INNODB_MEM}" ] && [ "${_MYSQLTUNER_TEST_RESULT}" = "OK" ]; then
      _RAW_INNODB_MEM=$(echo ${_REC_INNODB_MEM} | sed "s/[A-Z]//g" 2>&1)
      if [[ "${_REC_INNODB_MEM}" =~ "G" ]]; then
        _RAW_INNODB_MEM=$(echo ${_RAW_INNODB_MEM} | awk '{print int($1+0.6)}' 2>&1)
        _RAW_INNODB_MEM=$(echo "${_RAW_INNODB_MEM} * 1024" | bc -l 2>&1)
      elif [[ "${_REC_INNODB_MEM}" =~ "M" ]]; then
        _RAW_INNODB_MEM=$(echo ${_RAW_INNODB_MEM} | awk '{print int($1+0.6)}' 2>&1)
        _RAW_INNODB_MEM=$(echo "${_RAW_INNODB_MEM} * 1" | bc -l 2>&1)
      fi
      _RAW_INNODB_MEM=$(echo "(${_RAW_INNODB_MEM}+0.5)/1" | bc 2>&1)
      if [ "${_RAW_INNODB_MEM}" -gt "${_USE_SQL}" ] \
        || [ -z "${_USE_INNODB_MEM}" ] \
        || [ "${_RAW_INNODB_MEM}" -lt "512" ]; then
        _USE_INNODB_MEM="${_USE_SQL}"
      else
        _RAW_INNODB_MEM=$(echo "scale=2; (${_RAW_INNODB_MEM} * 1.1)" | bc 2>&1)
        _USE_INNODB_MEM=$(echo "(${_RAW_INNODB_MEM}+0.5)/1" | bc 2>&1)
      fi
      _INNODB_BPI=$(echo "scale=0; ${_USE_INNODB_MEM}/1024/2" | bc 2>&1)
      if [ "${_INNODB_BPI}" -lt "1" ] || [ -z "${_INNODB_BPI}" ]; then
        _INNODB_BPI="1"
      fi
      sed -i "s/^innodb_buffer_pool_instances.*/innodb_buffer_pool_instances = ${_INNODB_BPI}/g" /etc/mysql/my.cnf
      wait
      sed -i "s/^innodb_page_cleaners.*/innodb_page_cleaners = ${_INNODB_BPI}/g" /etc/mysql/my.cnf
      wait
      _USE_INNODB_MEM="${_USE_INNODB_MEM}M"
      sed -i "s/^innodb_buffer_pool_size.*/innodb_buffer_pool_size = ${_USE_INNODB_MEM}/g"  /etc/mysql/my.cnf
      wait
    else
      _USE_INNODB_MEM="${_USE_SQL}M"
      _msg "NOTE: _USE_INNODB_MEM is ${_USE_INNODB_MEM} because _REC_INNODB_MEM was empty!"
      sed -i "s/^innodb_buffer_pool_size.*/innodb_buffer_pool_size = ${_USE_INNODB_MEM}/g"  /etc/mysql/my.cnf
      wait
    fi
  else
    _THIS_USE_MEM="${_USE_SQL}M"
    if [ "${_MYSQLTUNER_TEST_RESULT}" = "FAIL" ] \
      && [ "${_STATUS}" = "UPGRADE" ]; then
      _msg "NOTE: _USE_MYISAM_MEM is ${_THIS_USE_MEM} because _REC_MYISAM_MEM was empty!"
      _msg "NOTE: _USE_INNODB_MEM is ${_THIS_USE_MEM} because _REC_INNODB_MEM was empty!"
    fi
    sed -i "s/= 181/= ${_USE_SQL}/g"  /etc/mysql/my.cnf
    wait
  fi
}
#
# Tune memory limits for PHP, Nginx and Percona.
_tune_memory_limits() {
  _msg "INFO: Default Memory Tuning"
  _VM_TEST=$(uname -a 2>&1)
  if [ -e "/proc/bean_counters" ]; then
    _VMFAMILY="VZ"
  elif [ -e "/root/.tg.cnf" ]; then
    _VMFAMILY="TG"
  else
    _VMFAMILY="XEN"
  fi
  if [[ "${_VM_TEST}" =~ "-beng" ]]; then
    _VMFAMILY="VS"
  fi
  # Check for Amazon EC2 in the system manufacturer field
  if dmidecode -s system-manufacturer | grep -i 'Amazon EC2' &> /dev/null; then
    _VMFAMILY="AWS"
  fi
  _CPU_INFO=$(grep -c processor /proc/cpuinfo 2>&1)
  _CPU_INFO=${_CPU_INFO//[^0-9]/}
  _NPROC_TEST=$(which nproc 2>&1)
  if [ -z "${_NPROC_TEST}" ]; then
    _CPU_NR="${_CPU_INFO}"
  else
    _CPU_NR=$(nproc 2>&1)
  fi
  _CPU_NR=${_CPU_NR//[^0-9]/}
  if [ ! -z "${_CPU_NR}" ] && [ ! -z "${_CPU_INFO}" ] \
    && [ "${_CPU_NR}" -gt "${_CPU_INFO}" ] && [ "${_CPU_INFO}" -gt "0" ]; then
    _CPU_NR="${_CPU_INFO}"
  fi
  if [ -z "${_CPU_NR}" ] || [ "${_CPU_NR}" -lt "1" ]; then
    _CPU_NR=1
  fi
  _CPU_MX=$(( _CPU_NR * 2 ))
  if [ "${_CPU_MX}" -lt "4" ]; then
    _CPU_MX=4
  fi
  _CPU_TG=$(( _CPU_NR / 2 ))
  if [ "${_CPU_TG}" -lt "4" ]; then
    _CPU_TG=4
  fi
  _CPU_VS=$(( _CPU_NR / 12 ))
  if [ "${_CPU_VS}" -lt "2" ]; then
    _CPU_VS=2
  fi
  _PrTest=$(grep "POWER" /root/.*.octopus.cnf 2>&1)
  if [[ "${_PrTest}" =~ "POWER" ]]; then
    if [ "${_CPU_VS}" -lt "8" ]; then
      _CPU_VS=8
    fi
  fi
  _PrTest=$(grep "PHANTOM" /root/.*.octopus.cnf 2>&1)
  if [[ "${_PrTest}" =~ "PHANTOM" ]]; then
    if [ "${_CPU_VS}" -lt "8" ]; then
      _CPU_VS=8
    fi
  fi
  _PrTest=$(grep "CLUSTER" /root/.*.octopus.cnf 2>&1)
  if [[ "${_PrTest}" =~ "CLUSTER" ]]; then
    if [ "${_CPU_VS}" -lt "8" ]; then
      _CPU_VS=8
    fi
  fi
  _RAM=$(free -mt | grep Mem: | awk '{ print $2 }' 2>&1)
  if [ "${_RESERVED_RAM}" -gt "0" ]; then
    _RAM=$(( _RAM - _RESERVED_RAM ))
  fi
  _USE=$(( _RAM / 4 ))
  _if_hosted_sys
  if [ "${_VMFAMILY}" = "VS" ] \
    || [ "${_hostedSys}" = "YES" ]; then
    if [ "${_VMFAMILY}" = "VS" ]; then
      if [ -e "/root/.tg.cnf" ]; then
        _USE_SQL=$(( _RAM / 12 ))
      else
        _USE_SQL=$(( _RAM / 24 ))
      fi
    else
      _USE_SQL=$(( _RAM / 8 ))
    fi
  else
    _USE_SQL=$(( _RAM / 8 ))
  fi
  if [ "${_USE_SQL}" -lt "64" ]; then
    _USE_SQL=64
  fi
  _TMP_SQL="${_USE_SQL}M"
  _SRT_SQL=$(( _USE_SQL * 2 ))
  _SRT_SQL="${_SRT_SQL}K"
  if [ "${_USE}" -ge "512" ] && [ "${_USE}" -lt "2048" ]; then
    _USE_PHP=1024
    _USE_OPC=1024
    _USE_CLI=2048
    _QCE_SQL=32M
    _RND_SQL=8M
    _JBF_SQL=4M
    if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
      _L_PHP_FPM_WORKERS=$(( _CPU_NR * 4 ))
    else
      _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
    fi
    _MXC_SQL=$(( _L_PHP_FPM_WORKERS * 4 ))
    if [ "${_NGINX_WORKERS}" = "AUTO" ]; then
      _L_NGX_WRKS=${_CPU_MX}
    else
      _L_NGX_WRKS=${_NGINX_WORKERS}
    fi
  elif [ "${_USE}" -ge "2048" ]; then
    if [ "${_VMFAMILY}" = "XEN" ] || [ "${_VMFAMILY}" = "AWS" ]; then
      _USE_PHP=2048
      _USE_OPC=2048
      _USE_CLI=2048
      _QCE_SQL=64M
      _RND_SQL=8M
      _JBF_SQL=4M
      if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
        _L_PHP_FPM_WORKERS=$(( _CPU_NR * 4 ))
      else
        _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
      fi
      _MXC_SQL=$(( _L_PHP_FPM_WORKERS * 4 ))
      if [ "${_NGINX_WORKERS}" = "AUTO" ]; then
        _L_NGX_WRKS=${_CPU_MX}
      else
        _L_NGX_WRKS=${_NGINX_WORKERS}
      fi
    elif [ "${_VMFAMILY}" = "VS" ] || [ "${_VMFAMILY}" = "TG" ]; then
      if [ -e "/boot/grub/grub.cfg" ] \
        || [ -e "/boot/grub/menu.lst" ] \
        || [ -e "/root/.tg.cnf" ]; then
        _USE_PHP=2048
        _USE_OPC=2048
        _USE_CLI=2048
        _QCE_SQL=64M
        _RND_SQL=8M
        _JBF_SQL=4M
        if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
          _L_PHP_FPM_WORKERS=$(( _CPU_NR * 4 ))
        else
          _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
        fi
        _MXC_SQL=$(( _L_PHP_FPM_WORKERS * 4 ))
        if [ "${_MXC_SQL}" -lt "10" ]; then
          _MXC_SQL=10
        fi
        if [ "${_NGINX_WORKERS}" = "AUTO" ]; then
          _L_NGX_WRKS=${_CPU_TG}
        else
          _L_NGX_WRKS=${_NGINX_WORKERS}
        fi
        sed -i "s/64000/128000/g"  /opt/php83/etc/php83.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php82/etc/php82.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php81/etc/php81.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php80/etc/php80.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php74/etc/php74.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php73/etc/php73.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php72/etc/php72.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php71/etc/php71.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php70/etc/php70.ini &> /dev/null
        sed -i "s/64000/128000/g"  /opt/php56/etc/php56.ini &> /dev/null
      else
        _USE_PHP=2048
        _USE_OPC=2048
        _USE_CLI=2048
        _QCE_SQL=64M
        _RND_SQL=2M
        _JBF_SQL=2M
        if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
          _L_PHP_FPM_WORKERS=$(( _CPU_NR * 4 ))
        else
          _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
        fi
        _MXC_SQL=$(( _L_PHP_FPM_WORKERS * 4 ))
        if [ "${_NGINX_WORKERS}" = "AUTO" ]; then
          _L_NGX_WRKS=${_CPU_VS}
        else
          _L_NGX_WRKS=${_NGINX_WORKERS}
        fi
      fi
    else
      _USE_PHP=512
      _USE_OPC=512
      _USE_CLI=512
      _QCE_SQL=32M
      _RND_SQL=2M
      _JBF_SQL=2M
      if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
        _L_PHP_FPM_WORKERS=$(( _CPU_NR * 4 ))
      else
        _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
      fi
      _MXC_SQL=$(( _L_PHP_FPM_WORKERS * 4 ))
      if [ "${_NGINX_WORKERS}" = "AUTO" ]; then
        _L_NGX_WRKS=${_CPU_MX}
      else
        _L_NGX_WRKS=${_NGINX_WORKERS}
      fi
    fi
  else
    _USE_PHP="${_USE}"
    _USE_OPC="${_USE}"
    _USE_CLI="${_USE}"
    _QCE_SQL=32M
    _RND_SQL=1M
    _JBF_SQL=1M
    if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
      _L_PHP_FPM_WORKERS=$(( _CPU_NR * 4 ))
    else
      _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
    fi
    _MXC_SQL=$(( _L_PHP_FPM_WORKERS * 4 ))
    if [ "${_NGINX_WORKERS}" = "AUTO" ]; then
      _L_NGX_WRKS=${_CPU_MX}
    else
      _L_NGX_WRKS=${_NGINX_WORKERS}
    fi
  fi
  _USE_JETTY="-Xmx${_USE_OPC}m"
  if [ "${_VMFAMILY}" = "VZ" ]; then
    _USE_OPC=64
  fi
  if [ "${_USE_PHP}" -lt "1024" ]; then
    _USE_PHP=1024
  fi
  _USE_FPM=$(( _USE_PHP / 2 ))
  if [ "${_USE_FPM}" -lt "1024" ]; then
    _USE_FPM=1024
  fi
  if [ ! -e "/var/xdrago/conf/fpm-pool-foo-multi.conf" ]; then
    mkdir -p /var/xdrago/conf
  fi
  if [ ! -e "/data/conf" ]; then
    mkdir -p /data/conf
  fi
  cp -af ${_locCnf}/php/fpm-pool-foo-multi.conf /var/xdrago/conf/
  cp -af ${_locCnf}/php/fpm-pool-foo.conf /var/xdrago/conf/
  cp -af ${_locCnf}/hhvm /var/xdrago/conf/
  cp -af ${_locCnf}/hhvm/hhvm_intercept.php /data/conf/hhvm_intercept.php
  chmod 644 /data/conf/hhvm_intercept.php
  if [ -e "/opt/etc/fpm/fpm-pool-common.conf" ]; then
    sed -i "s/395/${_USE_FPM}/g" /opt/etc/fpm/fpm-pool-common.conf &> /dev/null
    wait
  fi
  if [ -e "/opt/php83/etc/php83.ini" ]; then
    sed -i "s/395/${_USE_FPM}/g" /opt/php83/etc/php83.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php83/etc/php83.ini &> /dev/null
    sed -i "s/395/${_USE_CLI}/g" /opt/php83/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php82/etc/php82.ini" ]; then
    sed -i "s/395/${_USE_FPM}/g" /opt/php82/etc/php82.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php82/etc/php82.ini &> /dev/null
    sed -i "s/395/${_USE_CLI}/g" /opt/php82/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php81/etc/php81.ini" ]; then
    sed -i "s/395/${_USE_FPM}/g" /opt/php81/etc/php81.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php81/etc/php81.ini &> /dev/null
    sed -i "s/395/${_USE_CLI}/g" /opt/php81/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php80/etc/php80.ini" ]; then
    sed -i "s/395/${_USE_FPM}/g" /opt/php80/etc/php80.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php80/etc/php80.ini &> /dev/null
    sed -i "s/395/${_USE_CLI}/g" /opt/php80/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php74/etc/php74.ini" ]; then
    sed -i "s/395/${_USE_FPM}/g" /opt/php74/etc/php74.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php74/etc/php74.ini &> /dev/null
    sed -i "s/395/${_USE_CLI}/g" /opt/php74/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php73/etc/php73.ini" ]; then
    sed -i "s/395/${_USE_FPM}/g" /opt/php73/etc/php73.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php73/etc/php73.ini &> /dev/null
    sed -i "s/395/${_USE_CLI}/g" /opt/php73/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php72/etc/php72.ini" ]; then
    sed -i "s/395/${_USE_FPM}/g" /opt/php72/etc/php72.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php72/etc/php72.ini &> /dev/null
    sed -i "s/395/${_USE_CLI}/g" /opt/php72/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php71/etc/php71.ini" ]; then
    sed -i "s/395/${_USE_FPM}/g" /opt/php71/etc/php71.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php71/etc/php71.ini &> /dev/null
    sed -i "s/395/${_USE_CLI}/g" /opt/php71/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php70/etc/php70.ini" ]; then
    sed -i "s/395/${_USE_FPM}/g" /opt/php70/etc/php70.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php70/etc/php70.ini &> /dev/null
    sed -i "s/395/${_USE_CLI}/g" /opt/php70/lib/php.ini   &> /dev/null
  fi
  if [ -e "/opt/php56/etc/php56.ini" ]; then
    sed -i "s/395/${_USE_FPM}/g" /opt/php56/etc/php56.ini &> /dev/null
    wait
    sed -i "s/181/${_USE_OPC}/g" /opt/php56/etc/php56.ini &> /dev/null
    sed -i "s/395/${_USE_CLI}/g" /opt/php56/lib/php.ini   &> /dev/null
  fi
  if [ "${_CUSTOM_CONFIG_SQL}" = "NO" ]; then
    _tune_sql_memory_limits
    _PrTestPower=$(grep "POWER" /root/.*.octopus.cnf 2>&1)
    _PrTestPhantom=$(grep "PHANTOM" /root/.*.octopus.cnf 2>&1)
    _PrTestCluster=$(grep "CLUSTER" /root/.*.octopus.cnf 2>&1)
    if [[ "${_PrTestPower}" =~ "POWER" ]] \
      || [[ "${_PrTestPhantom}" =~ "PHANTOM" ]] \
      || [ -e "/root/.my.cluster_root_pwd.txt" ] \
      || [[ "${_PrTestCluster}" =~ "CLUSTER" ]]; then
      _UXC_SQL="${_MXC_SQL}"
    else
      _UXC_SQL=$(echo "scale=0; ${_MXC_SQL}/2" | bc 2>&1)
    fi
    sed -i "s/= 191/= ${_UXC_SQL}/g"                                              /etc/mysql/my.cnf
    wait
    sed -i "s/= 292/= ${_MXC_SQL}/g"                                              /etc/mysql/my.cnf
    wait
    sed -i "s/^tmp_table_size.*/tmp_table_size          = ${_TMP_SQL}/g"          /etc/mysql/my.cnf
    wait
    sed -i "s/^max_heap_table_size.*/max_heap_table_size     = ${_TMP_SQL}/g"     /etc/mysql/my.cnf
    wait
    sed -i "s/^myisam_sort_buffer_size.*/myisam_sort_buffer_size = ${_SRT_SQL}/g" /etc/mysql/my.cnf
    wait
    sed -i "s/^read_rnd_buffer_size.*/read_rnd_buffer_size    = ${_RND_SQL}/g"    /etc/mysql/my.cnf
    wait
    sed -i "s/^join_buffer_size.*/join_buffer_size        = ${_JBF_SQL}/g"        /etc/mysql/my.cnf
    wait
  fi
  if [ "${_USE_OPC}" -gt "2048" ]; then
    _MAX_MEM_REDIS=2048
  else
    _MAX_MEM_REDIS="${_USE_OPC}"
  fi
  _MAX_MEM_REDIS="${_MAX_MEM_REDIS}MB"
  sed -i "s/^maxmemory .*/maxmemory ${_MAX_MEM_REDIS}/g" \
    /etc/redis/redis.conf &> /dev/null
  wait
  if [ -e "/etc/default/jetty9" ] && [ -e "/opt/solr4" ]; then
    sed -i "s/^JAVA_OPTIONS.*/JAVA_OPTIONS=\"-Xms64m ${_USE_JETTY} -Djava.awt.headless=true -Dsolr.solr.home=\/opt\/solr4 \$JAVA_OPTIONS\" # Options/g" /etc/default/jetty9
    wait
  fi
  if [ -e "/etc/default/jetty8" ] && [ -e "/opt/solr3" ]; then
    sed -i "s/^JAVA_OPTIONS.*/JAVA_OPTIONS=\"-Xms64m ${_USE_JETTY} -Djava.awt.headless=true -Dsolr.solr.home=\/opt\/solr3 \$JAVA_OPTIONS\" # Options/g" /etc/default/jetty8
    wait
  fi
  if [ -e "/etc/default/jetty7" ] && [ -e "/opt/solr1" ]; then
    sed -i "s/^JAVA_OPTIONS.*/JAVA_OPTIONS=\"-Xms64m ${_USE_JETTY} -Djava.awt.headless=true -Dsolr.solr.home=\/opt\/solr1 \$JAVA_OPTIONS\" # Options/g" /etc/default/jetty7
    wait
  fi
  _tune_web_server_config
}
#
_check_git_repos() {
  _GITHUB_WORKS=NO
  _GITLAB_WORKS=NO
  if [ "${_FORCE_GIT_MIRROR}" = "drupal" ]; then
    _FORCE_GIT_MIRROR=github
  fi
  if [ "${_FORCE_GIT_MIRROR}" = "gitorious" ]; then
    _FORCE_GIT_MIRROR=gitlab
  fi
  if [ "${_FORCE_GIT_MIRROR}" = "github" ]; then
    _msg "INFO: We will use forced GitHub repository without testing connection"
    _GITHUB_WORKS=YES
    _GITLAB_WORKS=NO
    sleep 1
  elif [ "${_FORCE_GIT_MIRROR}" = "gitlab" ]; then
    _msg "INFO: We will use forced GitLab mirror without testing connection"
    _GITHUB_WORKS=NO
    _GITLAB_WORKS=YES
    sleep 1
  else
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      _msg "INFO: Testing repository mirror servers availability..."
    fi
    sleep 1
    _GITHUB_WORKS=YES
    _GITLAB_WORKS=YES
    if ! netcat -w 10 -z github.com 443 ; then
      _GITHUB_WORKS=NO
      _msg "WARN: The GitHub master repository server doesn't respond..."
    elif ! netcat -w 10 -z gitlab.com 443 ; then
      _GITLAB_WORKS=NO
      _msg "WARN: The GitLab mirror repository server doesn't respond..."
    fi
  fi
  if [ "${_GITHUB_WORKS}" = "YES" ]; then
    _BOA_REPO_NAME="boa"
    _BOA_REPO_GIT_URL="https://github.com/omega8cc"
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      _msg "INFO: GitHub master repository will be used"
    fi
  elif [ "${_GITLAB_WORKS}" = "YES" ]; then
    _BOA_REPO_NAME="boa"
    _BOA_REPO_GIT_URL="${_gitLab}"
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      _msg "INFO: GitLab mirror repository will be used"
    fi
  else
    cat <<EOF

    None of repository servers responded in 8 seconds,
    so we can't continue this installation.

    Please try again later or check if your firewall has port 443 open.

    Bye.

EOF
    _clean_pid_exit _check_git_repos_a
  fi
}


###---### init
#
touch /run/boa_run.pid
#
_BOA_REPO_NAME="boa"
_BOA_REPO_GIT_URL="https://github.com/omega8cc"
if [ "${_AEGIR_VERSION}" != "static" ]; then
  _check_git_repos
fi
#
#
if [ `whoami` = "root" ]; then
  chmod a+w /dev/null
  _msg "INFO: This script is ran as a root user"
  _count_cpu
  _find_fast_mirror_early
else
  _msg "ERROR: This script should be run as a root user"
  _msg "Bye"
  _clean_pid_exit root_a
fi
#
#
if [ ! -f "/var/log/barracuda_log.txt" ]; then
  _msg "ERROR: Please upgrade this system to BOA version ${_X_VERSION} first"
  _msg "Bye"
  _clean_pid_exit version_a
else
  _VERSIONS_TEST=$(cat /var/log/barracuda_log.txt 2>&1)
  if [[ "${_VERSIONS_TEST}" =~ "${_X_VERSION}" ]]; then
    _VERSIONS_TEST_RESULT=OK
  else
    _msg "ERROR: Please upgrade this system to BOA version ${_X_VERSION} first"
    _msg "Bye"
    _clean_pid_exit version_b
  fi
fi
#
#
rm -f /run/aegir_upgrade.pid
rm -f /opt/tmp/testecho*
_SRCDIR="/opt/tmp/files"
mkdir -p ${_SRCDIR}
chmod -R 777 /opt/tmp &> /dev/null
cd /opt/tmp
rm -rf /opt/tmp/boa
if [ "${_AEGIR_VERSION}" != "static" ]; then
  ${_gCb} ${_BRANCH_BOA} ${_BOA_REPO_GIT_URL}/${_BOA_REPO_NAME}.git &> /dev/null
else
  curl ${_crlGet} "${_urlDev}/${_AEGIR_VERSION}/boa.tar.gz" | tar -xzf -
  _BOA_REPO_NAME="boa"
fi
#
# Get spinner
cd ${_SRCDIR}
rm -f spinner*
cp -af ${_bldPth}/aegir/helpers/spinner ./
chmod +x spinner &> /dev/null
#
# Create tmp stuff
_LOG=/var/backups/bond-${_NOW}.log
#
#


###---### Tune Your Aegir Hosting System
#
echo " "
if [ "${_DEBUG_MODE}" = "YES" ]; then
  _msg "TUNER START -> checkpoint: "
  cat <<EOF

  * Aegir Satellite Instance to tune: ${_TUNE_HOSTMASTER}
  * Nginx server mod_evasive will be set to ${_TUNE_NGINX_CONNECT}
  * Nginx server fastcgi timeout will be set to ${_TUNE_NGINX_TIMEOUT} seconds
  * Nginx firewall limit of allowed requests will be set to ${_TUNE_NGINX_FIREWALL}/300
  * Database server timeout will be set to ${_TUNE_SQL_TIMEOUT} seconds
  * PHP-FPM server timeout will be set to ${_TUNE_PHP_FPM_TIMEOUT} seconds
  * PHP-CLI drush timeout will be set to ${_TUNE_PHP_CLI_TIMEOUT} seconds

EOF
  echo " "
fi
_tPrmt="Are you ready to tune your system"
_tPrmt="${_tPrmt} with values shown above"
_tPrmt=$(echo -n ${_tPrmt} | fmt -su -w 2500 2>&1)
if _prompt_yes_no "${_tPrmt}?" ; then
  true
  if [ ! -e "/root/.upstart.cnf" ]; then
    _msg "INFO: We will stop cron and then wait 30 seconds..."
    service cron stop &> /dev/null
    _mrun "sleep 30"
  fi
  _msg "INFO: Tuning in progress, please wait..."
  [ -e "/root/.barracuda.cnf" ] && source /root/.barracuda.cnf
  _restore_default_php
  _php_conf_update
  _tune_php
  _restore_default_sql
  _tune_sql
  _restore_default_nginx
  _tune_nginx
  _tune_memory_limits
  _restart_services
  _msg "INFO: Tuning completed"
else
  if [ ! -e "/root/.upstart.cnf" ]; then
    _msg "INFO: We will stop cron and then wait 30 seconds..."
    service cron stop &> /dev/null
    _mrun "sleep 30"
  fi
  [ -e "/root/.barracuda.cnf" ] && source /root/.barracuda.cnf
  _restore_default_php
  _php_conf_update
  _restore_default_sql
  _restore_default_nginx
  _tune_memory_limits
  _restart_services
  _msg "INFO: Tuning stopped and default settings restored"
fi
rm -rf /var/opt/*
rm -rf /opt/tmp/*
[ -e "/run/boa_run.pid" ] && rm -f /run/boa_run.pid
if [ ! -e "/root/.upstart.cnf" ]; then
  service cron start &> /dev/null
fi
if [ "${_DEBUG_MODE}" = "YES" ]; then
  _msg "INFO: Cron started again"
fi
_msg "BYE!"

###----------------------------------------###
###
###  Barracuda-Octopus-Nginx-Drupal Tuner
###  Copyright (C) 2010-2024 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###----------------------------------------###
