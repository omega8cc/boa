#!/bin/bash


###----------------------------------------###
###
###  Barracuda Aegir Installer
###
###  Copyright (C) 2010-2024 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###  This program is free software. You can
###  redistribute it and/or modify it under
###  the terms of the GNU GPL as published by
###  the Free Software Foundation, version 2
###  or later.
###
###  This program is distributed in the hope
###  that it will be useful, but WITHOUT ANY
###  WARRANTY; without even the implied
###  warranty of MERCHANTABILITY or FITNESS
###  FOR A PARTICULAR PURPOSE. See the GNU GPL
###  for more details.
###
###  You should have received a copy of the
###  GNU GPL along with this program.
###  If not, see http://www.gnu.org/licenses/
###
###  Code: https://github.com/omega8cc/boa
###
###----------------------------------------###


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###


###
### Default variables
###
_bldPth="/opt/tmp/boa"
_filIncB="barracuda.sh.cnf"
_libFnc="${_bldPth}/lib/functions"
_vBs="/var/backups"
export _tRee=dev


###
### Panic on missing include
###
_panic_exit() {
  echo
  echo " EXIT: Required lib file not available?"
  echo " EXIT: $1"
  echo " EXIT: Cannot continue"
  echo " EXIT: Bye (0)"
  echo
  touch /opt/tmp/status-AegirUpgrade-FAIL
  exit 1
}


###
### Include default settings and basic functions
###
[ -r "${_vBs}/${_filIncB}" ] || _panic_exit "${_vBs}/${_filIncB}"
  source "${_vBs}/${_filIncB}"


###
### Include shared functions
###
_FL="helper master"
for f in ${_FL}; do
  [ -r "${_libFnc}/${f}.sh.inc" ] || _panic_exit "${f}"
  source "${_libFnc}/${f}.sh.inc"
done


###
### Local settings
###
if [ "${_THIS_DB_HOST}" = "FQDN" ]; then
  _THIS_DB_HOST=$(uname -n 2>&1)
fi
if [ "${_PHP_CLI_VERSION}" = "8.3" ] \
  && [ -x "/opt/php83/bin/php" ]; then
  _T_CLI=/opt/php83/bin
elif [ "${_PHP_CLI_VERSION}" = "8.2" ] \
  && [ -x "/opt/php82/bin/php" ]; then
  _T_CLI=/opt/php82/bin
elif [ "${_PHP_CLI_VERSION}" = "8.1" ] \
  && [ -x "/opt/php81/bin/php" ]; then
  _T_CLI=/opt/php81/bin
elif [ "${_PHP_CLI_VERSION}" = "8.0" ] \
  && [ -x "/opt/php80/bin/php" ]; then
  _T_CLI=/opt/php80/bin
elif [ "${_PHP_CLI_VERSION}" = "7.4" ] \
  && [ -x "/opt/php74/bin/php" ]; then
  _T_CLI=/opt/php74/bin
elif [ "${_PHP_CLI_VERSION}" = "7.3" ] \
  && [ -x "/opt/php73/bin/php" ]; then
  _T_CLI=/opt/php73/bin
elif [ "${_PHP_CLI_VERSION}" = "7.2" ] \
  && [ -x "/opt/php72/bin/php" ]; then
  _T_CLI=/opt/php72/bin
elif [ "${_PHP_CLI_VERSION}" = "7.1" ] \
  && [ -x "/opt/php71/bin/php" ]; then
  _T_CLI=/opt/php71/bin
elif [ "${_PHP_CLI_VERSION}" = "7.0" ] \
  && [ -x "/opt/php70/bin/php" ]; then
  _T_CLI=/opt/php70/bin
elif [ "${_PHP_CLI_VERSION}" = "5.6" ] \
  && [ -x "/opt/php56/bin/php" ]; then
  _T_CLI=/opt/php56/bin
fi
_ROOT="${HOME}"
_DRUSHCMD="${_T_CLI}/php ${_ROOT}/drush/drush.php"
#
PATH=${_T_CLI}:/usr/local/bin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin
SHELL=/bin/bash
#
_crlGet="-L --max-redirs 3 -k -s --retry 3 --retry-delay 5 -A iCab"
_gCb="git clone --branch"
_gitHub="https://github.com/omega8cc"
_gitLab="https://gitlab.com/omega8cc"
#
_urlDev="http://${_USE_MIR}/dev"
_urlHmr="http://${_USE_MIR}/versions/${_tRee}/boa/aegir"


###---### Local functions
#
#
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
if [ -z "${TERM+x}" ]; then
  export TERM=vt100
fi
#
# Update php-cli for Drush.
_php_cli_drush_update() {
  if [ ! -z "${1}" ]; then
    _DRUSH_FILE="${_ROOT}/drush/${1}"
  else
    _DRUSH_FILE="${_ROOT}/drush/drush.php"
  fi
  if [ "${_PHP_CLI_VERSION}" = "8.3" ] \
    && [ -x "/opt/php83/bin/php" ]; then
    sed -i "s/^#\!\/.*/#\!\/opt\/php83\/bin\/php/g" \
      ${_DRUSH_FILE} &> /dev/null
  elif [ "${_PHP_CLI_VERSION}" = "8.2" ] \
    && [ -x "/opt/php82/bin/php" ]; then
    sed -i "s/^#\!\/.*/#\!\/opt\/php82\/bin\/php/g" \
      ${_DRUSH_FILE} &> /dev/null
  elif [ "${_PHP_CLI_VERSION}" = "8.1" ] \
    && [ -x "/opt/php81/bin/php" ]; then
    sed -i "s/^#\!\/.*/#\!\/opt\/php81\/bin\/php/g" \
      ${_DRUSH_FILE} &> /dev/null
  elif [ "${_PHP_CLI_VERSION}" = "8.0" ] \
    && [ -x "/opt/php80/bin/php" ]; then
    sed -i "s/^#\!\/.*/#\!\/opt\/php80\/bin\/php/g" \
      ${_DRUSH_FILE} &> /dev/null
  elif [ "${_PHP_CLI_VERSION}" = "7.4" ] \
    && [ -x "/opt/php74/bin/php" ]; then
    sed -i "s/^#\!\/.*/#\!\/opt\/php74\/bin\/php/g" \
      ${_DRUSH_FILE} &> /dev/null
  elif [ "${_PHP_CLI_VERSION}" = "7.3" ] \
    && [ -x "/opt/php73/bin/php" ]; then
    sed -i "s/^#\!\/.*/#\!\/opt\/php73\/bin\/php/g" \
      ${_DRUSH_FILE} &> /dev/null
  elif [ "${_PHP_CLI_VERSION}" = "7.2" ] \
    && [ -x "/opt/php72/bin/php" ]; then
    sed -i "s/^#\!\/.*/#\!\/opt\/php72\/bin\/php/g" \
      ${_DRUSH_FILE} &> /dev/null
  elif [ "${_PHP_CLI_VERSION}" = "7.1" ] \
    && [ -x "/opt/php71/bin/php" ]; then
    sed -i "s/^#\!\/.*/#\!\/opt\/php71\/bin\/php/g" \
      ${_DRUSH_FILE} &> /dev/null
  elif [ "${_PHP_CLI_VERSION}" = "7.0" ] \
    && [ -x "/opt/php70/bin/php" ]; then
    sed -i "s/^#\!\/.*/#\!\/opt\/php70\/bin\/php/g" \
      ${_DRUSH_FILE} &> /dev/null
  elif [ "${_PHP_CLI_VERSION}" = "5.6" ] \
    && [ -x "/opt/php56/bin/php" ]; then
    sed -i "s/^#\!\/.*/#\!\/opt\/php56\/bin\/php/g" \
      ${_DRUSH_FILE} &> /dev/null
  else
    _msg "FATAL ERROR: _PHP_CLI_VERSION must be set to one of supported versions"
    _msg "FATAL ERROR: Aborting AegirUpgrade installer NOW!"
    touch /opt/tmp/status-AegirUpgrade-FAIL
    exit 1
  fi
}
#
#
_hostmaster_mv_up() {
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    _msg "INFO: Moving old directories"
  fi
  mkdir -p ${_ROOT}/backups/system
  chmod 700 ${_ROOT}/backups/system
  mv -f ${_ROOT}/backups/drush-pre* ${_ROOT}/backups/system/ &> /dev/null
  _D_EXT="provision clean_missing_modules drupalgeddon drush_ecl make_local \
    provision_boost provision_cdn provision_civicrm provision_site_backup \
    provision_tasks_extra registry_rebuild remote_import \
    safe_cache_form_clear security_check security_review utf8mb4_convert"
  for e in ${_D_EXT}; do
    if [ -e "${_ROOT}/.drush/$e" ]; then
      mv -f ${_ROOT}/.drush/$e \
        ${_ROOT}/backups/system/$e-pre-${_DISTRO}-${_NOW} &> /dev/null
      mv -f ${_ROOT}/backups/$e-pre* ${_ROOT}/backups/system/ &> /dev/null
    fi
    if [ -e "${_ROOT}/.drush/xts/$e" ]; then
      mv -f ${_ROOT}/.drush/xts/$e \
        ${_ROOT}/backups/system/$e-pre-${_DISTRO}-${_NOW} &> /dev/null
      mv -f ${_ROOT}/backups/$e-pre* ${_ROOT}/backups/system/ &> /dev/null
    fi
    if [ -e "${_ROOT}/.drush/usr/$e" ]; then
      mv -f ${_ROOT}/.drush/usr/$e \
        ${_ROOT}/backups/system/$e-pre-${_DISTRO}-${_NOW} &> /dev/null
      mv -f ${_ROOT}/backups/$e-pre* ${_ROOT}/backups/system/ &> /dev/null
    fi
    if [ -e "${_ROOT}/.drush/sys/$e" ]; then
      mv -f ${_ROOT}/.drush/sys/$e \
        ${_ROOT}/backups/system/$e-pre-${_DISTRO}-${_NOW} &> /dev/null
      mv -f ${_ROOT}/backups/$e-pre* ${_ROOT}/backups/system/ &> /dev/null
    fi
  done
}
#
_hostmaster_dr_up() {
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    _msg "INFO: Downloading drush ${_DRUSH_VERSION}..."
  fi
  mkdir -p ${_ROOT}/backups/system
  chmod 700 ${_ROOT}/backups/system
  cd ${_ROOT}
  mv -f drush ${_ROOT}/backups/system/drush-pre-${_DISTRO}-${_NOW} &> /dev/null
  _get_dev_ext "drush-${_DRUSH_VERSION}.tar.gz"
  cd ${_ROOT}/drush/
  find ${_ROOT}/drush -type d -exec chmod 0755 {} \; &> /dev/null
  find ${_ROOT}/drush -type f -exec chmod 0644 {} \; &> /dev/null
  chmod 755 ${_ROOT}/drush/drush
  chmod 755 ${_ROOT}/drush/drush.complete.sh
  chmod 755 ${_ROOT}/drush/drush.launcher
  chmod 755 ${_ROOT}/drush/drush.php
  chmod 755 ${_ROOT}/drush/unish.sh
  chmod 755 ${_ROOT}/drush/examples/drush.wrapper
  chmod 755 ${_ROOT}/drush/examples/git-bisect.example.sh
  chmod 755 ${_ROOT}/drush/examples/helloworld.script
  _DRUSH_FILES="drush.php drush"
  for _df in ${_DRUSH_FILES}; do
    _php_cli_drush_update "${_df}"
  done
  _php_cli_local_ini_update
}
#
_hostmaster_go_up() {
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    _msg "INFO: Installing Aegir Provision backend..."
  fi
  mkdir -p ${_ROOT}/.drush/{sys,xts,usr}
  rm -rf ${_ROOT}/.drush/drush_make
  rm -rf ${_ROOT}/.drush/sys/drush_make
  cd ${_ROOT}/.drush
  if [ "${_AEGIR_VERSION}" != "static" ]; then
    cd ${_ROOT}/.drush
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      _msg "INFO: Downloading Drush and Provision extensions..."
    fi
    rm -rf ${_ROOT}/.drush/{sys,xts,usr}
    rm -rf ${_ROOT}/.drush/{provision,drush_make}
    mkdir -p ${_ROOT}/.drush/{sys,xts,usr}
    _rD="${_ROOT}/.drush"
    ${_gCb} ${_BRANCH_PRN} ${_gitHub}/provision.git \
      ${_rD}/sys/provision &> /dev/null
    ${_gCb} 7.x-1.x-dev ${_gitHub}/drupalgeddon.git \
      ${_rD}/usr/drupalgeddon &> /dev/null
    ${_gCb} 7.x-1.x ${_gitHub}/drush_ecl.git \
      ${_rD}/usr/drush_ecl &> /dev/null
    ${_gCb} 7.x-1.x ${_gitHub}/security_review.git \
      ${_rD}/xts/security_review &> /dev/null
    ${_gCb} 7.x-2.x ${_gitHub}/provision_boost.git \
      ${_rD}/xts/provision_boost &> /dev/null
    ${_gCb} 7.x-2.x ${_gitHub}/registry_rebuild.git \
      ${_rD}/usr/registry_rebuild &> /dev/null
    ${_gCb} 7.x-1.x ${_gitHub}/safe_cache_form_clear.git \
      ${_rD}/usr/safe_cache_form_clear &> /dev/null
    rm -rf ${_rD}/*/.git
    rm -rf ${_rD}/*/*/.git
    cd ${_rD}/usr
    _get_dev_ext "clean_missing_modules.tar.gz"
    _get_dev_ext "utf8mb4_convert-7.x-1.3.tar.gz"
  else
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      _msg "INFO: Downloading Drush and Provision extensions..."
    fi
    cd ${_ROOT}/.drush/sys
    _get_dev_ext "provision.tar.gz"
    cd ${_ROOT}/.drush/usr
    _get_dev_ext "clean_missing_modules.tar.gz"
    _get_dev_ext "drupalgeddon.tar.gz"
    _get_dev_ext "drush_ecl.tar.gz"
    _get_dev_ext "registry_rebuild.tar.gz"
    _get_dev_ext "safe_cache_form_clear.tar.gz"
    _get_dev_ext "utf8mb4_convert-7.x-1.3.tar.gz"
    cd ${_ROOT}/.drush/xts
    _get_dev_ext "provision_boost.tar.gz"
    _get_dev_ext "security_review.tar.gz"
  fi
  rm -rf ${_ROOT}/.drush/*/.git
  rm -rf ${_ROOT}/.drush/*/*/.git
  sed -i "s/files.aegir.cc/${_USE_MIR}/g" \
    ${_ROOT}/.drush/sys/provision/aegir.make &> /dev/null
  cd ${_PREV_HM_ROOT}
}
#
_hostmaster_dr_tt() {
  if ${_DRUSHCMD} help | grep "^ provision-install" > /dev/null ; then
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      _msg "${_STATUS} B: Drush test result OK"
    fi
  else
    _msg "FATAL ERROR: Drush is broken (${_DRUSHCMD} help failed)"
    _msg "FATAL ERROR: Aborting AegirUpgrade installer NOW!"
    touch /opt/tmp/status-AegirUpgrade-FAIL
    exit 1
  fi
}
#
_hostmaster_mi_up() {
  _msg "INFO: Running hostmaster-migrate, please wait..."
  ### security_review breaks the upgrade if active
  mv -f ${_ROOT}/.drush/xts/security_review/security_review.drush.inc \
    ${_ROOT}/.drush/xts/security_review/foo.txt  &> /dev/null
  export DEBIAN_FRONTEND=noninteractive
  export APT_LISTCHANGES_FRONTEND=none
  if [ -z "${TERM+x}" ]; then
    export TERM=vt100
  fi

  #
  # Fix broken Entity module if needed.
  #
  _pthA="profiles/hostmaster/modules/contrib/entity"
  _pthB="module_filter.module"
  #
  if [ -e "${_PREV_HM_ROOT}/${_pthA}/${_pthB}" ]; then
    _msg "INFO: Fixing broken Entity module..."
    rm -rf ${_PREV_HM_ROOT}/${_pthA}
    cd ${_PREV_HM_ROOT}/profiles/hostmaster/modules/contrib
    _get_dev_stc "entity-7.x-1.11.tar.gz"
    ${_DRUSHCMD} @hostmaster en entity -y
    ${_DRUSHCMD} @hostmaster dis hosting_ssl -y
    ${_DRUSHCMD} @hostmaster dis hosting_le -y
    ${_DRUSHCMD} @hostmaster dis hosting_le_vhost -y
    ${_DRUSHCMD} @hostmaster dis hosting_nginx_ssl -y
    ${_DRUSHCMD} @hostmaster sqlq "DELETE FROM hosting_service WHERE service LIKE 'http'"
    ${_DRUSHCMD} @hostmaster sqlq "INSERT INTO hosting_service (nid, vid, service, type, restart_cmd, port, available) VALUES ('2', '2', 'http', 'nginx', 'sudo /etc/init.d/nginx reload', '80', '1')"
    ${_DRUSHCMD} @hostmaster sqlq "UPDATE hosting_service SET type='nginx' WHERE service='http'"
    ${_DRUSHCMD} @hostmaster hosting-task @server_master verify --force
    ${_DRUSHCMD} @hostmaster hosting-dispatch
    wait
    sleep 5
    ${_DRUSHCMD} @hostmaster hosting-tasks --force
    wait
    sleep 5
    ${_DRUSHCMD} @hostmaster hosting-tasks --force
    wait
    sleep 5
    ${_DRUSHCMD} @hostmaster hosting-tasks --force
    wait
    _msg "INFO: Waiting 15 seconds..."
    sleep 15
  fi
  _BROKEN_SSL_TEST=$(grep "nginx default ssl server" /var/aegir/config/server_master/nginx.conf 2>&1)
  if [ ! -z "${_BROKEN_SSL_TEST}" ]; then
    _msg "INFO: Disabling nginx_ssl on master..."
    ${_DRUSHCMD} @hostmaster dis hosting_ssl -y
    ${_DRUSHCMD} @hostmaster dis hosting_le -y
    ${_DRUSHCMD} @hostmaster dis hosting_le_vhost -y
    ${_DRUSHCMD} @hostmaster dis hosting_nginx_ssl -y
    ${_DRUSHCMD} @hostmaster sqlq "DELETE FROM hosting_service WHERE service LIKE 'http'"
    ${_DRUSHCMD} @hostmaster sqlq "INSERT INTO hosting_service (nid, vid, service, type, restart_cmd, port, available) VALUES ('2', '2', 'http', 'nginx', 'sudo /etc/init.d/nginx reload', '80', '1')"
    ${_DRUSHCMD} @hostmaster sqlq "UPDATE hosting_service SET type='nginx' WHERE service='http'"
    ${_DRUSHCMD} @hostmaster hosting-task @server_master verify --force
    ${_DRUSHCMD} @hostmaster hosting-dispatch
    wait
    sleep 5
    ${_DRUSHCMD} @hostmaster hosting-tasks --force
    wait
    sleep 5
    ${_DRUSHCMD} @hostmaster hosting-tasks --force
    wait
    sleep 5
    ${_DRUSHCMD} @hostmaster hosting-tasks --force
    wait
    touch /var/aegir/disable_nginx_ssl.log
    _msg "INFO: Waiting 5 seconds..."
    sleep 5
  fi
  if [ -e "${_PREV_HM_ROOT}/modules/path_alias_cache" ]; then
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      ${_DRUSHCMD} @hostmaster dis aegir_custom_settings -y
      ${_DRUSHCMD} @hostmaster pm-uninstall aegir_custom_settings -y
      ${_DRUSHCMD} @hostmaster dis hosting_advanced_cron -y
      ${_DRUSHCMD} @hostmaster en ctools -y
      ${_DRUSHCMD} @hostmaster registry-rebuild
    else
      ${_DRUSHCMD} @hostmaster dis aegir_custom_settings -y &> /dev/null
      ${_DRUSHCMD} @hostmaster pm-uninstall aegir_custom_settings -y &> /dev/null
      ${_DRUSHCMD} @hostmaster dis hosting_advanced_cron -y &> /dev/null
      ${_DRUSHCMD} @hostmaster en ctools -y &> /dev/null
      ${_DRUSHCMD} @hostmaster registry-rebuild &> /dev/null
    fi
  else
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      ${_DRUSHCMD} @hostmaster dis hosting_custom_settings -y
      ${_DRUSHCMD} @hostmaster pm-uninstall hosting_custom_settings -y
      ${_DRUSHCMD} @hostmaster registry-rebuild
    else
      ${_DRUSHCMD} @hostmaster dis hosting_custom_settings -y &> /dev/null
      ${_DRUSHCMD} @hostmaster pm-uninstall hosting_custom_settings -y &> /dev/null
      ${_DRUSHCMD} @hostmaster registry-rebuild &> /dev/null
    fi
  fi
  ${_DRUSHCMD} cc drush &> /dev/null
  rm -rf ${_ROOT}/.tmp/cache
  ${_DRUSHCMD} @hostmaster sqlc < ${_bldPth}/aegir/helpers/hosting_cron.sql &> /dev/null
  ${_DRUSHCMD} @hostmaster sqlq "DELETE FROM hosting_task_log \
    WHERE timestamp < UNIX_TIMESTAMP(DATE_SUB(NOW(), INTERVAL 3 MONTH))" &> /dev/null
  ${_DRUSHCMD} @hostmaster sqlq "OPTIMIZE TABLE hosting_task_log" &> /dev/null
  ${_DRUSHCMD} @hostmaster sqlq "DELETE FROM hosting_task \
    WHERE task_type='delete' AND task_status='-1'" &> /dev/null
  ${_DRUSHCMD} @hostmaster sqlq "DELETE FROM hosting_task \
    WHERE task_type='delete' AND task_status='0' AND executed='0'" &> /dev/null
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    ${_DRUSHCMD} hostmaster-migrate ${_DOMAIN} ${_HM_ROOT} -y -d
  else
    ${_DRUSHCMD} hostmaster-migrate ${_DOMAIN} ${_HM_ROOT} -y &> /dev/null
  fi
  if [ -e "${_ROOT}/.drush/hostmaster.alias.drushrc.php" ]; then
    _THIS_HM_ROOT=$(cat ${_ROOT}/.drush/hostmaster.alias.drushrc.php \
      | grep "root'" \
      | cut -d: -f2 \
      | awk '{ print $3}' \
      | sed "s/[\,']//g" 2>&1)
    if [ -e "${_THIS_HM_ROOT}/sites/all" ] \
      && [ ! -e "${_THIS_HM_ROOT}/sites/all/libraries" ]; then
      mkdir -p \
        ${_THIS_HM_ROOT}/sites/all/{modules,themes,libraries} &> /dev/null
    fi
  fi
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    ${_DRUSHCMD} @hostmaster registry-rebuild
    ${_DRUSHCMD} @hostmaster en hosting_cron -y
    ${_DRUSHCMD} @hostmaster cache-clear all
    ${_DRUSHCMD} @hostmaster updb -y
  else
    ${_DRUSHCMD} @hostmaster registry-rebuild &> /dev/null
    ${_DRUSHCMD} @hostmaster en hosting_cron -y &> /dev/null
    ${_DRUSHCMD} @hostmaster cache-clear all &> /dev/null
    ${_DRUSHCMD} @hostmaster updb -y &> /dev/null
  fi
  export DEBIAN_FRONTEND=text
  mv -f ${_ROOT}/.drush/xts/security_review/foo.txt \
    ${_ROOT}/.drush/xts/security_review/security_review.drush.inc &> /dev/null
  mkdir -p ${_ROOT}/backups/system/old_hostmaster
  chmod 700 ${_ROOT}/backups/system/old_hostmaster
  chmod 700 ${_ROOT}/backups/system
  mv -f ${_ROOT}/backups/*host8* \
    ${_ROOT}/backups/system/old_hostmaster/ &> /dev/null
  mv -f ${_ROOT}/backups/*o8.io* \
    ${_ROOT}/backups/system/old_hostmaster/ &> /dev/null
  mv -f ${_ROOT}/backups/*boa.io* \
    ${_ROOT}/backups/system/old_hostmaster/ &> /dev/null
  mv -f ${_ROOT}/backups/*aegir.cc* \
    ${_ROOT}/backups/system/old_hostmaster/ &> /dev/null
  chmod 600 ${_ROOT}/backups/system/old_hostmaster/* &> /dev/null
}

###--------------------###

_LASTNUM=001
_DISTRO=001
_PREV_HM_ROOT=$(find ${_ROOT} -maxdepth 1 -type d | grep hostmaster 2>&1)

if [ -d "${_ROOT}/host_master" ]; then
  if [ ! -d "${_ROOT}/host_master/000" ]; then
    mkdir -p ${_ROOT}/host_master/000
    if [ ! -e "${_ROOT}/host_master/000/placeholder_dont_remove.txt" ]; then
      touch ${_ROOT}/host_master/000/placeholder_dont_remove.txt
    fi
  fi
fi

if [ -d "${_ROOT}/host_master/000" ]; then
  cd ${_ROOT}/host_master
  _list=([0-9]*)
  _last=${_list[@]: -1}
  _LASTNUM=$_last
  _BASH_TEST=$(bash --version 2>&1)
  if [[ "${_BASH_TEST}" =~ "version 5.1" ]] || [[ "${_BASH_TEST}" =~ "version 5.2" ]]; then
    _nextnum=00$((10#0${_last%%[^0-9]*} + 1))
  else
    _nextnum=00$((10#${_last%%[^0-9]*} + 1))
  fi
  _nextnum=${_nextnum: -3}
  _PREV_HM_ROOT_TEST="${_ROOT}/host_master/${_LASTNUM}"
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    _msg "INFO: Testing previous install..."
  fi
  if [ -e "${_PREV_HM_ROOT_TEST}/sites/${_DOMAIN}/settings.php" ]; then
    _DISTRO=${_nextnum}
    _PREV_HM_ROOT="${_ROOT}/host_master/${_LASTNUM}"
    if [ -e "${_PREV_HM_ROOT}/modules/path_alias_cache" ]; then
      _DEBUG_MODE=YES
    fi
  else
    _DEBUG_MODE=YES
    _msg "INFO: Testing previous install..."
    _msg "INFO: OPS, zombie found, moving it to backups..."
    sleep 1
    mv -f ${_PREV_HM_ROOT_TEST} \
      ${_ROOT}/backups/system/empty-hm-${_LASTNUM}-${_NOW} &> /dev/null
    cd ${_ROOT}/host_master
    _list=([0-9]*)
    _last=${_list[@]: -1}
    _LASTNUM=$_last
    _BASH_TEST=$(bash --version 2>&1)
    if [[ "${_BASH_TEST}" =~ "version 5.1" ]] || [[ "${_BASH_TEST}" =~ "version 5.2" ]]; then
      _nextnum=00$((10#0${_last%%[^0-9]*} + 1))
    else
      _nextnum=00$((10#${_last%%[^0-9]*} + 1))
    fi
    _nextnum=${_nextnum: -3}
    _DISTRO=${_nextnum}
    _PREV_HM_ROOT_TEST="${_ROOT}/host_master/${_LASTNUM}"
    _msg "INFO: Testing previous install again after removing zombie..."
    sleep 1
    if [ -e "${_PREV_HM_ROOT_TEST}/sites/${_DOMAIN}/settings.php" ]; then
      _DISTRO=${_nextnum}
      _PREV_HM_ROOT="${_ROOT}/host_master/${_LASTNUM}"
    else
      _DEBUG_MODE=YES
      _msg "INFO: Testing previous install again..."
      _msg "INFO: OPS, another zombie found, moving it to backups..."
      sleep 1
      mv -f ${_PREV_HM_ROOT_TEST} \
        ${_ROOT}/backups/system/empty-hm-${_LASTNUM}-${_NOW}-sec &> /dev/null
      cd ${_ROOT}/host_master
      _list=([0-9]*)
      _last=${_list[@]: -1}
      _LASTNUM=$_last
      _BASH_TEST=$(bash --version 2>&1)
      if [[ "${_BASH_TEST}" =~ "version 5.1" ]] || [[ "${_BASH_TEST}" =~ "version 5.2" ]]; then
        _nextnum=00$((10#0${_last%%[^0-9]*} + 1))
      else
        _nextnum=00$((10#${_last%%[^0-9]*} + 1))
      fi
      _nextnum=${_nextnum: -3}
      _DISTRO=${_nextnum}
      _PREV_HM_ROOT_TEST="${_ROOT}/host_master/${_LASTNUM}"
      _msg "INFO: Testing previous install again after removing second zombie..."
      sleep 1
      if [ -e "${_PREV_HM_ROOT_TEST}/sites/${_DOMAIN}/settings.php" ]; then
        _DISTRO=${_nextnum}
        _PREV_HM_ROOT="${_ROOT}/host_master/${_LASTNUM}"
      fi
    fi
  fi
fi

_HM_ROOT="${_ROOT}/host_master/${_DISTRO}"
if [ -d "${_HM_ROOT}" ]; then
  _msg "FATAL ERROR: ${_HM_ROOT} already exists"
  _msg "FATAL ERROR: Too many zombies to delete! Try again..."
  _msg "FATAL ERROR: Aborting AegirUpgrade installer NOW!"
  touch /opt/tmp/status-AegirUpgrade-FAIL
  exit 1
fi

mkdir -p ${_ROOT}/host_master
chmod 711 ${_ROOT}/host_master &> /dev/null
if [ ! -d "/var/aegir/.drush/sys/provision/http" ]; then
  _msg "FATAL ERROR: Required directory does not exist:"
  _msg "FATAL ERROR: /var/aegir/.drush/sys/provision/http"
  _msg "FATAL ERROR: Aborting AegirUpgrade installer NOW!"
  touch /opt/tmp/status-AegirUpgrade-FAIL
  exit 1
fi
if [ -e "${_PREV_HM_ROOT}/sites/${_DOMAIN}/settings.php" ]; then
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    _msg "INFO: Test OK, we can proceed with Hostmaster upgrade"
  fi
  _hostmaster_mv_up
  _hostmaster_dr_up
  _hostmaster_go_up
  _hostmaster_dr_tt
  _hostmaster_mi_up
else
  _msg "FATAL ERROR: Your setup is probably broken because required file"
  _msg "FATAL ERROR: ${_PREV_HM_ROOT}/sites/${_DOMAIN}/settings.php"
  _msg "FATAL ERROR: does not exist"
  _msg "FATAL ERROR: Aborting AegirUpgrade installer NOW!"
  touch /opt/tmp/status-AegirUpgrade-FAIL
  exit 1
fi


###----------------------------------------###
###
###  Barracuda Aegir Installer
###  Copyright (C) 2010-2024 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###----------------------------------------###
