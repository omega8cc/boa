#!/bin/bash

HOME=/root
SHELL=/bin/bash
PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin

export PATH=${PATH}
export SHELL=${SHELL}
export HOME=${HOME}

_H_USER=EDIT_USER

tRee=dev
export tRee="${tRee}"

check_root() {
  if [ `whoami` = "root" ]; then
    ionice -c2 -n7 -p $$
    renice 19 -p $$
    chmod a+w /dev/null
  else
    echo "ERROR: This script should be ran as a root user"
    exit 1
  fi
  _DF_TEST=$(df -kTh / -l \
    | grep '/' \
    | sed 's/\%//g' \
    | awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "${_DF_TEST}" ] && [ "${_DF_TEST}" -gt "90" ]; then
    echo "ERROR: Your disk space is almost full !!! ${_DF_TEST}/100"
    echo "ERROR: We can not proceed until it is below 90/100"
    exit 1
  fi
}
check_root

cleanup() {
  buildTest="1"
  tpDir="/data/disk/${_H_USER}/.tmp"
  ceDir="${tpDir}/cache"
  dlDir="${ceDir}/download"
  gtDir="${ceDir}/git"
  clCtr="/data/disk/${_H_USER}/static/control/clear-drush-cache.info"
  exCtr="/data/disk/${_H_USER}/backups/tmp_expim/metadata"
  if [ -e "${tpDir}" ]; then
    buildTest=$(ls ${tpDir} | grep "_tmp_" | wc -l | tr -d "\n" 2>&1)
    buildTest=${buildTest//[^0-9]/}
  fi
  if [ -e "${clCtr}" ]; then
    if [ -e "${exCtr}" ]; then
      rm -f ${exCtr}
      rm -f ${clCtr}
      buildTest="0"
    fi
    if [ -e "${gtDir}" ] || [ "${buildTest}" -ge "1" ]; then
      rm -rf ${tpDir}/*
      rm -f ${clCtr}
      buildTest="0"
    fi
  fi
  if [ "${buildTest}" = "0" ] && [ -e "${gtDir}" ]; then
    rm -rf ${gtDir}
    rm -rf ${dlDir}
  fi
}
cleanup

count_cpu() {
  _CPU_INFO=$(grep -c processor /proc/cpuinfo 2>&1)
  _CPU_INFO=${_CPU_INFO//[^0-9]/}
  _NPROC_TEST=$(which nproc 2>&1)
  if [ -z "${_NPROC_TEST}" ]; then
    _CPU_NR="${_CPU_INFO}"
  else
    _CPU_NR=$(nproc 2>&1)
  fi
  _CPU_NR=${_CPU_NR//[^0-9]/}
  if [ ! -z "${_CPU_NR}" ] \
    && [ ! -z "${_CPU_INFO}" ] \
    && [ "${_CPU_NR}" -gt "${_CPU_INFO}" ] \
    && [ "${_CPU_INFO}" -gt "0" ]; then
    _CPU_NR="${_CPU_INFO}"
  fi
  if [ -z "${_CPU_NR}" ] || [ "${_CPU_NR}" -lt "1" ]; then
    _CPU_NR=1
  fi
}

load_control() {
  if [ -e "/root/.barracuda.cnf" ]; then
    source /root/.barracuda.cnf
    _CPU_SPIDER_RATIO=${_CPU_SPIDER_RATIO//[^0-9]/}
  fi
  if [ -z "${_CPU_SPIDER_RATIO}" ]; then
    _CPU_SPIDER_RATIO=3
  fi
  _O_LOAD=$(awk '{print $1*100}' /proc/loadavg 2>&1)
  _O_LOAD=$(( _O_LOAD / _CPU_NR ))
  _O_LOAD_SPR=$(( 99 * _CPU_SPIDER_RATIO ))
}

if_octopus_upgrade() {
  if [ "${_O_LOAD}" -lt "${_O_LOAD_SPR}" ]; then
    upCtr="/data/disk/${_H_USER}/static/control/run-upgrade.pid"
    plCtr="/data/disk/${_H_USER}/static/control/platforms.info"
    if [ -e "${plCtr}" ] && [ -e "${upCtr}" ]; then
      rm -f ${upCtr}
      [ -e "/root/.silent.update.cnf" ] && rm -f /root/.silent.update.cnf
      bash /opt/local/bin/octopus up-${tRee} ${_H_USER} force log
    fi
  fi
}

action() {
  if [ "${_O_LOAD}" -lt "${_O_LOAD_SPR}" ]; then
    if [ "${buildTest}" = "0" ] \
      || [ -z "${buildTest}" ] \
      || [ ! -e "${ceDir}" ]; then
      su -s /bin/bash - ${_H_USER} -c "drush8 cc drush" &> /dev/null
      wait
      su -s /bin/bash - ${_H_USER} -c "bash /data/disk/${_H_USER}/aegir.sh"
      wait
      touch /var/xdrago/log/last-run-${_H_USER}
    else
      touch /var/xdrago/log/skip-run-${_H_USER}
    fi
  fi
}

if [ -e "/var/run/boa_wait.pid" ] \
  || [ -e "/var/run/manage_ruby_users.pid" ]; then
  touch /var/xdrago/log/wait-${_H_USER}
  exit 0
else
  count_cpu
  load_control
  if_octopus_upgrade
  action
  exit 0
fi
