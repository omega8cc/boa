#!/bin/bash

export HOME=/root
export SHELL=/bin/bash
export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin
export _tRee=pro

_H_USER=EDIT_USER

_check_root() {
  if [ `whoami` = "root" ]; then
    ionice -c2 -n7 -p $$
    renice 19 -p $$
    chmod a+w /dev/null
  else
    echo "ERROR: This script should be run as a root user"
    exit 1
  fi
  _DF_TEST=$(df -kTh / -l \
    | grep '/' \
    | sed 's/\%//g' \
    | awk '{print $6}' 2> /dev/null)
  _DF_TEST=${_DF_TEST//[^0-9]/}
  if [ ! -z "${_DF_TEST}" ] && [ "${_DF_TEST}" -gt "90" ]; then
    echo "ERROR: Your disk space is almost full !!! ${_DF_TEST}/100"
    echo "ERROR: We can not proceed until it is below 90/100"
    exit 1
  fi
}
_check_root

_run_cleanup() {
  _buildTest="1"
  _tpDir="/data/disk/${_H_USER}/.tmp"
  _ceDir="${_tpDir}/cache"
  _dlDir="${_ceDir}/download"
  _gtDir="${_ceDir}/git"
  _clCtr="/data/disk/${_H_USER}/static/control/clear-drush-cache.info"
  _exCtr="/data/disk/${_H_USER}/backups/tmp_expim/metadata"
  if [ -e "${_tpDir}" ]; then
    _buildTest=$(ls ${_tpDir} | grep "_tmp_" | wc -l | tr -d "\n" 2>&1)
    _buildTest=${_buildTest//[^0-9]/}
  fi
  if [ -e "${_clCtr}" ]; then
    if [ -e "${_exCtr}" ]; then
      rm -f ${_exCtr}
      rm -f ${_clCtr}
      _buildTest="0"
    fi
    if [ -e "${_gtDir}" ] || [ "${_buildTest}" -ge "1" ]; then
      rm -rf ${_tpDir}/*
      rm -f ${_clCtr}
      _buildTest="0"
    fi
  fi
  if [ "${_buildTest}" = "0" ] && [ -e "${_gtDir}" ]; then
    rm -rf ${_gtDir}
    rm -rf ${_dlDir}
  fi
}
_run_cleanup

# Remove dangerous stuff from the string.
_sanitize_string() {
  echo "$1" | sed 's/[\\\/\^\?\>\`\#\"\{\(\&\|\*]//g; s/\(['"'"'\]\)//g'
}

# Generate new sftp password and update expiration date
_if_sftp_password_update() {
  _upCtr="/data/disk/${_H_USER}/static/control/run-sftp-password-update.pid"
  if [ -e "${_upCtr}" ]; then
    _sftpUser="${_H_USER}.ftp"
    rm -f ${_upCtr}
    _PWD_CHARS=64
    _RANDPASS_TEST=$(randpass -V 2>&1)
    if [[ "${_RANDPASS_TEST}" =~ "alnum" ]]; then
      _ESC_PASS=$(randpass "${_PWD_CHARS}" alnum 2>&1)
    else
      _ESC_PASS=$(shuf -zer -n64 {A..Z} {a..z} {0..9} % @ | tr -d '\0' 2>&1)
      _ESC_PASS=$(echo -n "${_ESC_PASS}" | tr -d "\n" 2>&1)
      _ESC_PASS=$(_sanitize_string "${_ESC_PASS}" 2>&1)
    fi
    _ESC_PASS=$(echo -n "${_ESC_PASS}" | tr -d "\n" 2>&1)
    _LEN_PASS=$(echo ${#_ESC_PASS} 2>&1)
    if [ -z "${_ESC_PASS}" ] || [ "${_LEN_PASS}" -lt "9" ]; then
      _ESC_PASS=$(shuf -zer -n64 {A..Z} {a..z} {0..9} % @ | tr -d '\0' 2>&1)
      _ESC_PASS=$(echo -n "${_ESC_PASS}" | tr -d "\n" 2>&1)
      _ESC_PASS=$(_sanitize_string "${_ESC_PASS}" 2>&1)
    fi
    _LEN_PASS=$(echo ${#_ESC_PASS} 2>&1)
    if [ ! -z "${_ESC_PASS}" ] && [ "${_LEN_PASS}" -gt "9" ]; then
      chage -I -1 -m 0 -M 99999 -E -1 ${_sftpUser}
      echo "${_sftpUser}:${_ESC_PASS}" | chpasswd
      chage -M 90 ${_sftpUser}
      chage -W 7 ${_sftpUser}
      chage -d $(date +%Y-%m-%d) ${_sftpUser}
      echo "${_ESC_PASS}" > /data/disk/${_H_USER}/static/control/new-${_sftpUser}-password.txt
    fi
  fi
}

_if_octopus_upgrade() {
  _upCtr="/data/disk/${_H_USER}/static/control/run-upgrade.pid"
  _plCtr="/data/disk/${_H_USER}/static/control/platforms.info"
  if [ -e "${_plCtr}" ] && [ -e "${_upCtr}" ]; then
    rm -f ${_upCtr}
    [ -e "/root/.silent.update.cnf" ] && rm -f /root/.silent.update.cnf
    bash /opt/local/bin/octopus up-${_tRee} ${_H_USER} force log
  fi
}

_run_action() {
  if [ "${_buildTest}" = "0" ] \
    || [ -z "${_buildTest}" ] \
    || [ ! -e "${_ceDir}" ]; then
    su -s /bin/bash - ${_H_USER} -c "drush8 cc drush" &> /dev/null
    wait
    su -s /bin/bash - ${_H_USER} -c "bash /data/disk/${_H_USER}/aegir.sh"
    wait
    touch /var/xdrago/log/last-run-${_H_USER}
  else
    touch /var/xdrago/log/skip-run-${_H_USER}
  fi
}

if [ -e "/run/boa_wait.pid" ]; then
  touch /var/xdrago/log/wait-${_H_USER}
  exit 0
else
  _if_sftp_password_update
  _if_octopus_upgrade
  _run_action
  exit 0
fi
